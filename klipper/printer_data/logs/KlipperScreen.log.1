--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.3-10-g304e285
2023-07-12 07:36:30,194 [screen.py:main()] - KlipperScreen version: v0.3.3-10-g304e285
2023-07-12 07:36:30,465 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-07-12 07:36:30,468 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2023-07-12 07:36:30,494 [config.py:__init__()] - Configuration validated succesfuly
2023-07-12 07:36:30,495 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-07-12 07:36:30,671 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-07-12 07:36:30,672 [config.py:install_language()] - Using system lang
2023-07-12 07:36:30,673 [config.py:install_language()] - Using lang en
2023-07-12 07:36:30,708 [screen.py:__init__()] - Screen resolution: 800x480
2023-07-12 07:36:30,711 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-07-12 07:36:32,728 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-07-12 07:36:32,741 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-07-12 07:36:32,759 [screen.py:initial_connection()] - Default printer: None
2023-07-12 07:36:32,760 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-07-12 07:36:32,760 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-07-12 07:36:32,761 [screen.py:_load_panel()] - Panel path: /home/biqu/KlipperScreen/panels/splash_screen.py
2023-07-12 07:36:32,956 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-07-12 07:36:33,007 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-07-12 07:36:33,055 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-07-12 07:36:33,077 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-07-12 07:36:33,080 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-07-12 07:36:33,096 [_logging.py:info()] - Websocket connected
2023-07-12 07:36:33,096 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-07-12 07:36:33,169 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-07-12 07:36:33,240 [KlippyRest.py:send_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/machine/device_power/devices
2023-07-12 07:36:33,244 [screen.py:init_printer()] - Klipper not connected
2023-07-12 07:36:33,261 [screen.py:update_size()] - Size changed: 800x480
2023-07-12 07:36:36,543 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-07-12 07:36:36,562 [KlippyRest.py:send_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/machine/device_power/devices
2023-07-12 07:36:36,564 [screen.py:init_printer()] - Klipper not connected
2023-07-12 07:36:39,543 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-07-12 07:36:39,563 [KlippyRest.py:send_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/machine/device_power/devices
2023-07-12 07:36:39,564 [screen.py:init_printer()] - Klipper not connected
2023-07-12 07:36:42,541 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-07-12 07:36:42,561 [KlippyRest.py:send_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/machine/device_power/devices
2023-07-12 07:36:42,563 [screen.py:init_printer()] - Klipper not connected
2023-07-12 07:36:45,542 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-07-12 07:36:45,561 [KlippyRest.py:send_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/machine/device_power/devices
2023-07-12 07:36:45,562 [screen.py:init_printer()] - Klipper not connected
2023-07-12 07:55:49,465 [screen.py:_go_to_submenu()] - #### Go to submenu 
2023-07-12 07:55:49,466 [screen.py:_go_to_submenu()] - #### Menu __splashscreen
2023-07-12 07:55:49,469 [screen.py:_load_panel()] - Loading panel: menu
2023-07-12 07:55:49,470 [screen.py:_load_panel()] - Panel path: /home/biqu/KlipperScreen/panels/menu.py
2023-07-12 07:55:49,587 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen > 
2023-07-12 07:55:49,594 [menu.py:arrangeMenuItems()] - X > power
2023-07-12 07:55:49,597 [menu.py:evaluate_enable()] - moonraker connected True
2023-07-12 07:55:51,754 [screen.py:_load_panel()] - Loading panel: network
2023-07-12 07:55:51,755 [screen.py:_load_panel()] - Panel path: /home/biqu/KlipperScreen/panels/network.py
2023-07-12 07:55:51,838 [network.py:__init__()] - Found wireless interfaces: ['wlan0']
2023-07-12 07:55:51,839 [network.py:__init__()] - Using NetworkManager
2023-07-12 07:55:52,328 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen >  > network
2023-07-12 07:55:52,399 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'Beyond'
  File "/home/biqu/KlipperScreen/panels/network.py", line 115, in load_networks
    self.add_network(net, False)

  File "/home/biqu/KlipperScreen/panels/network.py", line 135, in add_network
    netinfo = self.wifi.get_network_info(ssid)

  File "/home/biqu/KlipperScreen/ks_includes/wifi_nm.py", line 226, in get_network_info
    path = self.path_by_ssid[ssid]
NoneType: None
2023-07-12 07:55:52,409 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'Beyond'
  File "/home/biqu/KlipperScreen/panels/network.py", line 115, in load_networks
    self.add_network(net, False)

  File "/home/biqu/KlipperScreen/panels/network.py", line 135, in add_network
    netinfo = self.wifi.get_network_info(ssid)

  File "/home/biqu/KlipperScreen/ks_includes/wifi_nm.py", line 226, in get_network_info
    path = self.path_by_ssid[ssid]
NoneType: None
2023-07-12 07:55:55,659 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'Beyond'
  File "/home/biqu/KlipperScreen/panels/network.py", line 115, in load_networks
    self.add_network(net, False)

  File "/home/biqu/KlipperScreen/panels/network.py", line 135, in add_network
    netinfo = self.wifi.get_network_info(ssid)

  File "/home/biqu/KlipperScreen/ks_includes/wifi_nm.py", line 226, in get_network_info
    path = self.path_by_ssid[ssid]
NoneType: None
2023-07-12 07:55:57,415 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'connected'
  File "/home/biqu/KlipperScreen/panels/network.py", line 326, in scan_callback
    self.add_network(net, False)

  File "/home/biqu/KlipperScreen/panels/network.py", line 181, in add_network
    if network_id != -1 or netinfo['connected']:
NoneType: None
2023-07-12 07:56:08,250 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'Beyond'
  File "/home/biqu/KlipperScreen/panels/network.py", line 115, in load_networks
    self.add_network(net, False)

  File "/home/biqu/KlipperScreen/panels/network.py", line 135, in add_network
    netinfo = self.wifi.get_network_info(ssid)

  File "/home/biqu/KlipperScreen/ks_includes/wifi_nm.py", line 226, in get_network_info
    path = self.path_by_ssid[ssid]
NoneType: None
2023-07-12 07:56:19,723 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'Beyond'
  File "/home/biqu/KlipperScreen/panels/network.py", line 115, in load_networks
    self.add_network(net, False)

  File "/home/biqu/KlipperScreen/panels/network.py", line 135, in add_network
    netinfo = self.wifi.get_network_info(ssid)

  File "/home/biqu/KlipperScreen/ks_includes/wifi_nm.py", line 226, in get_network_info
    path = self.path_by_ssid[ssid]
NoneType: None
2023-07-12 07:56:20,792 [screen.py:_menu_go_back()] - #### Menu go back
2023-07-12 07:56:20,804 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen > 
2023-07-12 07:56:20,812 [menu.py:arrangeMenuItems()] - X > power
2023-07-12 07:56:20,816 [menu.py:evaluate_enable()] - moonraker connected True
2023-07-12 07:56:22,142 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen >  > network
2023-07-12 07:56:22,247 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'Beyond'
  File "/home/biqu/KlipperScreen/panels/network.py", line 115, in load_networks
    self.add_network(net, False)

  File "/home/biqu/KlipperScreen/panels/network.py", line 135, in add_network
    netinfo = self.wifi.get_network_info(ssid)

  File "/home/biqu/KlipperScreen/ks_includes/wifi_nm.py", line 226, in get_network_info
    path = self.path_by_ssid[ssid]
NoneType: None
2023-07-12 07:56:26,343 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'Beyond'
  File "/home/biqu/KlipperScreen/panels/network.py", line 115, in load_networks
    self.add_network(net, False)

  File "/home/biqu/KlipperScreen/panels/network.py", line 135, in add_network
    netinfo = self.wifi.get_network_info(ssid)

  File "/home/biqu/KlipperScreen/ks_includes/wifi_nm.py", line 226, in get_network_info
    path = self.path_by_ssid[ssid]
NoneType: None
2023-07-12 07:56:40,888 [screen.py:_menu_go_back()] - #### Menu go back
2023-07-12 07:56:40,900 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen > 
2023-07-12 07:56:40,908 [menu.py:arrangeMenuItems()] - X > power
2023-07-12 07:56:40,911 [menu.py:evaluate_enable()] - moonraker connected True
2023-07-12 07:56:42,032 [screen.py:_menu_go_back()] - #### Menu go back
2023-07-12 07:56:42,049 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-07-12 07:56:45,501 [KlippyGtk.py:Dialog()] - Showing dialog <Gtk.Dialog object at 0xffffa77cf300 (GtkDialog at 0x20a5d0b0)>
2023-07-12 07:56:46,514 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-07-12 07:56:46,515 [screen.py:_send_action()] - machine.shutdown: None
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.3-10-g304e285
2023-07-12 07:57:06,990 [screen.py:main()] - KlipperScreen version: v0.3.3-10-g304e285
2023-07-12 07:57:07,257 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-07-12 07:57:07,261 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2023-07-12 07:57:07,284 [config.py:__init__()] - Configuration validated succesfuly
2023-07-12 07:57:07,286 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-07-12 07:57:07,383 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-07-12 07:57:07,385 [config.py:install_language()] - Using system lang
2023-07-12 07:57:07,387 [config.py:install_language()] - Using lang en
2023-07-12 07:57:07,433 [screen.py:__init__()] - Screen resolution: 800x480
2023-07-12 07:57:07,436 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-07-12 07:57:09,140 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-07-12 07:57:09,167 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-07-12 07:57:09,204 [screen.py:initial_connection()] - Default printer: None
2023-07-12 07:57:09,205 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-07-12 07:57:09,206 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-07-12 07:57:09,207 [screen.py:_load_panel()] - Panel path: /home/biqu/KlipperScreen/panels/splash_screen.py
2023-07-12 07:57:09,295 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-07-12 07:57:09,319 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-07-12 07:57:09,360 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-07-12 07:57:09,384 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-07-12 07:57:09,387 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-07-12 07:57:09,405 [_logging.py:info()] - Websocket connected
2023-07-12 07:57:09,406 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-07-12 07:57:09,454 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-07-12 07:57:09,499 [KlippyRest.py:send_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/machine/device_power/devices
2023-07-12 07:57:09,502 [screen.py:init_printer()] - Klipper not connected
2023-07-12 07:57:09,516 [screen.py:update_size()] - Size changed: 800x480
2023-07-12 07:57:12,668 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-07-12 07:57:12,691 [KlippyRest.py:send_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/machine/device_power/devices
2023-07-12 07:57:12,693 [screen.py:init_printer()] - Klipper not connected
2023-07-12 07:57:15,666 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-07-12 07:57:15,688 [KlippyRest.py:send_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/machine/device_power/devices
2023-07-12 07:57:15,712 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-07-12 07:57:15,945 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-07-12 07:57:15,948 [printer.py:reinit()] - Klipper version: v0.11.0-241-gffb5105b
2023-07-12 07:57:15,948 [printer.py:reinit()] - # Extruders: 0
2023-07-12 07:57:15,949 [printer.py:reinit()] - # Temperature devices: 0
2023-07-12 07:57:15,949 [printer.py:reinit()] - # Fans: 0
2023-07-12 07:57:15,949 [printer.py:reinit()] - # Output pins: 0
2023-07-12 07:57:15,950 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-07-12 07:57:16,202 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2023-07-12 07:57:16,204 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-07-12 07:57:16,204 [printer.py:change_state()] - Adding callback for state: error
2023-07-12 07:57:16,225 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-07-12 07:57:16,227 [printer.py:init_temp_store()] - Temp store: []
2023-07-12 07:57:16,264 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-07-12 07:57:16,267 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-07-12 07:57:16,267 [files.py:initialize()] - Gcodes path: None
2023-07-12 07:57:16,268 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-07-12 07:57:16,269 [screen.py:init_printer()] - Printer initialized
2023-07-12 07:57:16,273 [screen.py:show_panel()] - Reinitializing panel
2023-07-12 07:57:16,362 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-07-12 07:57:18,663 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-07-12 07:57:18,665 [printer.py:init_temp_store()] - Temp store: []
2023-07-12 07:57:18,684 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-07-12 07:57:18,686 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-07-12 07:58:46,828 [screen.py:_go_to_submenu()] - #### Go to submenu 
2023-07-12 07:58:46,829 [screen.py:_go_to_submenu()] - #### Menu __splashscreen
2023-07-12 07:58:46,836 [screen.py:_load_panel()] - Loading panel: menu
2023-07-12 07:58:46,837 [screen.py:_load_panel()] - Panel path: /home/biqu/KlipperScreen/panels/menu.py
2023-07-12 07:58:46,961 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen > 
2023-07-12 07:58:46,972 [menu.py:arrangeMenuItems()] - X > power
2023-07-12 07:58:46,977 [menu.py:evaluate_enable()] - moonraker connected True
2023-07-12 07:58:48,237 [screen.py:_load_panel()] - Loading panel: network
2023-07-12 07:58:48,237 [screen.py:_load_panel()] - Panel path: /home/biqu/KlipperScreen/panels/network.py
2023-07-12 07:58:48,273 [network.py:__init__()] - Found wireless interfaces: ['wlan0']
2023-07-12 07:58:48,274 [network.py:__init__()] - Using NetworkManager
2023-07-12 07:58:48,693 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen >  > network
2023-07-12 07:58:48,827 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'Beyond'
  File "/home/biqu/KlipperScreen/panels/network.py", line 115, in load_networks
    self.add_network(net, False)

  File "/home/biqu/KlipperScreen/panels/network.py", line 135, in add_network
    netinfo = self.wifi.get_network_info(ssid)

  File "/home/biqu/KlipperScreen/ks_includes/wifi_nm.py", line 226, in get_network_info
    path = self.path_by_ssid[ssid]
NoneType: None
2023-07-12 07:58:48,836 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'Beyond'
  File "/home/biqu/KlipperScreen/panels/network.py", line 115, in load_networks
    self.add_network(net, False)

  File "/home/biqu/KlipperScreen/panels/network.py", line 135, in add_network
    netinfo = self.wifi.get_network_info(ssid)

  File "/home/biqu/KlipperScreen/ks_includes/wifi_nm.py", line 226, in get_network_info
    path = self.path_by_ssid[ssid]
NoneType: None
2023-07-12 07:58:50,431 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'connected'
  File "/home/biqu/KlipperScreen/panels/network.py", line 326, in scan_callback
    self.add_network(net, False)

  File "/home/biqu/KlipperScreen/panels/network.py", line 181, in add_network
    if network_id != -1 or netinfo['connected']:
NoneType: None
2023-07-12 07:58:50,462 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'connected'
  File "/home/biqu/KlipperScreen/panels/network.py", line 326, in scan_callback
    self.add_network(net, False)

  File "/home/biqu/KlipperScreen/panels/network.py", line 181, in add_network
    if network_id != -1 or netinfo['connected']:
NoneType: None
2023-07-12 07:58:58,176 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'Beyond'
  File "/home/biqu/KlipperScreen/panels/network.py", line 115, in load_networks
    self.add_network(net, False)

  File "/home/biqu/KlipperScreen/panels/network.py", line 135, in add_network
    netinfo = self.wifi.get_network_info(ssid)

  File "/home/biqu/KlipperScreen/ks_includes/wifi_nm.py", line 226, in get_network_info
    path = self.path_by_ssid[ssid]
NoneType: None
2023-07-12 07:59:07,602 [keyboard.py:__init__()] - Keyboard en
2023-07-12 07:59:39,857 [KlippyGtk.py:Dialog()] - Showing dialog <Gtk.Dialog object at 0xffffa801e680 (GtkDialog at 0x15334340)>
2023-07-12 07:59:39,860 [wifi_nm.py:connect()] - Connecting to: beyond
2023-07-12 08:00:44,928 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-07-12 08:00:51,652 [screen.py:_menu_go_back()] - #### Menu go back
2023-07-12 08:00:51,665 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen > 
2023-07-12 08:00:51,672 [menu.py:arrangeMenuItems()] - X > power
2023-07-12 08:00:51,676 [menu.py:evaluate_enable()] - moonraker connected True
2023-07-12 08:00:54,534 [screen.py:_load_panel()] - Loading panel: system
2023-07-12 08:00:54,535 [screen.py:_load_panel()] - Panel path: /home/biqu/KlipperScreen/panels/system.py
2023-07-12 08:00:54,668 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/machine/update/status
2023-07-12 08:00:54,678 [system.py:update_program_info()] - Invalid KlipperScreen ?
2023-07-12 08:00:54,687 [system.py:update_program_info()] - Invalid crowsnest ?
2023-07-12 08:00:54,696 [system.py:update_program_info()] - Invalid klipper ?
2023-07-12 08:00:54,699 [system.py:_needs_update()] - mainsail v2.6.0 -> ?
2023-07-12 08:00:54,702 [system.py:update_program_info()] - Invalid mainsail-config ?
2023-07-12 08:00:54,711 [system.py:update_program_info()] - Invalid moonraker ?
2023-07-12 08:00:54,715 [system.py:update_program_info()] - Invalid print_area_bed_mesh ?
2023-07-12 08:00:54,724 [system.py:update_program_info()] - Invalid sonar ?
2023-07-12 08:00:54,729 [system.py:update_program_info()] - Invalid timelapse ?
2023-07-12 08:00:54,740 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen >  > system
2023-07-12 08:00:54,758 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/machine/update/status?refresh=false
2023-07-12 08:00:54,760 [system.py:update_program_info()] - Invalid KlipperScreen ?
2023-07-12 08:00:54,764 [system.py:update_program_info()] - Invalid crowsnest ?
2023-07-12 08:00:54,767 [system.py:update_program_info()] - Invalid klipper ?
2023-07-12 08:00:54,769 [system.py:_needs_update()] - mainsail v2.6.0 -> ?
2023-07-12 08:00:54,771 [system.py:update_program_info()] - Invalid mainsail-config ?
2023-07-12 08:00:54,774 [system.py:update_program_info()] - Invalid moonraker ?
2023-07-12 08:00:54,776 [system.py:update_program_info()] - Invalid print_area_bed_mesh ?
2023-07-12 08:00:54,779 [system.py:update_program_info()] - Invalid sonar ?
2023-07-12 08:00:54,783 [system.py:update_program_info()] - Invalid timelapse ?
2023-07-12 08:01:07,307 [screen.py:_menu_go_back()] - #### Menu go back
2023-07-12 08:01:07,322 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen > 
2023-07-12 08:01:07,329 [menu.py:arrangeMenuItems()] - X > power
2023-07-12 08:01:07,333 [menu.py:evaluate_enable()] - moonraker connected True
2023-07-12 08:01:09,044 [screen.py:_menu_go_back()] - #### Menu go back
2023-07-12 08:01:09,060 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-07-12 08:01:11,059 [screen.py:_go_to_submenu()] - #### Go to submenu 
2023-07-12 08:01:11,060 [screen.py:_go_to_submenu()] - #### Menu __splashscreen
2023-07-12 08:01:11,073 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen > 
2023-07-12 08:01:11,081 [menu.py:arrangeMenuItems()] - X > power
2023-07-12 08:01:11,085 [menu.py:evaluate_enable()] - moonraker connected True
2023-07-12 08:01:20,358 [screen.py:_menu_go_back()] - #### Menu go home
2023-07-12 08:01:20,375 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-07-12 08:01:24,466 [KlippyWebsocket.py:connect()] - Already connected
2023-07-12 08:01:36,417 [screen.py:_go_to_submenu()] - #### Go to submenu 
2023-07-12 08:01:36,418 [screen.py:_go_to_submenu()] - #### Menu __splashscreen
2023-07-12 08:01:36,447 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen > 
2023-07-12 08:01:36,459 [menu.py:arrangeMenuItems()] - X > power
2023-07-12 08:01:36,464 [menu.py:evaluate_enable()] - moonraker connected True
2023-07-12 08:01:38,958 [screen.py:_load_panel()] - Loading panel: settings
2023-07-12 08:01:38,959 [screen.py:_load_panel()] - Panel path: /home/biqu/KlipperScreen/panels/settings.py
2023-07-12 08:01:39,269 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen >  > settings
2023-07-12 08:01:47,371 [screen.py:_menu_go_back()] - #### Menu go back
2023-07-12 08:01:47,384 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen > 
2023-07-12 08:01:47,392 [menu.py:arrangeMenuItems()] - X > power
2023-07-12 08:01:47,396 [menu.py:evaluate_enable()] - moonraker connected True
2023-07-12 08:01:48,714 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen >  > network
2023-07-12 08:01:48,920 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'Beyond'
  File "/home/biqu/KlipperScreen/panels/network.py", line 115, in load_networks
    self.add_network(net, False)

  File "/home/biqu/KlipperScreen/panels/network.py", line 135, in add_network
    netinfo = self.wifi.get_network_info(ssid)

  File "/home/biqu/KlipperScreen/ks_includes/wifi_nm.py", line 226, in get_network_info
    path = self.path_by_ssid[ssid]
NoneType: None
2023-07-12 08:01:53,556 [screen.py:_menu_go_back()] - #### Menu go back
2023-07-12 08:01:53,584 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen > 
2023-07-12 08:01:53,600 [menu.py:arrangeMenuItems()] - X > power
2023-07-12 08:01:53,608 [menu.py:evaluate_enable()] - moonraker connected True
2023-07-12 08:01:55,816 [screen.py:_menu_go_back()] - #### Menu go back
2023-07-12 08:01:55,835 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-07-12 08:01:58,044 [KlippyWebsocket.py:restart()] - Sending printer.restart
2023-07-12 08:01:58,073 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2023-07-12 08:01:58,075 [printer.py:change_state()] - Adding callback for state: disconnected
2023-07-12 08:01:58,078 [screen.py:state_disconnected()] - ### Going to disconnected
2023-07-12 08:01:58,081 [screen.py:show_panel()] - Reinitializing panel
2023-07-12 08:01:58,179 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-07-12 08:02:01,692 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-07-12 08:02:01,735 [KlippyRest.py:send_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/machine/device_power/devices
2023-07-12 08:02:01,761 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-07-12 08:02:01,967 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-07-12 08:02:01,969 [printer.py:reinit()] - Klipper version: v0.11.0-241-gffb5105b
2023-07-12 08:02:01,970 [printer.py:reinit()] - # Extruders: 0
2023-07-12 08:02:01,970 [printer.py:reinit()] - # Temperature devices: 0
2023-07-12 08:02:01,970 [printer.py:reinit()] - # Fans: 0
2023-07-12 08:02:01,971 [printer.py:reinit()] - # Output pins: 0
2023-07-12 08:02:01,971 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-07-12 08:02:02,225 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2023-07-12 08:02:02,227 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-07-12 08:02:02,227 [printer.py:change_state()] - Adding callback for state: error
2023-07-12 08:02:02,244 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-07-12 08:02:02,246 [printer.py:init_temp_store()] - Temp store: []
2023-07-12 08:02:02,266 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-07-12 08:02:02,268 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-07-12 08:02:02,269 [files.py:initialize()] - Gcodes path: None
2023-07-12 08:02:02,269 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-07-12 08:02:02,271 [screen.py:init_printer()] - Printer initialized
2023-07-12 08:02:02,274 [screen.py:show_panel()] - Reinitializing panel
2023-07-12 08:02:02,341 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-07-12 08:02:02,875 [KlippyWebsocket.py:restart()] - Sending printer.restart
2023-07-12 08:02:02,892 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2023-07-12 08:02:02,892 [printer.py:change_state()] - Adding callback for state: disconnected
2023-07-12 08:02:02,894 [screen.py:state_disconnected()] - ### Going to disconnected
2023-07-12 08:02:02,896 [screen.py:show_panel()] - Reinitializing panel
2023-07-12 08:02:02,961 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-07-12 08:02:03,417 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'connected'
  File "/home/biqu/KlipperScreen/panels/network.py", line 326, in scan_callback
    self.add_network(net, False)

  File "/home/biqu/KlipperScreen/panels/network.py", line 181, in add_network
    if network_id != -1 or netinfo['connected']:
NoneType: None
2023-07-12 08:02:04,661 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-07-12 08:02:04,663 [printer.py:init_temp_store()] - Temp store: []
2023-07-12 08:02:04,682 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-07-12 08:02:04,685 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-07-12 08:02:05,761 [KlippyGtk.py:Dialog()] - Showing dialog <Gtk.Dialog object at 0xffffa8045cc0 (GtkDialog at 0x15178320)>
2023-07-12 08:02:06,676 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-07-12 08:02:06,713 [KlippyRest.py:send_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/machine/device_power/devices
2023-07-12 08:02:06,751 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-07-12 08:02:06,794 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-07-12 08:02:06,797 [printer.py:reinit()] - Klipper version: v0.11.0-241-gffb5105b
2023-07-12 08:02:06,798 [printer.py:reinit()] - # Extruders: 0
2023-07-12 08:02:06,798 [printer.py:reinit()] - # Temperature devices: 0
2023-07-12 08:02:06,799 [printer.py:reinit()] - # Fans: 0
2023-07-12 08:02:06,799 [printer.py:reinit()] - # Output pins: 0
2023-07-12 08:02:06,800 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-07-12 08:02:07,046 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2023-07-12 08:02:07,048 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-07-12 08:02:07,048 [printer.py:change_state()] - Adding callback for state: error
2023-07-12 08:02:07,065 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-07-12 08:02:07,066 [printer.py:init_temp_store()] - Temp store: []
2023-07-12 08:02:07,085 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-07-12 08:02:07,087 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-07-12 08:02:07,088 [files.py:initialize()] - Gcodes path: None
2023-07-12 08:02:07,089 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-07-12 08:02:07,090 [screen.py:init_printer()] - Printer initialized
2023-07-12 08:02:07,098 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-07-12 08:02:07,099 [screen.py:show_panel()] - Reinitializing panel
2023-07-12 08:02:07,164 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-07-12 08:02:07,307 [KlippyWebsocket.py:restart_firmware()] - Sending printer.firmware_restart
2023-07-12 08:02:07,323 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2023-07-12 08:02:07,324 [printer.py:change_state()] - Adding callback for state: disconnected
2023-07-12 08:02:07,325 [screen.py:state_disconnected()] - ### Going to disconnected
2023-07-12 08:02:07,327 [screen.py:show_panel()] - Reinitializing panel
2023-07-12 08:02:07,391 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-07-12 08:02:08,639 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffa8045cc0 (GtkDialog at 0x15178320)>
2023-07-12 08:02:08,676 [KlippyGtk.py:Dialog()] - Showing dialog <Gtk.Dialog object at 0xffffa8031c40 (GtkDialog at 0x14ff7ef0)>
2023-07-12 08:02:09,497 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-07-12 08:02:09,498 [screen.py:_send_action()] - machine.reboot: None
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.3-10-g304e285
2023-07-12 08:02:30,525 [screen.py:main()] - KlipperScreen version: v0.3.3-10-g304e285
2023-07-12 08:02:30,814 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-07-12 08:02:30,815 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2023-07-12 08:02:30,839 [config.py:__init__()] - Configuration validated succesfuly
2023-07-12 08:02:30,840 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-07-12 08:02:30,941 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-07-12 08:02:30,942 [config.py:install_language()] - Using system lang
2023-07-12 08:02:30,943 [config.py:install_language()] - Using lang en
2023-07-12 08:02:30,986 [screen.py:__init__()] - Screen resolution: 800x480
2023-07-12 08:02:30,989 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-07-12 08:02:32,572 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-07-12 08:02:32,590 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-07-12 08:02:32,609 [screen.py:initial_connection()] - Default printer: None
2023-07-12 08:02:32,609 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-07-12 08:02:32,610 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-07-12 08:02:32,611 [screen.py:_load_panel()] - Panel path: /home/biqu/KlipperScreen/panels/splash_screen.py
2023-07-12 08:02:32,686 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-07-12 08:02:32,700 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-07-12 08:02:32,738 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-07-12 08:02:32,759 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-07-12 08:02:32,761 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-07-12 08:02:32,775 [_logging.py:info()] - Websocket connected
2023-07-12 08:02:32,776 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-07-12 08:02:32,816 [screen.py:update_size()] - Size changed: 800x480
2023-07-12 08:02:33,071 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-07-12 08:02:33,120 [KlippyRest.py:send_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/machine/device_power/devices
2023-07-12 08:02:33,122 [screen.py:init_printer()] - Klipper not connected
2023-07-12 08:02:36,499 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-07-12 08:02:36,519 [KlippyRest.py:send_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/machine/device_power/devices
2023-07-12 08:02:36,521 [screen.py:init_printer()] - Klipper not connected
2023-07-12 08:02:39,516 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-07-12 08:02:39,552 [KlippyRest.py:send_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/machine/device_power/devices
2023-07-12 08:02:39,587 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-07-12 08:02:39,738 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-07-12 08:02:39,741 [printer.py:reinit()] - Klipper version: v0.11.0-241-gffb5105b
2023-07-12 08:02:39,741 [printer.py:reinit()] - # Extruders: 0
2023-07-12 08:02:39,742 [printer.py:reinit()] - # Temperature devices: 0
2023-07-12 08:02:39,742 [printer.py:reinit()] - # Fans: 0
2023-07-12 08:02:39,742 [printer.py:reinit()] - # Output pins: 0
2023-07-12 08:02:39,743 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-07-12 08:02:39,994 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2023-07-12 08:02:39,997 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-07-12 08:02:39,997 [printer.py:change_state()] - Adding callback for state: error
2023-07-12 08:02:40,019 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-07-12 08:02:40,021 [printer.py:init_temp_store()] - Temp store: []
2023-07-12 08:02:40,047 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-07-12 08:02:40,050 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-07-12 08:02:40,051 [files.py:initialize()] - Gcodes path: None
2023-07-12 08:02:40,051 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-07-12 08:02:40,053 [screen.py:init_printer()] - Printer initialized
2023-07-12 08:02:40,057 [screen.py:show_panel()] - Reinitializing panel
2023-07-12 08:02:40,136 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-07-12 08:02:42,498 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-07-12 08:02:42,500 [printer.py:init_temp_store()] - Temp store: []
2023-07-12 08:02:42,520 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-07-12 08:02:42,522 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-07-12 08:02:43,063 [screen.py:_go_to_submenu()] - #### Go to submenu 
2023-07-12 08:02:43,064 [screen.py:_go_to_submenu()] - #### Menu __splashscreen
2023-07-12 08:02:43,067 [screen.py:_load_panel()] - Loading panel: menu
2023-07-12 08:02:43,067 [screen.py:_load_panel()] - Panel path: /home/biqu/KlipperScreen/panels/menu.py
2023-07-12 08:02:43,153 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen > 
2023-07-12 08:02:43,160 [menu.py:arrangeMenuItems()] - X > power
2023-07-12 08:02:43,164 [menu.py:evaluate_enable()] - moonraker connected True
2023-07-12 08:02:44,548 [screen.py:_load_panel()] - Loading panel: network
2023-07-12 08:02:44,549 [screen.py:_load_panel()] - Panel path: /home/biqu/KlipperScreen/panels/network.py
2023-07-12 08:02:44,596 [network.py:__init__()] - Found wireless interfaces: ['wlan0']
2023-07-12 08:02:44,597 [network.py:__init__()] - Using NetworkManager
2023-07-12 08:02:45,062 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen >  > network
2023-07-12 08:02:45,306 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: 'NoneType' object is not subscriptable
  File "/home/biqu/KlipperScreen/panels/network.py", line 115, in load_networks
    self.add_network(net, False)

  File "/home/biqu/KlipperScreen/panels/network.py", line 135, in add_network
    netinfo = self.wifi.get_network_info(ssid)

  File "/home/biqu/KlipperScreen/ks_includes/wifi_nm.py", line 233, in get_network_info
    "channel": WifiChannels.lookup(str(ap.Frequency))[1],
NoneType: None
2023-07-12 08:02:45,327 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: 'NoneType' object is not subscriptable
  File "/home/biqu/KlipperScreen/panels/network.py", line 115, in load_networks
    self.add_network(net, False)

  File "/home/biqu/KlipperScreen/panels/network.py", line 135, in add_network
    netinfo = self.wifi.get_network_info(ssid)

  File "/home/biqu/KlipperScreen/ks_includes/wifi_nm.py", line 233, in get_network_info
    "channel": WifiChannels.lookup(str(ap.Frequency))[1],
NoneType: None
2023-07-12 08:03:00,509 [keyboard.py:__init__()] - Keyboard en
2023-07-12 08:03:31,871 [KlippyGtk.py:Dialog()] - Showing dialog <Gtk.Dialog object at 0xffff89267580 (GtkDialog at 0x2353c300)>
2023-07-12 08:03:31,877 [wifi_nm.py:connect()] - Connecting to: BeIOted
2023-07-12 08:04:09,638 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'connected'
  File "/home/biqu/KlipperScreen/panels/network.py", line 326, in scan_callback
    self.add_network(net, False)

  File "/home/biqu/KlipperScreen/panels/network.py", line 181, in add_network
    if network_id != -1 or netinfo['connected']:
NoneType: None
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.3-10-g304e285
2023-07-12 08:02:28,037 [screen.py:main()] - KlipperScreen version: v0.3.3-10-g304e285
2023-07-12 08:02:28,258 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-07-12 08:02:28,261 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2023-07-12 08:02:28,284 [config.py:__init__()] - Configuration validated succesfuly
2023-07-12 08:02:28,285 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-07-12 08:02:28,382 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-07-12 08:02:28,382 [config.py:install_language()] - Using system lang
2023-07-12 08:02:28,383 [config.py:install_language()] - Using lang en
2023-07-12 08:02:28,416 [screen.py:__init__()] - Screen resolution: 800x480
2023-07-12 08:02:28,418 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-07-12 08:02:29,432 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-07-12 08:02:29,445 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-07-12 08:02:29,462 [screen.py:initial_connection()] - Default printer: None
2023-07-12 08:02:29,463 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-07-12 08:02:29,463 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-07-12 08:02:29,464 [screen.py:_load_panel()] - Panel path: /home/biqu/KlipperScreen/panels/splash_screen.py
2023-07-12 08:02:29,534 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-07-12 08:02:29,547 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-07-12 08:02:29,577 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-07-12 08:02:29,597 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-07-12 08:02:29,599 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-07-12 08:02:29,612 [_logging.py:info()] - Websocket connected
2023-07-12 08:02:29,613 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-07-12 08:02:29,646 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-07-12 08:02:29,677 [KlippyRest.py:send_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/machine/device_power/devices
2023-07-12 08:02:29,698 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-07-12 08:02:29,869 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-07-12 08:02:29,872 [printer.py:reinit()] - Klipper version: v0.11.0-241-gffb5105b
2023-07-12 08:02:29,873 [printer.py:reinit()] - # Extruders: 0
2023-07-12 08:02:29,873 [printer.py:reinit()] - # Temperature devices: 0
2023-07-12 08:02:29,874 [printer.py:reinit()] - # Fans: 0
2023-07-12 08:02:29,874 [printer.py:reinit()] - # Output pins: 0
2023-07-12 08:02:29,875 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-07-12 08:02:30,109 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2023-07-12 08:02:30,111 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-07-12 08:02:30,111 [printer.py:change_state()] - Adding callback for state: error
2023-07-12 08:02:30,135 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-07-12 08:02:30,137 [printer.py:init_temp_store()] - Temp store: []
2023-07-12 08:02:30,156 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-07-12 08:02:30,158 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-07-12 08:02:30,159 [files.py:initialize()] - Gcodes path: None
2023-07-12 08:02:30,159 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-07-12 08:02:30,160 [screen.py:init_printer()] - Printer initialized
2023-07-12 08:02:30,162 [screen.py:update_size()] - Size changed: 800x480
2023-07-12 08:02:30,316 [screen.py:show_panel()] - Reinitializing panel
2023-07-12 08:02:30,380 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-07-12 08:02:32,007 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-07-12 08:02:32,009 [printer.py:init_temp_store()] - Temp store: []
2023-07-12 08:02:32,041 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-07-12 08:02:32,044 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-07-12 08:02:55,707 [screen.py:_go_to_submenu()] - #### Go to submenu 
2023-07-12 08:02:55,708 [screen.py:_go_to_submenu()] - #### Menu __splashscreen
2023-07-12 08:02:55,711 [screen.py:_load_panel()] - Loading panel: menu
2023-07-12 08:02:55,711 [screen.py:_load_panel()] - Panel path: /home/biqu/KlipperScreen/panels/menu.py
2023-07-12 08:02:55,807 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen > 
2023-07-12 08:02:55,814 [menu.py:arrangeMenuItems()] - X > power
2023-07-12 08:02:55,818 [menu.py:evaluate_enable()] - moonraker connected True
2023-07-12 08:02:57,549 [screen.py:_load_panel()] - Loading panel: network
2023-07-12 08:02:57,550 [screen.py:_load_panel()] - Panel path: /home/biqu/KlipperScreen/panels/network.py
2023-07-12 08:02:57,593 [network.py:__init__()] - Found wireless interfaces: ['wlan0']
2023-07-12 08:02:57,593 [network.py:__init__()] - Using NetworkManager
2023-07-12 08:02:58,060 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen >  > network
2023-07-12 08:02:58,317 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'Beyond'
  File "/home/biqu/KlipperScreen/panels/network.py", line 115, in load_networks
    self.add_network(net, False)

  File "/home/biqu/KlipperScreen/panels/network.py", line 135, in add_network
    netinfo = self.wifi.get_network_info(ssid)

  File "/home/biqu/KlipperScreen/ks_includes/wifi_nm.py", line 226, in get_network_info
    path = self.path_by_ssid[ssid]
NoneType: None
2023-07-12 08:02:58,335 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'Beyond'
  File "/home/biqu/KlipperScreen/panels/network.py", line 115, in load_networks
    self.add_network(net, False)

  File "/home/biqu/KlipperScreen/panels/network.py", line 135, in add_network
    netinfo = self.wifi.get_network_info(ssid)

  File "/home/biqu/KlipperScreen/ks_includes/wifi_nm.py", line 226, in get_network_info
    path = self.path_by_ssid[ssid]
NoneType: None
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.3-10-g304e285
2023-07-12 08:02:28,143 [screen.py:main()] - KlipperScreen version: v0.3.3-10-g304e285
2023-07-12 08:02:28,390 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-07-12 08:02:28,395 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2023-07-12 08:02:28,431 [config.py:__init__()] - Configuration validated succesfuly
2023-07-12 08:02:28,433 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-07-12 08:02:28,552 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-07-12 08:02:28,553 [config.py:install_language()] - Using system lang
2023-07-12 08:02:28,553 [config.py:install_language()] - Using lang en
2023-07-12 08:02:28,588 [screen.py:__init__()] - Screen resolution: 800x480
2023-07-12 08:02:28,591 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-07-12 08:02:29,747 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-07-12 08:02:29,762 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-07-12 08:02:29,783 [screen.py:initial_connection()] - Default printer: None
2023-07-12 08:02:29,783 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-07-12 08:02:29,784 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-07-12 08:02:29,785 [screen.py:_load_panel()] - Panel path: /home/biqu/KlipperScreen/panels/splash_screen.py
2023-07-12 08:02:29,865 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-07-12 08:02:29,883 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-07-12 08:02:29,930 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-07-12 08:02:29,949 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-07-12 08:02:29,951 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-07-12 08:02:29,965 [_logging.py:info()] - Websocket connected
2023-07-12 08:02:29,966 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-07-12 08:02:30,000 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-07-12 08:02:30,031 [KlippyRest.py:send_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/machine/device_power/devices
2023-07-12 08:02:30,054 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-07-12 08:02:30,257 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-07-12 08:02:30,259 [printer.py:reinit()] - Klipper version: v0.11.0-241-gffb5105b
2023-07-12 08:02:30,259 [printer.py:reinit()] - # Extruders: 0
2023-07-12 08:02:30,260 [printer.py:reinit()] - # Temperature devices: 0
2023-07-12 08:02:30,260 [printer.py:reinit()] - # Fans: 0
2023-07-12 08:02:30,260 [printer.py:reinit()] - # Output pins: 0
2023-07-12 08:02:30,260 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-07-12 08:02:30,523 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2023-07-12 08:02:30,526 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-07-12 08:02:30,527 [printer.py:change_state()] - Adding callback for state: error
2023-07-12 08:02:30,556 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-07-12 08:02:30,558 [printer.py:init_temp_store()] - Temp store: []
2023-07-12 08:02:30,597 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-07-12 08:02:30,601 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-07-12 08:02:30,603 [files.py:initialize()] - Gcodes path: None
2023-07-12 08:02:30,603 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-07-12 08:02:30,605 [screen.py:init_printer()] - Printer initialized
2023-07-12 08:02:30,607 [screen.py:update_size()] - Size changed: 800x480
2023-07-12 08:02:30,796 [screen.py:show_panel()] - Reinitializing panel
2023-07-12 08:02:30,903 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-07-12 08:02:33,022 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-07-12 08:02:33,025 [printer.py:init_temp_store()] - Temp store: []
2023-07-12 08:02:33,054 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-07-12 08:02:33,057 [screen.py:init_tempstore()] - Temperature store size: 1200
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.3-10-g304e285
2023-10-29 10:46:47,176 [screen.py:main()] - KlipperScreen version: v0.3.3-10-g304e285
2023-10-29 10:46:47,541 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-10-29 10:46:47,542 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2023-10-29 10:46:47,566 [config.py:__init__()] - Configuration validated succesfuly
2023-10-29 10:46:47,567 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-10-29 10:46:47,671 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-10-29 10:46:47,671 [config.py:install_language()] - Using system lang
2023-10-29 10:46:47,672 [config.py:install_language()] - Using lang en
2023-10-29 10:46:47,707 [screen.py:__init__()] - Screen resolution: 800x480
2023-10-29 10:46:47,711 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-10-29 10:46:49,290 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-10-29 10:46:49,308 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-10-29 10:46:49,333 [screen.py:initial_connection()] - Default printer: None
2023-10-29 10:46:49,334 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-10-29 10:46:49,335 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-10-29 10:46:49,336 [screen.py:_load_panel()] - Panel path: /home/biqu/KlipperScreen/panels/splash_screen.py
2023-10-29 10:46:49,442 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 10:46:49,464 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-10-29 10:46:49,504 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 10:46:49,546 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-10-29 10:46:49,549 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-10-29 10:46:49,569 [_logging.py:info()] - Websocket connected
2023-10-29 10:46:49,570 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-10-29 10:46:49,622 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 10:46:49,668 [KlippyRest.py:send_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/machine/device_power/devices
2023-10-29 10:46:49,671 [screen.py:init_printer()] - Klipper not connected
2023-10-29 10:46:49,685 [screen.py:update_size()] - Size changed: 800x480
2023-10-29 10:46:52,506 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 10:46:52,527 [KlippyRest.py:send_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/machine/device_power/devices
2023-10-29 10:46:52,531 [screen.py:init_printer()] - Klipper not connected
2023-10-29 10:46:55,499 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 10:46:55,520 [KlippyRest.py:send_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/machine/device_power/devices
2023-10-29 10:46:55,541 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-29 10:46:55,677 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-29 10:46:55,679 [printer.py:reinit()] - Klipper version: v0.11.0-241-gffb5105b
2023-10-29 10:46:55,680 [printer.py:reinit()] - # Extruders: 0
2023-10-29 10:46:55,680 [printer.py:reinit()] - # Temperature devices: 0
2023-10-29 10:46:55,680 [printer.py:reinit()] - # Fans: 0
2023-10-29 10:46:55,680 [printer.py:reinit()] - # Output pins: 0
2023-10-29 10:46:55,681 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-29 10:46:55,934 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2023-10-29 10:46:55,936 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-10-29 10:46:55,936 [printer.py:change_state()] - Adding callback for state: error
2023-10-29 10:46:55,965 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-29 10:46:55,967 [printer.py:init_temp_store()] - Temp store: []
2023-10-29 10:46:56,000 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-29 10:46:56,002 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-29 10:46:56,003 [files.py:initialize()] - Gcodes path: None
2023-10-29 10:46:56,004 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-29 10:46:56,005 [screen.py:init_printer()] - Printer initialized
2023-10-29 10:46:56,008 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 10:46:56,081 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 10:46:58,517 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-29 10:46:58,520 [printer.py:init_temp_store()] - Temp store: []
2023-10-29 10:46:58,558 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-29 10:46:58,561 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-29 10:47:05,287 [KlippyGtk.py:Dialog()] - Showing dialog <Gtk.Dialog object at 0xffffb816cd40 (GtkDialog at 0x1663a5e0)>
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-65-g4a14962
2023-10-29 10:50:28,139 [screen.py:main()] - Python version: 3.9
2023-10-29 10:50:28,152 [screen.py:main()] - KlipperScreen version: v0.3.6-65-g4a14962
2023-10-29 10:50:28,162 [functions.py:detect_desktop_environment()] - Error:
'XDG_CURRENT_DESKTOP'

Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
2023-10-29 10:50:28,316 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-10-29 10:50:28,319 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2023-10-29 10:50:28,336 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-10-29 10:50:28,442 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-10-29 10:50:28,443 [config.py:install_language()] - Using system lang
2023-10-29 10:50:28,444 [config.py:install_language()] - Using lang en
2023-10-29 10:50:28,475 [screen.py:__init__()] - Screen resolution: 800x480
2023-10-29 10:50:28,479 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-10-29 10:50:29,046 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-10-29 10:50:29,062 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-10-29 10:50:29,073 [screen.py:initial_connection()] - Default printer: None
2023-10-29 10:50:29,074 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-10-29 10:50:29,074 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-10-29 10:50:29,169 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 10:50:29,188 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-10-29 10:50:29,218 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 10:50:29,240 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-10-29 10:50:29,243 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-10-29 10:50:29,259 [_logging.py:info()] - Websocket connected
2023-10-29 10:50:29,260 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-10-29 10:50:29,595 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 10:50:29,619 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 10:50:29,621 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-92-g504a3a7', 'missing_klippy_requirements': [], 'api_version': [1, 2, 1], 'api_version_string': '1.2.1'}
2023-10-29 10:50:29,643 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 10:50:29,645 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 10:50:29,646 [screen.py:init_printer()] - Klipper not connected
2023-10-29 10:50:32,662 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 10:50:32,685 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 10:50:32,687 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-92-g504a3a7', 'missing_klippy_requirements': [], 'api_version': [1, 2, 1], 'api_version_string': '1.2.1'}
2023-10-29 10:50:32,709 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 10:50:32,711 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 10:50:32,712 [screen.py:init_printer()] - Klipper not connected
2023-10-29 10:50:35,660 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 10:50:35,681 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 10:50:35,684 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-92-g504a3a7', 'missing_klippy_requirements': [], 'api_version': [1, 2, 1], 'api_version_string': '1.2.1'}
2023-10-29 10:50:35,706 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 10:50:35,709 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 10:50:35,709 [screen.py:init_printer()] - Klipper not connected
2023-10-29 10:50:38,662 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 10:50:38,684 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 10:50:38,686 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-92-g504a3a7', 'missing_klippy_requirements': [], 'api_version': [1, 2, 1], 'api_version_string': '1.2.1'}
2023-10-29 10:50:38,707 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 10:50:38,709 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 10:50:38,710 [screen.py:init_printer()] - Klipper not connected
2023-10-29 10:50:41,661 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 10:50:41,682 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 10:50:41,685 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-92-g504a3a7', 'missing_klippy_requirements': [], 'api_version': [1, 2, 1], 'api_version_string': '1.2.1'}
2023-10-29 10:50:41,706 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 10:50:41,708 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 10:50:41,709 [screen.py:init_printer()] - Klipper not connected
2023-10-29 10:50:45,363 [KlippyGtk.py:Dialog()] - Showing dialog Updating (width=804, height=480)
2023-10-29 10:56:34,570 [KlippyWebsocket.py:on_close()] - Server Shutdown
2023-10-29 10:56:34,576 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2023-10-29 10:56:34,713 [base_panel.py:process_update()] - Update complete
2023-10-29 10:56:34,718 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 10:56:34,810 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 10:56:34,832 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-10-29 10:56:34,834 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 10:56:34,912 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 10:56:34,934 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-10-29 10:56:34,957 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2023-10-29 10:56:45,641 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-10-29 10:56:45,672 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 10:56:45,696 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-10-29 10:56:45,699 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-10-29 10:56:45,712 [_logging.py:info()] - Websocket connected
2023-10-29 10:56:45,712 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-10-29 10:56:45,731 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 10:56:45,749 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 10:56:45,751 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 10:56:45,768 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 10:56:45,770 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 10:56:45,789 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-29 10:56:45,913 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-29 10:56:45,915 [screen.py:init_printer()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-29 10:56:45,916 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-29 10:56:45,917 [printer.py:reinit()] - # Extruders: 0
2023-10-29 10:56:45,917 [printer.py:reinit()] - # Temperature devices: 0
2023-10-29 10:56:45,917 [printer.py:reinit()] - # Fans: 0
2023-10-29 10:56:45,917 [printer.py:reinit()] - # Output pins: 0
2023-10-29 10:56:45,917 [printer.py:reinit()] - # Leds: 0
2023-10-29 10:56:45,938 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-29 10:56:45,940 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-29 10:56:46,169 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2023-10-29 10:56:46,171 [files.py:initialize()] - Gcodes path: None
2023-10-29 10:56:46,172 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-29 10:56:46,173 [screen.py:init_printer()] - Printer initialized
2023-10-29 10:56:46,174 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-10-29 10:56:46,174 [printer.py:change_state()] - Adding callback for state: error
2023-10-29 10:56:46,178 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 10:56:46,248 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 11:00:03,765 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2023-10-29 11:00:03,766 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-29 11:00:03,768 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-29 11:00:03,773 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 11:00:03,921 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 11:00:07,669 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 11:00:07,698 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 11:00:07,701 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 11:00:07,728 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 11:00:07,731 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 11:00:07,763 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-29 11:00:07,914 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-29 11:00:07,916 [screen.py:init_printer()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-29 11:00:07,917 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-29 11:00:07,917 [printer.py:reinit()] - # Extruders: 0
2023-10-29 11:00:07,917 [printer.py:reinit()] - # Temperature devices: 0
2023-10-29 11:00:07,918 [printer.py:reinit()] - # Fans: 0
2023-10-29 11:00:07,918 [printer.py:reinit()] - # Output pins: 0
2023-10-29 11:00:07,918 [printer.py:reinit()] - # Leds: 0
2023-10-29 11:00:07,938 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-29 11:00:07,940 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-29 11:00:08,172 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2023-10-29 11:00:08,173 [files.py:initialize()] - Gcodes path: None
2023-10-29 11:00:08,174 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-29 11:00:08,175 [screen.py:init_printer()] - Printer initialized
2023-10-29 11:00:08,176 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-10-29 11:00:08,176 [printer.py:change_state()] - Adding callback for state: error
2023-10-29 11:00:08,180 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 11:00:08,250 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-65-g4a14962
2023-10-29 11:00:44,377 [screen.py:main()] - Python version: 3.9
2023-10-29 11:00:44,378 [screen.py:main()] - KlipperScreen version: v0.3.6-65-g4a14962
2023-10-29 11:00:44,388 [functions.py:detect_desktop_environment()] - Error:
'XDG_CURRENT_DESKTOP'

Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
2023-10-29 11:00:44,633 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-10-29 11:00:44,636 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2023-10-29 11:00:44,663 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-10-29 11:00:44,765 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-10-29 11:00:44,766 [config.py:install_language()] - Using system lang
2023-10-29 11:00:44,767 [config.py:install_language()] - Using lang en
2023-10-29 11:00:44,802 [screen.py:__init__()] - Screen resolution: 800x480
2023-10-29 11:00:44,805 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-10-29 11:00:46,412 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-10-29 11:00:46,431 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-10-29 11:00:46,444 [screen.py:initial_connection()] - Default printer: None
2023-10-29 11:00:46,445 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-10-29 11:00:46,446 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-10-29 11:00:46,539 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 11:00:46,561 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-10-29 11:00:46,602 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 11:00:46,629 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-10-29 11:00:46,632 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-10-29 11:00:46,655 [_logging.py:info()] - Websocket connected
2023-10-29 11:00:46,657 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-10-29 11:00:46,947 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 11:00:46,972 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 11:00:46,974 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 11:00:46,994 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 11:00:46,996 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 11:00:46,996 [screen.py:init_printer()] - Klipper not connected
2023-10-29 11:00:50,406 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 11:00:50,425 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 11:00:50,427 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 11:00:50,447 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 11:00:50,449 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 11:00:50,449 [screen.py:init_printer()] - Klipper not connected
2023-10-29 11:00:53,405 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 11:00:53,422 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 11:00:53,424 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 11:00:53,441 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 11:00:53,443 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 11:00:53,462 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-29 11:00:53,598 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-29 11:00:53,600 [screen.py:init_printer()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-29 11:00:53,600 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-29 11:00:53,601 [printer.py:reinit()] - # Extruders: 0
2023-10-29 11:00:53,601 [printer.py:reinit()] - # Temperature devices: 0
2023-10-29 11:00:53,601 [printer.py:reinit()] - # Fans: 0
2023-10-29 11:00:53,601 [printer.py:reinit()] - # Output pins: 0
2023-10-29 11:00:53,602 [printer.py:reinit()] - # Leds: 0
2023-10-29 11:00:53,628 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-29 11:00:53,630 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-29 11:00:53,854 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2023-10-29 11:00:53,856 [files.py:initialize()] - Gcodes path: None
2023-10-29 11:00:53,856 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-29 11:00:53,858 [screen.py:init_printer()] - Printer initialized
2023-10-29 11:00:53,858 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-10-29 11:00:53,859 [printer.py:change_state()] - Adding callback for state: error
2023-10-29 11:00:53,863 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 11:00:53,932 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 11:09:50,081 [KlippyWebsocket.py:on_close()] - Server Shutdown
2023-10-29 11:09:50,083 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2023-10-29 11:09:50,087 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 11:09:50,191 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 11:09:50,216 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-10-29 11:09:50,218 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 11:09:50,305 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 11:09:50,323 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-10-29 11:09:50,334 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2023-10-29 11:10:00,220 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-10-29 11:10:00,240 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 11:10:00,257 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-10-29 11:10:00,259 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-10-29 11:10:00,272 [_logging.py:info()] - Websocket connected
2023-10-29 11:10:00,272 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-10-29 11:10:00,290 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 11:10:00,308 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 11:10:00,309 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 11:10:00,327 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 11:10:00,329 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 11:10:00,349 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-29 11:10:00,482 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-29 11:10:00,485 [screen.py:init_printer()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-29 11:10:00,486 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-29 11:10:00,486 [printer.py:reinit()] - # Extruders: 0
2023-10-29 11:10:00,487 [printer.py:reinit()] - # Temperature devices: 0
2023-10-29 11:10:00,487 [printer.py:reinit()] - # Fans: 0
2023-10-29 11:10:00,487 [printer.py:reinit()] - # Output pins: 0
2023-10-29 11:10:00,488 [printer.py:reinit()] - # Leds: 0
2023-10-29 11:10:00,521 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-29 11:10:00,524 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-29 11:10:00,745 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2023-10-29 11:10:00,749 [files.py:initialize()] - Gcodes path: None
2023-10-29 11:10:00,749 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-29 11:10:00,751 [screen.py:init_printer()] - Printer initialized
2023-10-29 11:10:00,752 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-10-29 11:10:00,753 [printer.py:change_state()] - Adding callback for state: error
2023-10-29 11:10:00,758 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 11:10:00,891 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-65-g4a14962
2023-10-29 11:10:29,152 [screen.py:main()] - Python version: 3.9
2023-10-29 11:10:29,153 [screen.py:main()] - KlipperScreen version: v0.3.6-65-g4a14962
2023-10-29 11:10:29,161 [functions.py:detect_desktop_environment()] - Error:
'XDG_CURRENT_DESKTOP'

Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
2023-10-29 11:10:29,429 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-10-29 11:10:29,433 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2023-10-29 11:10:29,466 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-10-29 11:10:29,567 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-10-29 11:10:29,568 [config.py:install_language()] - Using system lang
2023-10-29 11:10:29,569 [config.py:install_language()] - Using lang en
2023-10-29 11:10:29,609 [screen.py:__init__()] - Screen resolution: 800x480
2023-10-29 11:10:29,612 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-10-29 11:10:31,223 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-10-29 11:10:31,243 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-10-29 11:10:31,259 [screen.py:initial_connection()] - Default printer: None
2023-10-29 11:10:31,260 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-10-29 11:10:31,260 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-10-29 11:10:31,356 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 11:10:31,378 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-10-29 11:10:31,420 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 11:10:31,444 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-10-29 11:10:31,447 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-10-29 11:10:31,466 [_logging.py:info()] - Websocket connected
2023-10-29 11:10:31,467 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-10-29 11:10:31,810 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 11:10:31,832 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 11:10:31,834 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 11:10:31,856 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 11:10:31,858 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 11:10:31,859 [screen.py:init_printer()] - Klipper not connected
2023-10-29 11:10:35,477 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 11:10:35,498 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 11:10:35,501 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 11:10:35,520 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 11:10:35,522 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 11:10:35,522 [screen.py:init_printer()] - Klipper not connected
2023-10-29 11:10:38,480 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 11:10:38,501 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 11:10:38,504 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 11:10:38,524 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 11:10:38,526 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 11:10:38,552 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-29 11:10:38,629 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-29 11:10:38,631 [screen.py:init_printer()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-29 11:10:38,633 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-29 11:10:38,633 [printer.py:reinit()] - # Extruders: 0
2023-10-29 11:10:38,634 [printer.py:reinit()] - # Temperature devices: 0
2023-10-29 11:10:38,635 [printer.py:reinit()] - # Fans: 0
2023-10-29 11:10:38,636 [printer.py:reinit()] - # Output pins: 0
2023-10-29 11:10:38,636 [printer.py:reinit()] - # Leds: 0
2023-10-29 11:10:38,680 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-29 11:10:38,683 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-29 11:10:38,885 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2023-10-29 11:10:38,887 [files.py:initialize()] - Gcodes path: None
2023-10-29 11:10:38,888 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-29 11:10:38,889 [screen.py:init_printer()] - Printer initialized
2023-10-29 11:10:38,890 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-10-29 11:10:38,890 [printer.py:change_state()] - Adding callback for state: error
2023-10-29 11:10:38,900 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 11:10:38,992 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 11:10:42,195 [KlippyGtk.py:Dialog()] - Showing dialog Updating (width=804, height=480)
2023-10-29 11:10:45,831 [base_panel.py:process_update()] - Update complete
2023-10-29 12:10:44,848 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-29 12:10:44,849 [screen.py:show_screensaver()] - Hiding dialog
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-65-g4a14962
2023-10-29 14:57:53,522 [screen.py:main()] - Python version: 3.9
2023-10-29 14:57:53,522 [screen.py:main()] - KlipperScreen version: v0.3.6-65-g4a14962
2023-10-29 14:57:53,536 [functions.py:detect_desktop_environment()] - Error:
'XDG_CURRENT_DESKTOP'

Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
2023-10-29 14:57:53,844 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-10-29 14:57:53,847 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2023-10-29 14:57:53,884 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-10-29 14:57:54,004 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-10-29 14:57:54,004 [config.py:install_language()] - Using system lang
2023-10-29 14:57:54,006 [config.py:install_language()] - Using lang en
2023-10-29 14:57:54,047 [screen.py:__init__()] - Screen resolution: 1024x768
2023-10-29 14:57:54,051 [KlippyGtk.py:__init__()] - Font size: 23.8 (medium)
2023-10-29 14:57:55,686 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-10-29 14:57:55,700 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-10-29 14:57:55,710 [screen.py:initial_connection()] - Default printer: None
2023-10-29 14:57:55,711 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-10-29 14:57:55,712 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-10-29 14:57:55,790 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 14:57:55,805 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-10-29 14:57:55,843 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 14:57:55,863 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-10-29 14:57:55,865 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-10-29 14:57:55,881 [_logging.py:info()] - Websocket connected
2023-10-29 14:57:55,882 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-10-29 14:57:56,147 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 14:57:56,166 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 14:57:56,168 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 14:57:56,187 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 14:57:56,189 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 14:57:56,190 [screen.py:init_printer()] - Klipper not connected
2023-10-29 14:57:59,899 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 14:57:59,921 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 14:57:59,924 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 14:57:59,946 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 14:57:59,948 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 14:57:59,949 [screen.py:init_printer()] - Klipper not connected
2023-10-29 14:58:02,894 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 14:58:02,912 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 14:58:02,914 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 14:58:02,930 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 14:58:02,932 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 14:58:02,952 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-29 14:58:03,220 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-29 14:58:03,222 [screen.py:init_printer()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-29 14:58:03,223 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-29 14:58:03,223 [printer.py:reinit()] - # Extruders: 0
2023-10-29 14:58:03,223 [printer.py:reinit()] - # Temperature devices: 0
2023-10-29 14:58:03,224 [printer.py:reinit()] - # Fans: 0
2023-10-29 14:58:03,224 [printer.py:reinit()] - # Output pins: 0
2023-10-29 14:58:03,224 [printer.py:reinit()] - # Leds: 0
2023-10-29 14:58:03,244 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-29 14:58:03,246 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-29 14:58:03,476 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2023-10-29 14:58:03,478 [files.py:initialize()] - Gcodes path: None
2023-10-29 14:58:03,479 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-29 14:58:03,480 [screen.py:init_printer()] - Printer initialized
2023-10-29 14:58:03,480 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-10-29 14:58:03,481 [printer.py:change_state()] - Adding callback for state: error
2023-10-29 14:58:03,484 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 14:58:03,557 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-65-g4a14962
2023-10-29 14:58:58,795 [screen.py:main()] - Python version: 3.9
2023-10-29 14:58:58,796 [screen.py:main()] - KlipperScreen version: v0.3.6-65-g4a14962
2023-10-29 14:58:58,806 [functions.py:detect_desktop_environment()] - Error:
'XDG_CURRENT_DESKTOP'

Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
2023-10-29 14:58:59,133 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-10-29 14:58:59,137 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2023-10-29 14:58:59,168 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-10-29 14:58:59,287 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-10-29 14:58:59,288 [config.py:install_language()] - Using system lang
2023-10-29 14:58:59,289 [config.py:install_language()] - Using lang en
2023-10-29 14:58:59,341 [screen.py:__init__()] - Screen resolution: 1024x768
2023-10-29 14:58:59,345 [KlippyGtk.py:__init__()] - Font size: 23.8 (medium)
2023-10-29 14:59:01,025 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-10-29 14:59:01,040 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-10-29 14:59:01,050 [screen.py:initial_connection()] - Default printer: None
2023-10-29 14:59:01,051 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-10-29 14:59:01,051 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-10-29 14:59:01,131 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 14:59:01,145 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-10-29 14:59:01,180 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 14:59:01,200 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-10-29 14:59:01,203 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-10-29 14:59:01,217 [_logging.py:info()] - Websocket connected
2023-10-29 14:59:01,218 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-10-29 14:59:01,505 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 14:59:01,525 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 14:59:01,527 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'authorization', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 14:59:01,546 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 14:59:01,548 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 14:59:01,549 [screen.py:init_printer()] - Klipper not connected
2023-10-29 14:59:04,502 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 14:59:04,523 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 14:59:04,525 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'authorization', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 14:59:04,547 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 14:59:04,549 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 14:59:04,549 [screen.py:init_printer()] - Klipper not connected
2023-10-29 14:59:07,497 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 14:59:07,515 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 14:59:07,517 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'authorization', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 14:59:07,534 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 14:59:07,536 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 14:59:07,566 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-29 14:59:07,742 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-29 14:59:07,744 [screen.py:init_printer()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-29 14:59:07,745 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-29 14:59:07,745 [printer.py:reinit()] - # Extruders: 0
2023-10-29 14:59:07,746 [printer.py:reinit()] - # Temperature devices: 0
2023-10-29 14:59:07,746 [printer.py:reinit()] - # Fans: 0
2023-10-29 14:59:07,746 [printer.py:reinit()] - # Output pins: 0
2023-10-29 14:59:07,746 [printer.py:reinit()] - # Leds: 0
2023-10-29 14:59:07,767 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-29 14:59:07,769 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-29 14:59:07,998 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2023-10-29 14:59:08,000 [files.py:initialize()] - Gcodes path: None
2023-10-29 14:59:08,001 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-29 14:59:08,002 [screen.py:init_printer()] - Printer initialized
2023-10-29 14:59:08,003 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-10-29 14:59:08,003 [printer.py:change_state()] - Adding callback for state: error
2023-10-29 14:59:08,007 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 14:59:08,080 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 16:36:09,680 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2023-10-29 16:36:09,681 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-29 16:36:09,683 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-29 16:36:09,687 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 16:36:09,813 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 16:36:13,221 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 16:36:13,254 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 16:36:13,257 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'authorization', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 16:36:13,289 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 16:36:13,290 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 16:36:13,310 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-29 16:36:13,575 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-29 16:36:13,577 [screen.py:init_printer()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-29 16:36:13,577 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-29 16:36:13,578 [printer.py:reinit()] - # Extruders: 0
2023-10-29 16:36:13,578 [printer.py:reinit()] - # Temperature devices: 0
2023-10-29 16:36:13,578 [printer.py:reinit()] - # Fans: 0
2023-10-29 16:36:13,578 [printer.py:reinit()] - # Output pins: 0
2023-10-29 16:36:13,578 [printer.py:reinit()] - # Leds: 0
2023-10-29 16:36:13,599 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-29 16:36:13,601 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-29 16:36:13,832 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2023-10-29 16:36:13,834 [files.py:initialize()] - Gcodes path: None
2023-10-29 16:36:13,834 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-29 16:36:13,835 [screen.py:init_printer()] - Printer initialized
2023-10-29 16:36:13,836 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-10-29 16:36:13,836 [printer.py:change_state()] - Adding callback for state: error
2023-10-29 16:36:13,840 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 16:36:13,912 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 16:37:17,323 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2023-10-29 16:37:17,324 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-29 16:37:17,326 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-29 16:37:17,329 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 16:37:17,433 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 16:37:21,203 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 16:37:21,221 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 16:37:21,223 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'authorization', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 16:37:21,240 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 16:37:21,242 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 16:37:21,262 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-29 16:37:21,508 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-29 16:37:21,510 [screen.py:init_printer()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-29 16:37:21,511 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-29 16:37:21,512 [printer.py:reinit()] - # Extruders: 0
2023-10-29 16:37:21,512 [printer.py:reinit()] - # Temperature devices: 0
2023-10-29 16:37:21,513 [printer.py:reinit()] - # Fans: 0
2023-10-29 16:37:21,516 [printer.py:reinit()] - # Output pins: 0
2023-10-29 16:37:21,517 [printer.py:reinit()] - # Leds: 0
2023-10-29 16:37:21,556 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-29 16:37:21,559 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-29 16:37:21,773 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2023-10-29 16:37:21,776 [files.py:initialize()] - Gcodes path: None
2023-10-29 16:37:21,777 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-29 16:37:21,778 [screen.py:init_printer()] - Printer initialized
2023-10-29 16:37:21,779 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-10-29 16:37:21,780 [printer.py:change_state()] - Adding callback for state: error
2023-10-29 16:37:21,787 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 16:37:21,893 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 16:40:22,227 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2023-10-29 16:40:22,228 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-29 16:40:22,229 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-29 16:40:22,233 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 16:40:22,337 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 16:40:25,202 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 16:40:25,219 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 16:40:25,221 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'authorization', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 16:40:25,238 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 16:40:25,240 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 16:40:25,260 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-29 16:40:25,390 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-29 16:40:25,392 [screen.py:init_printer()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-29 16:40:25,393 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-29 16:40:25,393 [printer.py:reinit()] - # Extruders: 0
2023-10-29 16:40:25,394 [printer.py:reinit()] - # Temperature devices: 0
2023-10-29 16:40:25,394 [printer.py:reinit()] - # Fans: 0
2023-10-29 16:40:25,395 [printer.py:reinit()] - # Output pins: 0
2023-10-29 16:40:25,395 [printer.py:reinit()] - # Leds: 0
2023-10-29 16:40:25,417 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-29 16:40:25,420 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-29 16:40:25,646 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2023-10-29 16:40:25,648 [files.py:initialize()] - Gcodes path: None
2023-10-29 16:40:25,649 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-29 16:40:25,650 [screen.py:init_printer()] - Printer initialized
2023-10-29 16:40:25,651 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-10-29 16:40:25,651 [printer.py:change_state()] - Adding callback for state: error
2023-10-29 16:40:25,655 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 16:40:25,728 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 16:42:18,748 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2023-10-29 16:42:18,748 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-29 16:42:18,750 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-29 16:42:18,752 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 16:42:18,821 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 16:42:22,206 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 16:42:22,225 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 16:42:22,227 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'authorization', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 16:42:22,244 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 16:42:22,246 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 16:42:22,265 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-29 16:42:22,297 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-29 16:42:22,301 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PA2', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': '!can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '26.72306036', 'gear_ratio': '50:8', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1400.0', 'max_extrude_only_velocity': '75.0', 'max_extrude_only_accel': '1500', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '22.2', 'pid_ki': '1.08', 'pid_kd': '114', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'stealthchop_threshold': '0', 'run_current': '0.30'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:PROBE_1', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew'}, 'gcode_macro PRINT_END': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nSTATUS_HEATING\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': '^can0:LIMIT_1', 'x_offset': '-29.8', 'y_offset': '-13.5', 'z_offset': '2.202', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PA2']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.3, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 22.2, 'pid_ki': 1.08, 'pid_kd': 114.0, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 75.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 1400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!can0:EXT_DIR', 'rotation_distance': 26.72306036, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:PROBE_1', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nSTATUS_HEATING\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': 2.202, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '^can0:LIMIT_1', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-29 16:42:22,305 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-29 16:42:22,305 [printer.py:reinit()] - # Extruders: 1
2023-10-29 16:42:22,305 [printer.py:reinit()] - # Temperature devices: 5
2023-10-29 16:42:22,306 [printer.py:reinit()] - # Fans: 2
2023-10-29 16:42:22,307 [printer.py:reinit()] - # Output pins: 1
2023-10-29 16:42:22,307 [printer.py:reinit()] - # Leds: 0
2023-10-29 16:42:22,334 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-29 16:42:22,337 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-29 16:42:22,585 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-29 16:42:22,608 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-29 16:42:22,610 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-29 16:42:22,611 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-29 16:42:22,612 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-29 16:42:22,614 [screen.py:init_printer()] - Printer initialized
2023-10-29 16:42:22,616 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-29 16:42:22,616 [printer.py:change_state()] - Adding callback for state: startup
2023-10-29 16:42:23,801 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-29 16:42:23,801 [printer.py:change_state()] - Adding callback for state: ready
2023-10-29 16:42:23,806 [screen.py:_load_panel()] - Loading panel: main_menu
2023-10-29 16:42:23,966 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-29 16:42:23,979 [main_menu.py:add_device()] - Adding device: extruder
2023-10-29 16:42:23,989 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-29 16:42:24,000 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-29 16:42:24,010 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-29 16:42:24,020 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-29 16:42:24,030 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-29 16:42:24,102 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-29 16:42:24,105 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: []
2023-10-29 16:42:28,214 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-29 16:42:28,281 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-29 16:42:28,332 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-29 16:42:28,336 [screen.py:init_tempstore()] - Temperature store size: 1200
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-65-g4a14962
2023-10-29 16:43:56,337 [screen.py:main()] - Python version: 3.9
2023-10-29 16:43:56,338 [screen.py:main()] - KlipperScreen version: v0.3.6-65-g4a14962
2023-10-29 16:43:56,348 [functions.py:detect_desktop_environment()] - Error:
'XDG_CURRENT_DESKTOP'

Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
2023-10-29 16:43:56,634 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-10-29 16:43:56,637 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2023-10-29 16:43:56,670 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-10-29 16:43:56,774 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-10-29 16:43:56,775 [config.py:install_language()] - Using system lang
2023-10-29 16:43:56,776 [config.py:install_language()] - Using lang en
2023-10-29 16:43:56,816 [screen.py:__init__()] - Screen resolution: 800x480
2023-10-29 16:43:56,818 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-10-29 16:43:58,491 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-10-29 16:43:58,510 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-10-29 16:43:58,522 [screen.py:initial_connection()] - Default printer: None
2023-10-29 16:43:58,522 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-10-29 16:43:58,523 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-10-29 16:43:58,622 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 16:43:58,648 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-10-29 16:43:58,700 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 16:43:58,727 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-10-29 16:43:58,730 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-10-29 16:43:58,749 [_logging.py:info()] - Websocket connected
2023-10-29 16:43:58,750 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-10-29 16:43:59,082 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 16:43:59,100 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 16:43:59,102 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 16:43:59,120 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 16:43:59,122 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 16:43:59,123 [screen.py:init_printer()] - Klipper not connected
2023-10-29 16:44:02,463 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 16:44:02,480 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 16:44:02,482 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 16:44:02,499 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 16:44:02,501 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 16:44:02,502 [screen.py:init_printer()] - Klipper not connected
2023-10-29 16:44:05,474 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 16:44:05,499 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 16:44:05,502 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 16:44:05,523 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 16:44:05,525 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 16:44:05,553 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-29 16:44:05,602 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-29 16:44:05,607 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PA2', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': '!can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '26.72306036', 'gear_ratio': '50:8', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1400.0', 'max_extrude_only_velocity': '75.0', 'max_extrude_only_accel': '1500', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '22.2', 'pid_ki': '1.08', 'pid_kd': '114', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'stealthchop_threshold': '0', 'run_current': '0.30'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:PROBE_1', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew'}, 'gcode_macro PRINT_END': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nSTATUS_HEATING\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': '^can0:LIMIT_1', 'x_offset': '-29.8', 'y_offset': '-13.5', 'z_offset': '2.202', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PA2']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.3, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 22.2, 'pid_ki': 1.08, 'pid_kd': 114.0, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 75.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 1400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!can0:EXT_DIR', 'rotation_distance': 26.72306036, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:PROBE_1', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nSTATUS_HEATING\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': 2.202, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '^can0:LIMIT_1', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-29 16:44:05,611 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-29 16:44:05,612 [printer.py:reinit()] - # Extruders: 1
2023-10-29 16:44:05,612 [printer.py:reinit()] - # Temperature devices: 5
2023-10-29 16:44:05,612 [printer.py:reinit()] - # Fans: 2
2023-10-29 16:44:05,613 [printer.py:reinit()] - # Output pins: 1
2023-10-29 16:44:05,613 [printer.py:reinit()] - # Leds: 0
2023-10-29 16:44:05,644 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-29 16:44:05,647 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-29 16:44:05,879 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-29 16:44:05,899 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-29 16:44:05,901 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-29 16:44:05,902 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-29 16:44:05,903 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-29 16:44:05,904 [screen.py:init_printer()] - Printer initialized
2023-10-29 16:44:05,905 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-29 16:44:05,906 [printer.py:change_state()] - Adding callback for state: startup
2023-10-29 16:44:07,851 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-29 16:44:07,851 [printer.py:change_state()] - Adding callback for state: ready
2023-10-29 16:44:07,856 [screen.py:_load_panel()] - Loading panel: main_menu
2023-10-29 16:44:07,987 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-29 16:44:08,000 [main_menu.py:add_device()] - Adding device: extruder
2023-10-29 16:44:08,011 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-29 16:44:08,022 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-29 16:44:08,032 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-29 16:44:08,042 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-29 16:44:08,052 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-29 16:44:08,157 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-29 16:44:08,162 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: []
2023-10-29 16:44:11,465 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-29 16:44:11,495 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-29 16:44:11,529 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-29 16:44:11,531 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-29 20:04:16,495 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-29 20:04:16,495 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-29 20:04:16,498 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-29 20:04:16,501 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 20:04:16,569 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 20:04:19,419 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 20:04:19,436 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 20:04:19,438 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 20:04:19,461 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 20:04:19,463 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 20:04:19,487 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-29 20:04:19,566 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-29 20:04:19,567 [screen.py:init_printer()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-29 20:04:19,569 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-29 20:04:19,569 [printer.py:reinit()] - # Extruders: 0
2023-10-29 20:04:19,569 [printer.py:reinit()] - # Temperature devices: 0
2023-10-29 20:04:19,569 [printer.py:reinit()] - # Fans: 0
2023-10-29 20:04:19,570 [printer.py:reinit()] - # Output pins: 0
2023-10-29 20:04:19,570 [printer.py:reinit()] - # Leds: 0
2023-10-29 20:04:19,591 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-29 20:04:19,593 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-29 20:04:19,823 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2023-10-29 20:04:19,825 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-29 20:04:19,826 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-29 20:04:19,827 [screen.py:init_printer()] - Printer initialized
2023-10-29 20:04:19,828 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-10-29 20:04:19,828 [printer.py:change_state()] - Adding callback for state: error
2023-10-29 20:04:19,833 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 20:04:19,902 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 20:07:01,083 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2023-10-29 20:07:01,083 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-29 20:07:01,086 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-29 20:07:01,090 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 20:07:01,163 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 20:07:04,415 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 20:07:04,433 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 20:07:04,435 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 20:07:04,451 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 20:07:04,453 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 20:07:04,473 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-29 20:07:04,541 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-29 20:07:04,542 [screen.py:init_printer()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-29 20:07:04,543 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-29 20:07:04,543 [printer.py:reinit()] - # Extruders: 0
2023-10-29 20:07:04,544 [printer.py:reinit()] - # Temperature devices: 0
2023-10-29 20:07:04,544 [printer.py:reinit()] - # Fans: 0
2023-10-29 20:07:04,544 [printer.py:reinit()] - # Output pins: 0
2023-10-29 20:07:04,544 [printer.py:reinit()] - # Leds: 0
2023-10-29 20:07:04,565 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-29 20:07:04,567 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-29 20:07:04,798 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2023-10-29 20:07:04,800 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-29 20:07:04,800 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-29 20:07:04,801 [screen.py:init_printer()] - Printer initialized
2023-10-29 20:07:04,802 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-10-29 20:07:04,803 [printer.py:change_state()] - Adding callback for state: error
2023-10-29 20:07:04,806 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 20:07:04,876 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 20:08:06,660 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2023-10-29 20:08:06,661 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-29 20:08:06,663 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-29 20:08:06,667 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 20:08:06,763 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 20:08:10,414 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 20:08:10,432 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 20:08:10,434 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 20:08:10,450 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 20:08:10,452 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 20:08:10,472 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-29 20:08:10,619 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-29 20:08:10,621 [screen.py:init_printer()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-29 20:08:10,621 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-29 20:08:10,622 [printer.py:reinit()] - # Extruders: 0
2023-10-29 20:08:10,622 [printer.py:reinit()] - # Temperature devices: 0
2023-10-29 20:08:10,622 [printer.py:reinit()] - # Fans: 0
2023-10-29 20:08:10,622 [printer.py:reinit()] - # Output pins: 0
2023-10-29 20:08:10,623 [printer.py:reinit()] - # Leds: 0
2023-10-29 20:08:10,644 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-29 20:08:10,646 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-29 20:08:10,887 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2023-10-29 20:08:10,890 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-29 20:08:10,891 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-29 20:08:10,892 [screen.py:init_printer()] - Printer initialized
2023-10-29 20:08:10,893 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-10-29 20:08:10,894 [printer.py:change_state()] - Adding callback for state: error
2023-10-29 20:08:10,899 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 20:08:11,028 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 20:14:05,883 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2023-10-29 20:14:05,884 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-29 20:14:05,887 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-29 20:14:05,891 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 20:14:06,009 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 20:14:09,415 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 20:14:09,433 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 20:14:09,435 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 20:14:09,451 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 20:14:09,453 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 20:14:09,473 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-29 20:14:09,591 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-29 20:14:09,593 [screen.py:init_printer()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-29 20:14:09,593 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-29 20:14:09,594 [printer.py:reinit()] - # Extruders: 0
2023-10-29 20:14:09,594 [printer.py:reinit()] - # Temperature devices: 0
2023-10-29 20:14:09,594 [printer.py:reinit()] - # Fans: 0
2023-10-29 20:14:09,594 [printer.py:reinit()] - # Output pins: 0
2023-10-29 20:14:09,594 [printer.py:reinit()] - # Leds: 0
2023-10-29 20:14:09,615 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-29 20:14:09,618 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-29 20:14:09,848 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2023-10-29 20:14:09,850 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-29 20:14:09,850 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-29 20:14:09,851 [screen.py:init_printer()] - Printer initialized
2023-10-29 20:14:09,852 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-10-29 20:14:09,853 [printer.py:change_state()] - Adding callback for state: error
2023-10-29 20:14:09,858 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 20:14:09,929 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 20:16:59,744 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2023-10-29 20:16:59,745 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-29 20:16:59,747 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-29 20:16:59,752 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 20:16:59,848 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 20:17:03,419 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 20:17:03,451 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 20:17:03,453 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 20:17:03,472 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 20:17:03,475 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 20:17:03,497 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-29 20:17:03,531 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-29 20:17:03,535 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PA2', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': '!can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '26.72306036', 'gear_ratio': '50:8', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1400.0', 'max_extrude_only_velocity': '75.0', 'max_extrude_only_accel': '1500', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '22.2', 'pid_ki': '1.08', 'pid_kd': '114', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'stealthchop_threshold': '0', 'run_current': '0.30'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'can0:PA5', 'position_endstop': '-2.5', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew'}, 'gcode_macro PRINT_END': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nSTATUS_HEATING\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': '^can0:LIMIT_1', 'x_offset': '-29.8', 'y_offset': '-13.5', 'z_offset': '2.202', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PA2']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.3, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 22.2, 'pid_ki': 1.08, 'pid_kd': 114.0, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 75.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 1400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!can0:EXT_DIR', 'rotation_distance': 26.72306036, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'can0:PA5', 'position_endstop': -2.5, 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nSTATUS_HEATING\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': 2.202, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '^can0:LIMIT_1', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-29 20:17:03,539 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-29 20:17:03,540 [printer.py:reinit()] - # Extruders: 1
2023-10-29 20:17:03,541 [printer.py:reinit()] - # Temperature devices: 5
2023-10-29 20:17:03,541 [printer.py:reinit()] - # Fans: 2
2023-10-29 20:17:03,541 [printer.py:reinit()] - # Output pins: 1
2023-10-29 20:17:03,542 [printer.py:reinit()] - # Leds: 0
2023-10-29 20:17:03,568 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-29 20:17:03,571 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-29 20:17:03,837 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-29 20:17:03,898 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-29 20:17:03,928 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-29 20:17:03,957 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-29 20:17:03,960 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-29 20:17:03,961 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-29 20:17:03,961 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-29 20:17:03,963 [screen.py:init_printer()] - Printer initialized
2023-10-29 20:17:03,964 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-29 20:17:03,965 [printer.py:change_state()] - Adding callback for state: startup
2023-10-29 20:17:04,024 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-29 20:17:04,024 [printer.py:change_state()] - Adding callback for state: ready
2023-10-29 20:17:04,031 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 20:17:04,154 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-29 20:17:04,166 [main_menu.py:add_device()] - Adding device: extruder
2023-10-29 20:17:04,176 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-29 20:17:04,190 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-29 20:17:04,200 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-29 20:17:04,210 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-29 20:17:04,220 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-29 20:17:04,288 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-29 20:18:40,841 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-29 20:18:40,841 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-29 20:18:40,843 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-29 20:18:40,847 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 20:18:40,914 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 20:18:44,421 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 20:18:44,441 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 20:18:44,443 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 20:18:44,462 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 20:18:44,464 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 20:18:44,489 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-29 20:18:44,524 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-29 20:18:44,528 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PA2', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': '!can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '26.72306036', 'gear_ratio': '50:8', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1400.0', 'max_extrude_only_velocity': '75.0', 'max_extrude_only_accel': '1500', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '22.2', 'pid_ki': '1.08', 'pid_kd': '114', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'stealthchop_threshold': '0', 'run_current': '0.30'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'can0:PROBE_2', 'position_endstop': '-2.5', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew'}, 'gcode_macro PRINT_END': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nSTATUS_HEATING\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': '^can0:LIMIT_1', 'x_offset': '-29.8', 'y_offset': '-13.5', 'z_offset': '2.202', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PA2']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.3, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 22.2, 'pid_ki': 1.08, 'pid_kd': 114.0, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 75.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 1400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!can0:EXT_DIR', 'rotation_distance': 26.72306036, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'can0:PROBE_2', 'position_endstop': -2.5, 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nSTATUS_HEATING\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': 2.202, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': '^can0:LIMIT_1', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-29 20:18:44,534 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-29 20:18:44,534 [printer.py:reinit()] - # Extruders: 1
2023-10-29 20:18:44,534 [printer.py:reinit()] - # Temperature devices: 5
2023-10-29 20:18:44,534 [printer.py:reinit()] - # Fans: 2
2023-10-29 20:18:44,534 [printer.py:reinit()] - # Output pins: 1
2023-10-29 20:18:44,535 [printer.py:reinit()] - # Leds: 0
2023-10-29 20:18:44,561 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-29 20:18:44,564 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-29 20:18:44,812 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-29 20:18:44,861 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-29 20:18:44,875 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-29 20:18:44,899 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-29 20:18:44,902 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-29 20:18:44,903 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-29 20:18:44,904 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-29 20:18:44,905 [screen.py:init_printer()] - Printer initialized
2023-10-29 20:18:44,906 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-29 20:18:44,906 [printer.py:change_state()] - Adding callback for state: startup
2023-10-29 20:18:45,014 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-29 20:18:45,015 [printer.py:change_state()] - Adding callback for state: ready
2023-10-29 20:18:45,020 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 20:18:45,136 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-29 20:18:45,150 [main_menu.py:add_device()] - Adding device: extruder
2023-10-29 20:18:45,159 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-29 20:18:45,170 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-29 20:18:45,181 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-29 20:18:45,194 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-29 20:18:45,204 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-29 20:18:45,271 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-29 20:20:12,714 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-29 20:20:12,715 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-29 20:20:12,718 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-29 20:20:12,724 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 20:20:12,848 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 20:20:16,416 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 20:20:16,433 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 20:20:16,435 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 20:20:16,452 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 20:20:16,453 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 20:20:16,473 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-29 20:20:16,699 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-29 20:20:16,701 [screen.py:init_printer()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-29 20:20:16,703 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-29 20:20:16,703 [printer.py:reinit()] - # Extruders: 0
2023-10-29 20:20:16,704 [printer.py:reinit()] - # Temperature devices: 0
2023-10-29 20:20:16,704 [printer.py:reinit()] - # Fans: 0
2023-10-29 20:20:16,704 [printer.py:reinit()] - # Output pins: 0
2023-10-29 20:20:16,704 [printer.py:reinit()] - # Leds: 0
2023-10-29 20:20:16,725 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-29 20:20:16,727 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-29 20:20:16,972 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2023-10-29 20:20:16,975 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-29 20:20:16,976 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-29 20:20:16,978 [screen.py:init_printer()] - Printer initialized
2023-10-29 20:20:16,979 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-10-29 20:20:16,980 [printer.py:change_state()] - Adding callback for state: error
2023-10-29 20:20:16,986 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 20:20:17,138 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 20:20:41,087 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2023-10-29 20:20:41,088 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-29 20:20:41,090 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-29 20:20:41,095 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 20:20:41,188 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 20:20:44,415 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 20:20:44,433 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 20:20:44,435 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 20:20:44,457 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 20:20:44,459 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 20:20:44,484 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-29 20:20:44,637 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-29 20:20:44,639 [screen.py:init_printer()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-29 20:20:44,640 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-29 20:20:44,640 [printer.py:reinit()] - # Extruders: 0
2023-10-29 20:20:44,641 [printer.py:reinit()] - # Temperature devices: 0
2023-10-29 20:20:44,641 [printer.py:reinit()] - # Fans: 0
2023-10-29 20:20:44,641 [printer.py:reinit()] - # Output pins: 0
2023-10-29 20:20:44,641 [printer.py:reinit()] - # Leds: 0
2023-10-29 20:20:44,662 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-29 20:20:44,664 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-29 20:20:44,894 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2023-10-29 20:20:44,897 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-29 20:20:44,897 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-29 20:20:44,898 [screen.py:init_printer()] - Printer initialized
2023-10-29 20:20:44,899 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-10-29 20:20:44,899 [printer.py:change_state()] - Adding callback for state: error
2023-10-29 20:20:44,903 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 20:20:44,973 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 20:23:20,203 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2023-10-29 20:23:20,204 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-29 20:23:20,205 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-29 20:23:20,209 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 20:23:20,309 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 20:23:23,416 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 20:23:23,433 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 20:23:23,435 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 20:23:23,452 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 20:23:23,454 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 20:23:23,474 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-29 20:23:23,504 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-29 20:23:23,507 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PA2', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': '!can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '26.72306036', 'gear_ratio': '50:8', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1400.0', 'max_extrude_only_velocity': '75.0', 'max_extrude_only_accel': '1500', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '22.2', 'pid_ki': '1.08', 'pid_kd': '114', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'stealthchop_threshold': '0', 'run_current': '0.30'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew'}, 'gcode_macro PRINT_END': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nSTATUS_HEATING\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'z_offset': '2.202', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PA2']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.3, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 22.2, 'pid_ki': 1.08, 'pid_kd': 114.0, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 75.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 1400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!can0:EXT_DIR', 'rotation_distance': 26.72306036, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nSTATUS_HEATING\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': 2.202, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-29 20:23:23,511 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-29 20:23:23,512 [printer.py:reinit()] - # Extruders: 1
2023-10-29 20:23:23,512 [printer.py:reinit()] - # Temperature devices: 5
2023-10-29 20:23:23,512 [printer.py:reinit()] - # Fans: 2
2023-10-29 20:23:23,512 [printer.py:reinit()] - # Output pins: 1
2023-10-29 20:23:23,513 [printer.py:reinit()] - # Leds: 0
2023-10-29 20:23:23,535 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-29 20:23:23,538 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-29 20:23:23,797 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-29 20:23:23,850 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-29 20:23:23,859 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-29 20:23:23,882 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-29 20:23:23,884 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-29 20:23:23,885 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-29 20:23:23,886 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-29 20:23:23,887 [screen.py:init_printer()] - Printer initialized
2023-10-29 20:23:23,888 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-29 20:23:23,889 [printer.py:change_state()] - Adding callback for state: startup
2023-10-29 20:23:24,247 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-29 20:23:24,247 [printer.py:change_state()] - Adding callback for state: ready
2023-10-29 20:23:24,253 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 20:23:24,369 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-29 20:23:24,382 [main_menu.py:add_device()] - Adding device: extruder
2023-10-29 20:23:24,391 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-29 20:23:24,406 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-29 20:23:24,420 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-29 20:23:24,434 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-29 20:23:24,448 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-29 20:23:24,561 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-29 20:35:33,432 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-29 20:35:33,433 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-29 20:35:33,436 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-29 20:35:33,443 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 20:35:33,534 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 20:35:36,427 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 20:35:36,450 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 20:35:36,453 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 20:35:36,473 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 20:35:36,475 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 20:35:36,499 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-29 20:35:36,535 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-29 20:35:36,539 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PA2', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': '!can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'gear_ratio': '7:1', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '22.2', 'pid_ki': '1.08', 'pid_kd': '114', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0', 'driver_tbl': '0', 'driver_hend': '6', 'driver_hstrt': '7', 'driver_toff': '4'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew'}, 'gcode_macro PRINT_END': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nSTATUS_HEATING\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'z_offset': '2.202', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PA2']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 4, 'driver_hstrt': 7, 'driver_hend': 6, 'driver_tbl': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 22.2, 'pid_ki': 1.08, 'pid_kd': 114.0, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': '!can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [[7.0, 1.0]], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nSTATUS_HEATING\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': 2.202, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-29 20:35:36,546 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-29 20:35:36,546 [printer.py:reinit()] - # Extruders: 1
2023-10-29 20:35:36,547 [printer.py:reinit()] - # Temperature devices: 5
2023-10-29 20:35:36,547 [printer.py:reinit()] - # Fans: 2
2023-10-29 20:35:36,547 [printer.py:reinit()] - # Output pins: 1
2023-10-29 20:35:36,548 [printer.py:reinit()] - # Leds: 0
2023-10-29 20:35:36,576 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-29 20:35:36,579 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-29 20:35:36,824 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-29 20:35:36,871 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-29 20:35:36,881 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-29 20:35:36,900 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-29 20:35:36,902 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-29 20:35:36,903 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-29 20:35:36,903 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-29 20:35:36,904 [screen.py:init_printer()] - Printer initialized
2023-10-29 20:35:36,906 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-29 20:35:36,906 [printer.py:change_state()] - Adding callback for state: startup
2023-10-29 20:35:37,776 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-29 20:35:37,777 [printer.py:change_state()] - Adding callback for state: ready
2023-10-29 20:35:37,783 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 20:35:37,899 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-29 20:35:37,911 [main_menu.py:add_device()] - Adding device: extruder
2023-10-29 20:35:37,921 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-29 20:35:37,932 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-29 20:35:37,942 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-29 20:35:37,952 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-29 20:35:37,962 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-29 20:35:38,029 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-29 20:40:15,059 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-29 20:40:15,060 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-29 20:40:15,062 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-29 20:40:15,066 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 20:40:15,133 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 20:40:18,419 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 20:40:18,438 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 20:40:18,440 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 20:40:18,458 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 20:40:18,460 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 20:40:18,481 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-29 20:40:18,511 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-29 20:40:18,514 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': '!can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'gear_ratio': '7:1', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '22.2', 'pid_ki': '1.08', 'pid_kd': '114', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0', 'driver_tbl': '0', 'driver_hend': '6', 'driver_hstrt': '7', 'driver_toff': '4'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew'}, 'gcode_macro PRINT_END': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nSTATUS_HEATING\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'z_offset': '2.202', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 4, 'driver_hstrt': 7, 'driver_hend': 6, 'driver_tbl': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 22.2, 'pid_ki': 1.08, 'pid_kd': 114.0, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': '!can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [[7.0, 1.0]], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nSTATUS_HEATING\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': 2.202, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-29 20:40:18,520 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-29 20:40:18,521 [printer.py:reinit()] - # Extruders: 1
2023-10-29 20:40:18,521 [printer.py:reinit()] - # Temperature devices: 5
2023-10-29 20:40:18,521 [printer.py:reinit()] - # Fans: 2
2023-10-29 20:40:18,521 [printer.py:reinit()] - # Output pins: 1
2023-10-29 20:40:18,521 [printer.py:reinit()] - # Leds: 0
2023-10-29 20:40:18,545 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-29 20:40:18,547 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-29 20:40:18,810 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-29 20:40:18,863 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-29 20:40:18,874 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-29 20:40:18,896 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-29 20:40:18,899 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-29 20:40:18,900 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-29 20:40:18,901 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-29 20:40:18,903 [screen.py:init_printer()] - Printer initialized
2023-10-29 20:40:18,904 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-29 20:40:18,904 [printer.py:change_state()] - Adding callback for state: startup
2023-10-29 20:40:19,254 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-29 20:40:19,254 [printer.py:change_state()] - Adding callback for state: ready
2023-10-29 20:40:19,260 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 20:40:19,377 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-29 20:40:19,389 [main_menu.py:add_device()] - Adding device: extruder
2023-10-29 20:40:19,399 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-29 20:40:19,410 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-29 20:40:19,421 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-29 20:40:19,430 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-29 20:40:19,440 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-29 20:40:19,507 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-29 20:43:24,560 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2023-10-29 20:43:24,561 [printer.py:change_state()] - Adding callback for state: shutdown
2023-10-29 20:43:24,582 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 20:43:24,652 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 20:45:35,388 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2023-10-29 20:45:35,388 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-29 20:45:35,390 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-29 20:45:35,392 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 20:45:35,460 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 20:45:38,426 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 20:45:38,448 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 20:45:38,450 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 20:45:38,474 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 20:45:38,478 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 20:45:38,498 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-29 20:45:38,528 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-29 20:45:38,532 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': '!can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'gear_ratio': '7:1', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '22.2', 'pid_ki': '1.08', 'pid_kd': '114', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0', 'driver_tbl': '0', 'driver_hend': '6', 'driver_hstrt': '7', 'driver_toff': '4'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '345', 'position_max': '345', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew'}, 'gcode_macro PRINT_END': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nSTATUS_HEATING\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'z_offset': '2.202', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 4, 'driver_hstrt': 7, 'driver_hend': 6, 'driver_tbl': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 22.2, 'pid_ki': 1.08, 'pid_kd': 114.0, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': '!can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [[7.0, 1.0]], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 345.0, 'position_min': 0.0, 'position_max': 345.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nSTATUS_HEATING\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': 2.202, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-29 20:45:38,537 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-29 20:45:38,538 [printer.py:reinit()] - # Extruders: 1
2023-10-29 20:45:38,538 [printer.py:reinit()] - # Temperature devices: 5
2023-10-29 20:45:38,538 [printer.py:reinit()] - # Fans: 2
2023-10-29 20:45:38,538 [printer.py:reinit()] - # Output pins: 1
2023-10-29 20:45:38,538 [printer.py:reinit()] - # Leds: 0
2023-10-29 20:45:38,561 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-29 20:45:38,563 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-29 20:45:38,818 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-29 20:45:38,869 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-29 20:45:38,882 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-29 20:45:38,906 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-29 20:45:38,908 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-29 20:45:38,909 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-29 20:45:38,910 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-29 20:45:38,911 [screen.py:init_printer()] - Printer initialized
2023-10-29 20:45:38,912 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-29 20:45:38,913 [printer.py:change_state()] - Adding callback for state: startup
2023-10-29 20:45:39,524 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-29 20:45:39,525 [printer.py:change_state()] - Adding callback for state: ready
2023-10-29 20:45:39,533 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 20:45:39,654 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-29 20:45:39,667 [main_menu.py:add_device()] - Adding device: extruder
2023-10-29 20:45:39,677 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-29 20:45:39,689 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-29 20:45:39,699 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-29 20:45:39,709 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-29 20:45:39,718 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-29 20:45:39,789 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-29 20:45:51,761 [screen.py:show_popup_message()] - error: Must home axis first: 0.000 0.000 25.000 [0.000]
2023-10-29 20:45:53,729 [screen.py:show_popup_message()] - error: // Unknown command:"SET_KINEMATIC_POSITION"
2023-10-29 20:45:55,979 [screen.py:show_popup_message()] - error: Must home axis first: 0.000 0.000 25.000 [0.000]
2023-10-29 20:46:14,588 [screen.py:show_popup_message()] - error: Must home axis first: 0.000 0.000 25.000 [0.000]
2023-10-29 20:46:14,938 [screen.py:show_popup_message()] - error: Must home axis first: 0.000 0.000 25.000 [0.000]
2023-10-29 20:46:24,865 [screen.py:show_popup_message()] - error: Endstop z still triggered after retract
2023-10-29 20:46:30,103 [screen.py:show_popup_message()] - error: Must home axis first: 345.019 350.000 27.202 [0.000]
2023-10-29 20:50:03,982 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2023-10-29 20:51:11,839 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-29 20:51:11,867 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2023-10-29 20:57:57,239 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-29 20:57:57,240 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-29 20:57:57,242 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-29 20:57:57,248 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-29 20:57:57,249 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 20:57:57,317 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 20:58:00,419 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 20:58:00,436 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 20:58:00,438 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 20:58:00,455 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 20:58:00,457 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 20:58:00,477 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-29 20:58:00,507 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-29 20:58:00,510 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'gear_ratio': '7:1', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0', 'driver_tbl': '0', 'driver_hend': '6', 'driver_hstrt': '7', 'driver_toff': '4'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '345', 'position_max': '345', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew'}, 'gcode_macro PRINT_END': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nSTATUS_HEATING\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'z_offset': '2.202', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 4, 'driver_hstrt': 7, 'driver_hend': 6, 'driver_tbl': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [[7.0, 1.0]], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 345.0, 'position_min': 0.0, 'position_max': 345.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nSTATUS_HEATING\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': 2.202, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-29 20:58:00,517 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-29 20:58:00,517 [printer.py:reinit()] - # Extruders: 1
2023-10-29 20:58:00,517 [printer.py:reinit()] - # Temperature devices: 5
2023-10-29 20:58:00,517 [printer.py:reinit()] - # Fans: 2
2023-10-29 20:58:00,518 [printer.py:reinit()] - # Output pins: 1
2023-10-29 20:58:00,518 [printer.py:reinit()] - # Leds: 0
2023-10-29 20:58:00,540 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-29 20:58:00,542 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-29 20:58:00,823 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-29 20:58:00,916 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-29 20:58:00,933 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-29 20:58:00,961 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-29 20:58:00,963 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-29 20:58:00,964 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-29 20:58:00,965 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-29 20:58:00,966 [screen.py:init_printer()] - Printer initialized
2023-10-29 20:58:00,967 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-29 20:58:00,968 [printer.py:change_state()] - Adding callback for state: startup
2023-10-29 20:58:01,500 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-29 20:58:01,500 [printer.py:change_state()] - Adding callback for state: ready
2023-10-29 20:58:01,506 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 20:58:01,622 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-29 20:58:01,635 [main_menu.py:add_device()] - Adding device: extruder
2023-10-29 20:58:01,645 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-29 20:58:01,655 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-29 20:58:01,665 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-29 20:58:01,675 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-29 20:58:01,686 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-29 20:58:01,753 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-29 21:01:19,409 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-29 21:09:48,326 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-29 21:09:48,327 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-29 21:09:48,329 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-29 21:09:48,330 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-29 21:09:48,365 [screen.py:wake_screen()] - Screen wake up
2023-10-29 21:09:48,432 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 21:09:48,514 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 21:09:51,430 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 21:09:51,453 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 21:09:51,455 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 21:09:51,475 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 21:09:51,477 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 21:09:51,497 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-29 21:09:51,528 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-29 21:09:51,532 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '345', 'position_max': '345', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew'}, 'gcode_macro PRINT_END': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nSTATUS_HEATING\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'z_offset': '2.202', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 345.0, 'position_min': 0.0, 'position_max': 345.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nSTATUS_HEATING\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': 2.202, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-29 21:09:51,538 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-29 21:09:51,538 [printer.py:reinit()] - # Extruders: 1
2023-10-29 21:09:51,538 [printer.py:reinit()] - # Temperature devices: 5
2023-10-29 21:09:51,539 [printer.py:reinit()] - # Fans: 2
2023-10-29 21:09:51,539 [printer.py:reinit()] - # Output pins: 1
2023-10-29 21:09:51,539 [printer.py:reinit()] - # Leds: 0
2023-10-29 21:09:51,561 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-29 21:09:51,564 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-29 21:09:51,816 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-29 21:09:51,864 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-29 21:09:51,874 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-29 21:09:51,893 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-29 21:09:51,896 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-29 21:09:51,897 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-29 21:09:51,898 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-29 21:09:51,899 [screen.py:init_printer()] - Printer initialized
2023-10-29 21:09:51,900 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-29 21:09:51,901 [printer.py:change_state()] - Adding callback for state: startup
2023-10-29 21:09:52,518 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-29 21:09:52,519 [printer.py:change_state()] - Adding callback for state: ready
2023-10-29 21:09:52,525 [screen.py:show_panel()] - Reinitializing panel
2023-10-29 21:09:52,640 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-29 21:09:52,653 [main_menu.py:add_device()] - Adding device: extruder
2023-10-29 21:09:52,663 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-29 21:09:52,673 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-29 21:09:52,683 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-29 21:09:52,693 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-29 21:09:52,703 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-29 21:09:52,771 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-65-g4a14962
2023-10-29 21:17:19,713 [screen.py:main()] - Python version: 3.9
2023-10-29 21:17:19,715 [screen.py:main()] - KlipperScreen version: v0.3.6-65-g4a14962
2023-10-29 21:17:19,732 [functions.py:detect_desktop_environment()] - Error:
'XDG_CURRENT_DESKTOP'

Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
2023-10-29 21:17:20,045 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-10-29 21:17:20,048 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2023-10-29 21:17:20,080 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-10-29 21:17:20,263 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-10-29 21:17:20,264 [config.py:install_language()] - Using system lang
2023-10-29 21:17:20,265 [config.py:install_language()] - Using lang en
2023-10-29 21:17:20,301 [screen.py:__init__()] - Screen resolution: 800x480
2023-10-29 21:17:20,304 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-10-29 21:17:21,691 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-10-29 21:17:21,705 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-10-29 21:17:21,716 [screen.py:initial_connection()] - Default printer: None
2023-10-29 21:17:21,716 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-10-29 21:17:21,717 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-10-29 21:17:21,854 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-29 21:17:21,868 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-10-29 21:17:21,905 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 21:17:21,924 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-10-29 21:17:21,927 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-10-29 21:17:21,940 [_logging.py:info()] - Websocket connected
2023-10-29 21:17:21,941 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-10-29 21:17:22,227 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 21:17:22,246 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 21:17:22,248 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 21:17:22,265 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 21:17:22,267 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 21:17:22,267 [screen.py:init_printer()] - Klipper not connected
2023-10-29 21:17:25,953 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 21:17:25,976 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 21:17:25,978 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 21:17:26,001 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 21:17:26,003 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 21:17:26,004 [screen.py:init_printer()] - Klipper not connected
2023-10-29 21:17:28,955 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 21:17:28,976 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 21:17:28,978 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 21:17:28,999 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 21:17:29,001 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 21:17:29,002 [screen.py:init_printer()] - Klipper not connected
2023-10-29 21:17:32,015 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 21:17:32,038 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-29 21:17:32,040 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-29 21:17:32,061 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-29 21:17:32,063 [printer.py:configure_cameras()] - Cameras: []
2023-10-29 21:17:32,088 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-29 21:17:32,132 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-29 21:17:32,138 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '345', 'position_max': '345', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew'}, 'gcode_macro PRINT_END': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nSTATUS_HEATING\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'z_offset': '2.202', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 345.0, 'position_min': 0.0, 'position_max': 345.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nSTATUS_HEATING\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': 2.202, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-29 21:17:32,143 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-29 21:17:32,144 [printer.py:reinit()] - # Extruders: 1
2023-10-29 21:17:32,144 [printer.py:reinit()] - # Temperature devices: 5
2023-10-29 21:17:32,145 [printer.py:reinit()] - # Fans: 2
2023-10-29 21:17:32,145 [printer.py:reinit()] - # Output pins: 1
2023-10-29 21:17:32,146 [printer.py:reinit()] - # Leds: 0
2023-10-29 21:17:32,181 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-29 21:17:32,186 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-29 21:17:32,420 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-29 21:17:32,445 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-29 21:17:32,447 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-29 21:17:32,451 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-29 21:17:32,452 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-29 21:17:32,454 [screen.py:init_printer()] - Printer initialized
2023-10-29 21:17:32,455 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-29 21:17:32,456 [printer.py:change_state()] - Adding callback for state: startup
2023-10-29 21:17:34,126 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-29 21:17:34,126 [printer.py:change_state()] - Adding callback for state: ready
2023-10-29 21:17:34,132 [screen.py:_load_panel()] - Loading panel: main_menu
2023-10-29 21:17:34,264 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-29 21:17:34,277 [main_menu.py:add_device()] - Adding device: extruder
2023-10-29 21:17:34,289 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-29 21:17:34,300 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-29 21:17:34,310 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-29 21:17:34,320 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-29 21:17:34,330 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-29 21:17:34,400 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-29 21:17:34,403 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: []
2023-10-29 21:17:37,958 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-29 21:17:38,012 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-29 21:17:38,041 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-29 21:17:38,044 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-30 10:36:53,217 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-30 10:36:53,218 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-30 10:36:53,220 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-30 10:36:53,224 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 10:36:53,301 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-30 10:36:56,847 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 10:36:56,865 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 10:36:56,867 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-30 10:36:56,884 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-30 10:36:56,886 [printer.py:configure_cameras()] - Cameras: []
2023-10-30 10:36:56,905 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-30 10:36:56,938 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-30 10:36:56,942 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '345', 'position_max': '345', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew'}, 'gcode_macro PRINT_END': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nSTATUS_HEATING\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'z_offset': '2.202', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 345.0, 'position_min': 0.0, 'position_max': 345.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nSTATUS_HEATING\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': 2.202, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-30 10:36:56,948 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-30 10:36:56,948 [printer.py:reinit()] - # Extruders: 1
2023-10-30 10:36:56,948 [printer.py:reinit()] - # Temperature devices: 5
2023-10-30 10:36:56,948 [printer.py:reinit()] - # Fans: 2
2023-10-30 10:36:56,949 [printer.py:reinit()] - # Output pins: 1
2023-10-30 10:36:56,949 [printer.py:reinit()] - # Leds: 0
2023-10-30 10:36:56,971 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-30 10:36:56,974 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-30 10:36:57,258 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-30 10:36:57,296 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 10:36:57,320 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-30 10:36:57,344 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-30 10:36:57,347 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-30 10:36:57,347 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-30 10:36:57,348 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-30 10:36:57,349 [screen.py:init_printer()] - Printer initialized
2023-10-30 10:36:57,350 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-30 10:36:57,351 [printer.py:change_state()] - Adding callback for state: startup
2023-10-30 10:36:57,929 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-30 10:36:57,929 [printer.py:change_state()] - Adding callback for state: ready
2023-10-30 10:36:57,935 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 10:36:58,051 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-30 10:36:58,064 [main_menu.py:add_device()] - Adding device: extruder
2023-10-30 10:36:58,074 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-30 10:36:58,084 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-30 10:36:58,094 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-30 10:36:58,104 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-30 10:36:58,114 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-30 10:36:58,182 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-30 10:39:29,558 [screen.py:show_popup_message()] - error: // Unknown command:"STATUS_HOMING"
2023-10-30 10:39:50,040 [screen.py:show_popup_message()] - error: // Unknown command:"STATUS_HEATING"
2023-10-30 10:41:04,874 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2023-10-30 10:41:04,875 [printer.py:change_state()] - Adding callback for state: shutdown
2023-10-30 10:41:04,897 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 10:41:04,967 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-30 10:41:05,181 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2023-10-30 10:41:05,181 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-30 10:41:05,183 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-30 10:41:05,185 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 10:41:05,252 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-30 10:41:08,846 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 10:41:08,864 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 10:41:08,866 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-30 10:41:08,883 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-30 10:41:08,884 [printer.py:configure_cameras()] - Cameras: []
2023-10-30 10:41:08,904 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-30 10:41:08,938 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-30 10:41:08,942 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '345', 'position_max': '345', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew'}, 'gcode_macro PRINT_END': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'z_offset': '2.202', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 345.0, 'position_min': 0.0, 'position_max': 345.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': 2.202, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-30 10:41:08,948 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-30 10:41:08,949 [printer.py:reinit()] - # Extruders: 1
2023-10-30 10:41:08,949 [printer.py:reinit()] - # Temperature devices: 5
2023-10-30 10:41:08,949 [printer.py:reinit()] - # Fans: 2
2023-10-30 10:41:08,949 [printer.py:reinit()] - # Output pins: 1
2023-10-30 10:41:08,950 [printer.py:reinit()] - # Leds: 0
2023-10-30 10:41:08,972 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-30 10:41:08,975 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-30 10:41:09,246 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-30 10:41:09,293 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 10:41:09,313 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-30 10:41:09,335 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-30 10:41:09,337 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-30 10:41:09,338 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-30 10:41:09,338 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-30 10:41:09,340 [screen.py:init_printer()] - Printer initialized
2023-10-30 10:41:09,341 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-30 10:41:09,341 [printer.py:change_state()] - Adding callback for state: startup
2023-10-30 10:41:09,927 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-30 10:41:09,927 [printer.py:change_state()] - Adding callback for state: ready
2023-10-30 10:41:09,933 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 10:41:10,135 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-30 10:41:10,158 [main_menu.py:add_device()] - Adding device: extruder
2023-10-30 10:41:10,168 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-30 10:41:10,180 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-30 10:41:10,194 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-30 10:41:10,204 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-30 10:41:10,214 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-30 10:41:10,284 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-30 10:41:16,588 [screen.py:show_popup_message()] - error: // Unknown command:"SET_KINEMATIC_POSITION"
2023-10-30 10:42:28,738 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-30 10:42:28,739 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-30 10:42:28,741 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-30 10:42:28,751 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 10:42:28,896 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-30 10:42:31,849 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 10:42:31,866 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 10:42:31,868 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-30 10:42:31,885 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-30 10:42:31,887 [printer.py:configure_cameras()] - Cameras: []
2023-10-30 10:42:31,907 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-30 10:42:31,939 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-30 10:42:31,943 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '345', 'position_max': '345', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew'}, 'gcode_macro PRINT_END': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'z_offset': '2.202', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 345.0, 'position_min': 0.0, 'position_max': 345.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': 2.202, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-30 10:42:31,949 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-30 10:42:31,949 [printer.py:reinit()] - # Extruders: 1
2023-10-30 10:42:31,950 [printer.py:reinit()] - # Temperature devices: 5
2023-10-30 10:42:31,950 [printer.py:reinit()] - # Fans: 2
2023-10-30 10:42:31,950 [printer.py:reinit()] - # Output pins: 1
2023-10-30 10:42:31,950 [printer.py:reinit()] - # Leds: 0
2023-10-30 10:42:31,974 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-30 10:42:31,977 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-30 10:42:32,249 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-30 10:42:32,294 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 10:42:32,310 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-30 10:42:32,330 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-30 10:42:32,332 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-30 10:42:32,333 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-30 10:42:32,333 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-30 10:42:32,334 [screen.py:init_printer()] - Printer initialized
2023-10-30 10:42:32,336 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-30 10:42:32,336 [printer.py:change_state()] - Adding callback for state: startup
2023-10-30 10:42:33,431 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-30 10:42:33,432 [printer.py:change_state()] - Adding callback for state: ready
2023-10-30 10:42:33,438 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 10:42:33,556 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-30 10:42:33,569 [main_menu.py:add_device()] - Adding device: extruder
2023-10-30 10:42:33,580 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-30 10:42:33,590 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-30 10:42:33,600 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-30 10:42:33,610 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-30 10:42:33,620 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-30 10:42:33,697 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-30 10:42:46,165 [screen.py:show_popup_message()] - error: // Unknown command:"SET_KINEMATIC_POSITION"
2023-10-30 10:44:41,890 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-30 10:44:41,891 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-30 10:44:41,895 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-30 10:44:41,901 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 10:44:42,001 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-30 10:44:44,852 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 10:44:44,870 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 10:44:44,872 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-30 10:44:44,890 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-30 10:44:44,892 [printer.py:configure_cameras()] - Cameras: []
2023-10-30 10:44:44,912 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-30 10:44:44,944 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-30 10:44:44,948 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '345', 'position_max': '345', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew'}, 'gcode_macro PRINT_END': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'z_offset': '2.202', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 345.0, 'position_min': 0.0, 'position_max': 345.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': 2.202, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-30 10:44:44,954 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-30 10:44:44,954 [printer.py:reinit()] - # Extruders: 1
2023-10-30 10:44:44,954 [printer.py:reinit()] - # Temperature devices: 5
2023-10-30 10:44:44,955 [printer.py:reinit()] - # Fans: 2
2023-10-30 10:44:44,955 [printer.py:reinit()] - # Output pins: 1
2023-10-30 10:44:44,955 [printer.py:reinit()] - # Leds: 0
2023-10-30 10:44:44,977 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-30 10:44:44,980 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-30 10:44:45,252 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-30 10:44:45,308 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 10:44:45,322 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-30 10:44:45,346 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-30 10:44:45,349 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-30 10:44:45,350 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-30 10:44:45,350 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-30 10:44:45,352 [screen.py:init_printer()] - Printer initialized
2023-10-30 10:44:45,353 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-30 10:44:45,353 [printer.py:change_state()] - Adding callback for state: startup
2023-10-30 10:44:46,692 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-30 10:44:46,692 [printer.py:change_state()] - Adding callback for state: ready
2023-10-30 10:44:46,700 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 10:44:46,816 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-30 10:44:46,829 [main_menu.py:add_device()] - Adding device: extruder
2023-10-30 10:44:46,841 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-30 10:44:46,855 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-30 10:44:46,865 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-30 10:44:46,875 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-30 10:44:46,885 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-30 10:44:46,955 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-30 10:54:00,771 [screen.py:show_popup_message()] - error: Move out of range: 349.800 25.500 5.000 [0.000]
2023-10-30 10:54:00,952 [screen.py:show_popup_message()] - error: Move out of range: 349.800 25.500 5.000 [0.000]
2023-10-30 10:54:00,965 [screen.py:show_popup_message()] - error: Move out of range: 349.800 25.500 5.000 [0.000]
2023-10-30 10:57:51,948 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-30 10:57:51,948 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-30 10:57:51,950 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-30 10:57:51,954 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 10:57:52,040 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-30 10:57:54,877 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 10:57:54,899 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 10:57:54,901 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-30 10:57:54,923 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-30 10:57:54,925 [printer.py:configure_cameras()] - Cameras: []
2023-10-30 10:57:54,947 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-30 10:57:54,979 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-30 10:57:54,983 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew'}, 'gcode_macro PRINT_END': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'z_offset': '2.202', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': 2.202, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-30 10:57:54,990 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-30 10:57:54,990 [printer.py:reinit()] - # Extruders: 1
2023-10-30 10:57:54,991 [printer.py:reinit()] - # Temperature devices: 5
2023-10-30 10:57:54,991 [printer.py:reinit()] - # Fans: 2
2023-10-30 10:57:54,991 [printer.py:reinit()] - # Output pins: 1
2023-10-30 10:57:54,992 [printer.py:reinit()] - # Leds: 0
2023-10-30 10:57:55,013 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-30 10:57:55,016 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-30 10:57:55,287 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-30 10:57:55,337 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 10:57:55,347 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-30 10:57:55,369 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-30 10:57:55,373 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-30 10:57:55,374 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-30 10:57:55,374 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-30 10:57:55,377 [screen.py:init_printer()] - Printer initialized
2023-10-30 10:57:55,378 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-30 10:57:55,379 [printer.py:change_state()] - Adding callback for state: startup
2023-10-30 10:57:56,721 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-30 10:57:56,721 [printer.py:change_state()] - Adding callback for state: ready
2023-10-30 10:57:56,727 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 10:57:56,847 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-30 10:57:56,864 [main_menu.py:add_device()] - Adding device: extruder
2023-10-30 10:57:56,874 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-30 10:57:56,884 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-30 10:57:56,894 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-30 10:57:56,904 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-30 10:57:56,914 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-30 10:57:56,985 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-30 11:06:57,763 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2023-10-30 11:09:55,140 [screen.py:_load_panel()] - Loading panel: zcalibrate
2023-10-30 11:09:55,176 [printer.py:get_probe()] - Probe type: probe
2023-10-30 11:09:55,177 [zcalibrate.py:__init__()] - Z offset: 2.202
2023-10-30 11:09:55,230 [zcalibrate.py:__init__()] - Available functions for calibration: ['probe']
2023-10-30 11:09:55,281 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > zcalibrate
2023-10-30 11:11:11,241 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-30 11:11:11,288 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2023-10-30 11:11:15,426 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-30 11:11:15,426 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-30 11:11:15,428 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-30 11:11:15,433 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-30 11:11:15,434 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 11:11:15,503 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-30 11:11:18,868 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 11:11:18,889 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 11:11:18,891 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-30 11:11:18,913 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-30 11:11:18,915 [printer.py:configure_cameras()] - Cameras: []
2023-10-30 11:11:18,942 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-30 11:11:18,984 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-30 11:11:18,994 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew'}, 'gcode_macro PRINT_END': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.460'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n0.008750, 0.020000, 0.007500, -0.000625, 0.062500\n-0.031875, -0.030000, -0.035000, -0.029375, -0.010000\n-0.047500, -0.053125, -0.066250, -0.055625, -0.064375\n-0.021250, -0.016250, -0.037500, -0.058125, -0.076875\n0.096875, 0.055000, 0.016250, -0.024375, -0.061875', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '320.0', 'min_y': '12.0', 'max_y': '320.0'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.00875, 0.02, 0.0075, -0.000625, 0.0625], [-0.031875, -0.03, -0.035, -0.029375, -0.01], [-0.0475, -0.053125, -0.06625, -0.055625, -0.064375], [-0.02125, -0.01625, -0.0375, -0.058125, -0.076875], [0.096875, 0.055, 0.01625, -0.024375, -0.061875]], 'min_x': 35.0, 'max_x': 320.0, 'min_y': 12.0, 'max_y': 320.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.46, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-30 11:11:19,002 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-30 11:11:19,003 [printer.py:reinit()] - # Extruders: 1
2023-10-30 11:11:19,003 [printer.py:reinit()] - # Temperature devices: 5
2023-10-30 11:11:19,003 [printer.py:reinit()] - # Fans: 2
2023-10-30 11:11:19,004 [printer.py:reinit()] - # Output pins: 1
2023-10-30 11:11:19,004 [printer.py:reinit()] - # Leds: 0
2023-10-30 11:11:19,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-30 11:11:19,035 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-30 11:11:19,290 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-30 11:11:19,340 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 11:11:19,350 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-30 11:11:19,369 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-30 11:11:19,372 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-30 11:11:19,372 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-30 11:11:19,373 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-30 11:11:19,374 [screen.py:init_printer()] - Printer initialized
2023-10-30 11:11:19,375 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-30 11:11:19,375 [printer.py:change_state()] - Adding callback for state: startup
2023-10-30 11:11:20,219 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-30 11:11:20,220 [printer.py:change_state()] - Adding callback for state: ready
2023-10-30 11:11:20,225 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 11:11:20,343 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-30 11:11:20,356 [main_menu.py:add_device()] - Adding device: extruder
2023-10-30 11:11:20,366 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-30 11:11:20,376 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-30 11:11:20,386 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-30 11:11:20,396 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-30 11:11:20,406 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-30 11:11:20,474 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-30 11:21:24,044 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffa8f6cf00 (GtkDialog at 0x31ae1960)>
2023-10-30 11:21:24,094 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2023-10-30 11:24:30,386 [screen.py:show_popup_message()] - error: // Unknown command:"STATUS_HOMING"
2023-10-30 11:24:30,538 [KlippyWebsocket.py:get_file_dir()] - Sending server.files.directory
2023-10-30 11:24:30,583 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-30 11:24:30,584 [printer.py:change_state()] - Adding callback for state: printing
2023-10-30 11:24:30,630 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-30 11:24:30,634 [screen.py:_load_panel()] - Loading panel: job_status
2023-10-30 11:24:30,939 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-30 11:24:30,956 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-30 11:24:30,983 [job_status.py:update_file_metadata()] - Update Metadata. File: 3x3in-calibration-test-v3.gcode Size: 99929
2023-10-30 11:24:31,000 [job_status.py:show_file_thumbnail()] - 3x3in-calibration-test-v3.gcode
2023-10-30 11:24:35,320 [screen.py:show_popup_message()] - error: // Unknown command:"STATUS_HEATING"
2023-10-30 11:26:01,815 [printer.py:change_state()] - Changing state from 'printing' to 'shutdown'
2023-10-30 11:26:01,815 [printer.py:change_state()] - Adding callback for state: shutdown
2023-10-30 11:26:01,855 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 11:26:01,925 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-30 11:26:05,006 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2023-10-30 11:26:05,006 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-30 11:26:05,008 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-30 11:26:05,010 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 11:26:05,088 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-30 11:26:08,849 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 11:26:08,868 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 11:26:08,870 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-30 11:26:08,887 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-30 11:26:08,888 [printer.py:configure_cameras()] - Cameras: []
2023-10-30 11:26:08,908 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-30 11:26:08,948 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-30 11:26:08,953 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew'}, 'gcode_macro PRINT_END': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.460'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n0.008750, 0.020000, 0.007500, -0.000625, 0.062500\n-0.031875, -0.030000, -0.035000, -0.029375, -0.010000\n-0.047500, -0.053125, -0.066250, -0.055625, -0.064375\n-0.021250, -0.016250, -0.037500, -0.058125, -0.076875\n0.096875, 0.055000, 0.016250, -0.024375, -0.061875', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '320.0', 'min_y': '12.0', 'max_y': '320.0'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.00875, 0.02, 0.0075, -0.000625, 0.0625], [-0.031875, -0.03, -0.035, -0.029375, -0.01], [-0.0475, -0.053125, -0.06625, -0.055625, -0.064375], [-0.02125, -0.01625, -0.0375, -0.058125, -0.076875], [0.096875, 0.055, 0.01625, -0.024375, -0.061875]], 'min_x': 35.0, 'max_x': 320.0, 'min_y': 12.0, 'max_y': 320.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.46, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-30 11:26:08,965 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-30 11:26:08,965 [printer.py:reinit()] - # Extruders: 1
2023-10-30 11:26:08,966 [printer.py:reinit()] - # Temperature devices: 5
2023-10-30 11:26:08,966 [printer.py:reinit()] - # Fans: 2
2023-10-30 11:26:08,967 [printer.py:reinit()] - # Output pins: 1
2023-10-30 11:26:08,967 [printer.py:reinit()] - # Leds: 0
2023-10-30 11:26:09,013 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-30 11:26:09,018 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-30 11:26:09,363 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-30 11:26:09,420 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 11:26:09,430 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-30 11:26:09,454 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-30 11:26:09,456 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-30 11:26:09,457 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-30 11:26:09,457 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-30 11:26:09,459 [screen.py:init_printer()] - Printer initialized
2023-10-30 11:26:09,460 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-30 11:26:09,461 [printer.py:change_state()] - Adding callback for state: startup
2023-10-30 11:26:09,686 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-30 11:26:09,687 [printer.py:change_state()] - Adding callback for state: ready
2023-10-30 11:26:09,694 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 11:26:09,817 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-30 11:26:09,830 [main_menu.py:add_device()] - Adding device: extruder
2023-10-30 11:26:09,840 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-30 11:26:09,851 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-30 11:26:09,861 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-30 11:26:09,872 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-30 11:26:09,882 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-30 11:26:09,956 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-30 11:26:24,978 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-30 11:26:24,979 [printer.py:change_state()] - Adding callback for state: printing
2023-10-30 11:26:25,007 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 11:26:25,256 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-30 11:26:25,270 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-30 11:26:25,288 [job_status.py:update_file_metadata()] - Update Metadata. File: 3x3in-calibration-test-v3.gcode Size: 99929
2023-10-30 11:26:25,298 [job_status.py:show_file_thumbnail()] - 3x3in-calibration-test-v3.gcode
2023-10-30 11:26:25,857 [files.py:add_file()] - File already exists: 3x3in-calibration-test-v3.gcode
2023-10-30 11:26:30,748 [printer.py:change_state()] - Changing state from 'printing' to 'shutdown'
2023-10-30 11:26:30,748 [printer.py:change_state()] - Adding callback for state: shutdown
2023-10-30 11:26:30,790 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 11:26:30,861 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-30 11:26:55,831 [screen.py:show_screensaver()] - Showing Screensaver
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-65-g4a14962
2023-10-30 11:17:23,996 [screen.py:main()] - Python version: 3.9
2023-10-30 11:17:23,996 [screen.py:main()] - KlipperScreen version: v0.3.6-65-g4a14962
2023-10-30 11:17:24,010 [functions.py:detect_desktop_environment()] - Error:
'XDG_CURRENT_DESKTOP'

Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
2023-10-30 11:17:24,326 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-10-30 11:17:24,328 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2023-10-30 11:17:24,355 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-10-30 11:17:24,458 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-10-30 11:17:24,459 [config.py:install_language()] - Using system lang
2023-10-30 11:17:24,460 [config.py:install_language()] - Using lang en
2023-10-30 11:17:24,495 [screen.py:__init__()] - Screen resolution: 800x480
2023-10-30 11:17:24,497 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-10-30 11:17:26,193 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-10-30 11:17:26,211 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-10-30 11:17:26,225 [screen.py:initial_connection()] - Default printer: None
2023-10-30 11:17:26,226 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-10-30 11:17:26,227 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-10-30 11:17:26,323 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-30 11:17:26,346 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-10-30 11:17:26,386 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 11:17:26,414 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-10-30 11:17:26,417 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-10-30 11:17:26,437 [_logging.py:info()] - Websocket connected
2023-10-30 11:17:26,438 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-10-30 11:17:26,751 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 11:17:26,769 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 11:17:26,771 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-30 11:17:26,791 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-30 11:17:26,793 [printer.py:configure_cameras()] - Cameras: []
2023-10-30 11:17:26,793 [screen.py:init_printer()] - Klipper not connected
2023-10-30 11:17:30,257 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 11:17:30,280 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 11:17:30,283 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-30 11:17:30,304 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-30 11:17:30,307 [printer.py:configure_cameras()] - Cameras: []
2023-10-30 11:17:30,307 [screen.py:init_printer()] - Klipper not connected
2023-10-30 11:17:33,263 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 11:17:33,292 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 11:17:33,297 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-30 11:17:33,346 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-30 11:17:33,347 [printer.py:configure_cameras()] - Cameras: []
2023-10-30 11:17:33,389 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2023-10-30 11:17:36,271 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 11:17:36,304 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 11:17:36,307 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-30 11:17:36,339 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-30 11:17:36,341 [printer.py:configure_cameras()] - Cameras: []
2023-10-30 11:17:36,360 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-30 11:17:36,392 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-30 11:17:36,396 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew'}, 'gcode_macro PRINT_END': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.460'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n0.008750, 0.020000, 0.007500, -0.000625, 0.062500\n-0.031875, -0.030000, -0.035000, -0.029375, -0.010000\n-0.047500, -0.053125, -0.066250, -0.055625, -0.064375\n-0.021250, -0.016250, -0.037500, -0.058125, -0.076875\n0.096875, 0.055000, 0.016250, -0.024375, -0.061875', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '320.0', 'min_y': '12.0', 'max_y': '320.0'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.00875, 0.02, 0.0075, -0.000625, 0.0625], [-0.031875, -0.03, -0.035, -0.029375, -0.01], [-0.0475, -0.053125, -0.06625, -0.055625, -0.064375], [-0.02125, -0.01625, -0.0375, -0.058125, -0.076875], [0.096875, 0.055, 0.01625, -0.024375, -0.061875]], 'min_x': 35.0, 'max_x': 320.0, 'min_y': 12.0, 'max_y': 320.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.46, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-30 11:17:36,401 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-30 11:17:36,401 [printer.py:reinit()] - # Extruders: 1
2023-10-30 11:17:36,401 [printer.py:reinit()] - # Temperature devices: 5
2023-10-30 11:17:36,402 [printer.py:reinit()] - # Fans: 2
2023-10-30 11:17:36,402 [printer.py:reinit()] - # Output pins: 1
2023-10-30 11:17:36,402 [printer.py:reinit()] - # Leds: 0
2023-10-30 11:17:36,425 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-30 11:17:36,428 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-30 11:17:36,707 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-30 11:17:36,728 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 11:17:36,729 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-30 11:17:36,730 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-30 11:17:36,731 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-30 11:17:36,732 [screen.py:init_printer()] - Printer initialized
2023-10-30 11:17:36,733 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-30 11:17:36,733 [printer.py:change_state()] - Adding callback for state: startup
2023-10-30 11:17:42,252 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 11:17:42,254 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-30 11:17:47,255 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 11:17:47,256 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-30 11:17:52,265 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 11:17:52,267 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-30 11:17:57,268 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 11:17:57,281 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-30 11:18:02,252 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 11:18:02,254 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-30 11:18:07,252 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 11:18:07,254 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-30 11:18:12,259 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 11:18:12,261 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-30 11:18:17,252 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 11:18:17,253 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-30 11:28:40,429 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 11:28:40,432 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-30 11:28:45,427 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 11:28:45,430 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-30 11:28:50,411 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 11:28:50,413 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-30 11:28:55,434 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 11:28:55,436 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-30 11:29:00,431 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 11:29:00,434 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-30 11:29:05,422 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 11:29:05,424 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-30 11:29:10,411 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 11:29:10,413 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-30 11:29:15,427 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 11:29:15,430 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-30 11:29:20,431 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 11:29:20,434 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-30 11:29:23,080 [printer.py:change_state()] - Changing state from 'startup' to 'error'
2023-10-30 11:29:23,081 [printer.py:change_state()] - Adding callback for state: error
2023-10-30 11:29:23,088 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 11:29:23,211 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-30 11:29:25,431 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 11:29:25,433 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-30 11:29:30,423 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 11:29:30,426 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-30 11:29:35,421 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 11:29:35,424 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-30 11:29:40,429 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 11:29:40,432 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-30 11:29:45,412 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 11:29:45,414 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-30 11:29:49,053 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2023-10-30 11:29:49,054 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-30 11:29:49,055 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-30 11:29:49,059 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 11:29:49,162 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-30 11:29:50,420 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 11:29:50,422 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-30 11:29:52,411 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 11:29:52,430 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 11:29:52,433 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-30 11:29:52,454 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-30 11:29:52,456 [printer.py:configure_cameras()] - Cameras: []
2023-10-30 11:29:52,482 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-30 11:29:52,522 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-30 11:29:52,526 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew'}, 'gcode_macro PRINT_END': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.460'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n0.008750, 0.020000, 0.007500, -0.000625, 0.062500\n-0.031875, -0.030000, -0.035000, -0.029375, -0.010000\n-0.047500, -0.053125, -0.066250, -0.055625, -0.064375\n-0.021250, -0.016250, -0.037500, -0.058125, -0.076875\n0.096875, 0.055000, 0.016250, -0.024375, -0.061875', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '320.0', 'min_y': '12.0', 'max_y': '320.0'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.00875, 0.02, 0.0075, -0.000625, 0.0625], [-0.031875, -0.03, -0.035, -0.029375, -0.01], [-0.0475, -0.053125, -0.06625, -0.055625, -0.064375], [-0.02125, -0.01625, -0.0375, -0.058125, -0.076875], [0.096875, 0.055, 0.01625, -0.024375, -0.061875]], 'min_x': 35.0, 'max_x': 320.0, 'min_y': 12.0, 'max_y': 320.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.46, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-30 11:29:52,532 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-30 11:29:52,533 [printer.py:reinit()] - # Extruders: 1
2023-10-30 11:29:52,533 [printer.py:reinit()] - # Temperature devices: 5
2023-10-30 11:29:52,534 [printer.py:reinit()] - # Fans: 2
2023-10-30 11:29:52,534 [printer.py:reinit()] - # Output pins: 1
2023-10-30 11:29:52,535 [printer.py:reinit()] - # Leds: 0
2023-10-30 11:29:52,567 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-30 11:29:52,570 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-30 11:29:52,833 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-30 11:29:52,854 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 11:29:52,856 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-30 11:29:52,857 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-30 11:29:52,857 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-30 11:29:52,859 [screen.py:init_printer()] - Printer initialized
2023-10-30 11:29:52,860 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-30 11:29:52,860 [printer.py:change_state()] - Adding callback for state: startup
2023-10-30 11:29:53,765 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-30 11:29:53,766 [printer.py:change_state()] - Adding callback for state: ready
2023-10-30 11:29:53,771 [screen.py:_load_panel()] - Loading panel: main_menu
2023-10-30 11:29:53,905 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-30 11:29:53,918 [main_menu.py:add_device()] - Adding device: extruder
2023-10-30 11:29:53,930 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-30 11:29:53,940 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-30 11:29:53,950 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-30 11:29:53,960 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-30 11:29:53,970 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-30 11:29:54,039 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-30 11:29:54,042 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: []
2023-10-30 11:29:55,412 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 11:29:55,440 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-30 11:29:55,462 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-30 11:29:55,464 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-30 11:29:58,430 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 11:29:58,498 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-30 11:29:58,534 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-30 11:29:58,538 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-30 11:40:01,986 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2023-10-30 11:40:13,415 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-30 11:40:13,416 [printer.py:change_state()] - Adding callback for state: printing
2023-10-30 11:40:13,442 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-30 11:40:13,448 [screen.py:_load_panel()] - Loading panel: job_status
2023-10-30 11:40:13,676 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-30 11:40:13,687 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-30 11:40:13,714 [job_status.py:update_file_metadata()] - Update Metadata. File: 3x3in-calibration-test-v3.gcode Size: 100927
2023-10-30 11:40:13,729 [job_status.py:show_file_thumbnail()] - 3x3in-calibration-test-v3.gcode
2023-10-30 11:40:14,282 [files.py:add_file()] - File already exists: 3x3in-calibration-test-v3.gcode
2023-10-30 11:40:19,185 [printer.py:change_state()] - Changing state from 'printing' to 'shutdown'
2023-10-30 11:40:19,186 [printer.py:change_state()] - Adding callback for state: shutdown
2023-10-30 11:40:19,228 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 11:40:19,298 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-65-g4a14962
2023-10-30 11:17:20,001 [screen.py:main()] - Python version: 3.9
2023-10-30 11:17:20,002 [screen.py:main()] - KlipperScreen version: v0.3.6-65-g4a14962
2023-10-30 11:17:20,017 [functions.py:detect_desktop_environment()] - Error:
'XDG_CURRENT_DESKTOP'

Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
2023-10-30 11:17:20,339 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-10-30 11:17:20,342 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2023-10-30 11:17:20,378 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-10-30 11:17:20,500 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-10-30 11:17:20,501 [config.py:install_language()] - Using system lang
2023-10-30 11:17:20,502 [config.py:install_language()] - Using lang en
2023-10-30 11:17:20,540 [screen.py:__init__()] - Screen resolution: 800x480
2023-10-30 11:17:20,544 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-10-30 11:17:21,606 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-10-30 11:17:21,618 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-10-30 11:17:21,628 [screen.py:initial_connection()] - Default printer: None
2023-10-30 11:17:21,628 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-10-30 11:17:21,629 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-10-30 11:17:21,702 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-30 11:17:21,715 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-10-30 11:17:21,747 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 11:17:21,771 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-10-30 11:17:21,773 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-10-30 11:17:21,787 [_logging.py:info()] - Websocket connected
2023-10-30 11:17:21,788 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-10-30 11:17:22,042 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 11:17:22,060 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 11:17:22,062 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-30 11:17:22,079 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-30 11:17:22,081 [printer.py:configure_cameras()] - Cameras: []
2023-10-30 11:17:22,101 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-30 11:17:22,271 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-30 11:17:22,275 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew'}, 'gcode_macro PRINT_END': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.460'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n0.008750, 0.020000, 0.007500, -0.000625, 0.062500\n-0.031875, -0.030000, -0.035000, -0.029375, -0.010000\n-0.047500, -0.053125, -0.066250, -0.055625, -0.064375\n-0.021250, -0.016250, -0.037500, -0.058125, -0.076875\n0.096875, 0.055000, 0.016250, -0.024375, -0.061875', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '320.0', 'min_y': '12.0', 'max_y': '320.0'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.00875, 0.02, 0.0075, -0.000625, 0.0625], [-0.031875, -0.03, -0.035, -0.029375, -0.01], [-0.0475, -0.053125, -0.06625, -0.055625, -0.064375], [-0.02125, -0.01625, -0.0375, -0.058125, -0.076875], [0.096875, 0.055, 0.01625, -0.024375, -0.061875]], 'min_x': 35.0, 'max_x': 320.0, 'min_y': 12.0, 'max_y': 320.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.46, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-30 11:17:22,280 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-30 11:17:22,280 [printer.py:reinit()] - # Extruders: 1
2023-10-30 11:17:22,280 [printer.py:reinit()] - # Temperature devices: 5
2023-10-30 11:17:22,281 [printer.py:reinit()] - # Fans: 2
2023-10-30 11:17:22,281 [printer.py:reinit()] - # Output pins: 1
2023-10-30 11:17:22,281 [printer.py:reinit()] - # Leds: 0
2023-10-30 11:17:22,304 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-30 11:17:22,307 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-30 11:17:22,587 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-30 11:17:22,609 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 11:17:22,636 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-30 11:17:22,657 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-30 11:17:22,659 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-30 11:17:22,660 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-30 11:17:22,660 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-30 11:17:22,661 [screen.py:init_printer()] - Printer initialized
2023-10-30 11:17:22,662 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-10-30 11:17:22,663 [printer.py:change_state()] - Adding callback for state: ready
2023-10-30 11:17:22,670 [screen.py:_load_panel()] - Loading panel: main_menu
2023-10-30 11:17:22,803 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-30 11:17:22,816 [main_menu.py:add_device()] - Adding device: extruder
2023-10-30 11:17:22,828 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-30 11:17:22,839 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-30 11:17:22,850 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-30 11:17:22,861 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-30 11:17:22,872 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-30 11:17:22,941 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-30 13:19:12,331 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2023-10-30 13:19:12,332 [printer.py:change_state()] - Adding callback for state: shutdown
2023-10-30 13:19:12,363 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 13:19:12,452 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-65-g4a14962
2023-10-30 13:17:24,563 [screen.py:main()] - Python version: 3.9
2023-10-30 13:17:24,564 [screen.py:main()] - KlipperScreen version: v0.3.6-65-g4a14962
2023-10-30 13:17:24,573 [functions.py:detect_desktop_environment()] - Error:
'XDG_CURRENT_DESKTOP'

Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
2023-10-30 13:17:24,826 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-10-30 13:17:24,829 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2023-10-30 13:17:24,854 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-10-30 13:17:24,957 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-10-30 13:17:24,958 [config.py:install_language()] - Using system lang
2023-10-30 13:17:24,959 [config.py:install_language()] - Using lang en
2023-10-30 13:17:25,004 [screen.py:__init__()] - Screen resolution: 800x480
2023-10-30 13:17:25,007 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-10-30 13:17:26,619 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-10-30 13:17:26,636 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-10-30 13:17:26,650 [screen.py:initial_connection()] - Default printer: None
2023-10-30 13:17:26,651 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-10-30 13:17:26,651 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-10-30 13:17:26,744 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-30 13:17:26,769 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-10-30 13:17:26,807 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 13:17:26,831 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-10-30 13:17:26,833 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-10-30 13:17:26,855 [_logging.py:info()] - Websocket connected
2023-10-30 13:17:26,856 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-10-30 13:17:27,223 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 13:17:27,247 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 13:17:27,250 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-30 13:17:27,271 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-30 13:17:27,274 [printer.py:configure_cameras()] - Cameras: []
2023-10-30 13:17:27,274 [screen.py:init_printer()] - Klipper not connected
2023-10-30 13:17:31,007 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 13:17:31,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 13:17:31,033 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-30 13:17:31,052 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-30 13:17:31,054 [printer.py:configure_cameras()] - Cameras: []
2023-10-30 13:17:31,054 [screen.py:init_printer()] - Klipper not connected
2023-10-30 13:17:34,012 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 13:17:34,037 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 13:17:34,040 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-30 13:17:34,063 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-30 13:17:34,065 [printer.py:configure_cameras()] - Cameras: []
2023-10-30 13:17:34,091 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-30 13:17:34,140 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-30 13:17:34,144 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew'}, 'gcode_macro PRINT_END': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.460'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n0.008750, 0.020000, 0.007500, -0.000625, 0.062500\n-0.031875, -0.030000, -0.035000, -0.029375, -0.010000\n-0.047500, -0.053125, -0.066250, -0.055625, -0.064375\n-0.021250, -0.016250, -0.037500, -0.058125, -0.076875\n0.096875, 0.055000, 0.016250, -0.024375, -0.061875', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '320.0', 'min_y': '12.0', 'max_y': '320.0'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.00875, 0.02, 0.0075, -0.000625, 0.0625], [-0.031875, -0.03, -0.035, -0.029375, -0.01], [-0.0475, -0.053125, -0.06625, -0.055625, -0.064375], [-0.02125, -0.01625, -0.0375, -0.058125, -0.076875], [0.096875, 0.055, 0.01625, -0.024375, -0.061875]], 'min_x': 35.0, 'max_x': 320.0, 'min_y': 12.0, 'max_y': 320.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.46, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-30 13:17:34,150 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-30 13:17:34,151 [printer.py:reinit()] - # Extruders: 1
2023-10-30 13:17:34,151 [printer.py:reinit()] - # Temperature devices: 5
2023-10-30 13:17:34,152 [printer.py:reinit()] - # Fans: 2
2023-10-30 13:17:34,152 [printer.py:reinit()] - # Output pins: 1
2023-10-30 13:17:34,153 [printer.py:reinit()] - # Leds: 0
2023-10-30 13:17:34,187 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-30 13:17:34,190 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-30 13:17:34,449 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-30 13:17:34,473 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 13:17:34,475 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-30 13:17:34,476 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-30 13:17:34,477 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-30 13:17:34,478 [screen.py:init_printer()] - Printer initialized
2023-10-30 13:17:34,479 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-30 13:17:34,480 [printer.py:change_state()] - Adding callback for state: startup
2023-10-30 13:17:36,385 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-30 13:17:36,385 [printer.py:change_state()] - Adding callback for state: ready
2023-10-30 13:17:36,393 [screen.py:_load_panel()] - Loading panel: main_menu
2023-10-30 13:17:36,550 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-30 13:17:36,563 [main_menu.py:add_device()] - Adding device: extruder
2023-10-30 13:17:36,574 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-30 13:17:36,585 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-30 13:17:36,595 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-30 13:17:36,605 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-30 13:17:36,615 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-30 13:17:36,685 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-30 13:17:36,688 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: []
2023-10-30 13:17:40,009 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 13:17:40,038 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-30 13:17:40,071 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-30 13:17:40,073 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-30 14:08:08,946 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2023-10-30 14:08:14,796 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-30 14:08:14,796 [printer.py:change_state()] - Adding callback for state: printing
2023-10-30 14:08:14,816 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-30 14:08:14,820 [screen.py:_load_panel()] - Loading panel: job_status
2023-10-30 14:08:15,056 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-30 14:08:15,067 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-30 14:08:15,097 [job_status.py:update_file_metadata()] - Update Metadata. File: 3x3in-calibration-test-v3.gcode Size: 100927
2023-10-30 14:08:15,111 [job_status.py:show_file_thumbnail()] - 3x3in-calibration-test-v3.gcode
2023-10-30 14:11:27,799 [screen.py:show_popup_message()] - error: // skew_correction:  Load failed, unknown profile [DASkew]
2023-10-30 14:12:09,624 [screen.py:_load_panel()] - Loading panel: fine_tune
2023-10-30 14:12:09,775 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2023-10-30 14:12:28,116 [screen.py:_menu_go_back()] - #### Menu go home
2023-10-30 14:12:28,215 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-30 14:12:28,252 [job_status.py:update_file_metadata()] - Update Metadata. File: 3x3in-calibration-test-v3.gcode Size: 100927
2023-10-30 14:12:28,274 [job_status.py:show_file_thumbnail()] - 3x3in-calibration-test-v3.gcode
2023-10-30 14:12:30,339 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2023-10-30 14:12:39,234 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2023-10-30 14:12:47,628 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2023-10-30 14:12:49,652 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2023-10-30 14:12:51,261 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2023-10-30 14:12:53,108 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2023-10-30 14:13:45,092 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-10-30 14:13:46,765 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-10-30 14:22:16,310 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z=0 MOVE=1'}
2023-10-30 14:29:37,212 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-30 14:29:37,313 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-30 14:29:37,349 [job_status.py:update_file_metadata()] - Update Metadata. File: 3x3in-calibration-test-v3.gcode Size: 100927
2023-10-30 14:29:37,376 [job_status.py:show_file_thumbnail()] - 3x3in-calibration-test-v3.gcode
2023-10-30 14:29:40,527 [KlippyWebsocket.py:print_pause()] - Sending printer.print.pause
2023-10-30 14:29:44,136 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-10-30 14:29:44,137 [printer.py:change_state()] - Adding callback for state: paused
2023-10-30 14:29:44,148 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-10-30 14:29:44,220 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 14:29:44,425 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-30 14:29:44,437 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-10-30 14:29:44,452 [job_status.py:update_file_metadata()] - Update Metadata. File: 3x3in-calibration-test-v3.gcode Size: 100927
2023-10-30 14:29:44,461 [job_status.py:show_file_thumbnail()] - 3x3in-calibration-test-v3.gcode
2023-10-30 14:29:44,470 [screen.py:_load_panel()] - Loading panel: extrude
2023-10-30 14:29:44,596 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-10-30 14:30:27,212 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-30 14:30:27,314 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-30 14:30:27,350 [job_status.py:update_file_metadata()] - Update Metadata. File: 3x3in-calibration-test-v3.gcode Size: 100927
2023-10-30 14:30:27,372 [job_status.py:show_file_thumbnail()] - 3x3in-calibration-test-v3.gcode
2023-10-30 14:30:28,898 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=834, height=480)
2023-10-30 14:30:30,155 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-30 14:30:30,156 [job_status.py:cancel_confirm()] - Canceling print
2023-10-30 14:30:30,158 [job_status.py:set_state()] - Changing job_status state from 'paused' to 'cancelling'
2023-10-30 14:30:30,169 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-10-30 14:30:30,263 [printer.py:change_state()] - Changing state from 'paused' to 'ready'
2023-10-30 14:30:30,264 [printer.py:change_state()] - Adding callback for state: ready
2023-10-30 14:30:30,281 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-10-30 14:30:31,508 [job_status.py:close_panel()] - Closing job_status panel
2023-10-30 14:30:31,513 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 14:30:31,637 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-30 14:30:31,652 [main_menu.py:add_device()] - Adding device: extruder
2023-10-30 14:30:31,662 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-30 14:30:31,672 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-30 14:30:31,682 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-30 14:30:31,692 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-30 14:30:31,702 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-30 14:30:31,771 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-30 14:30:32,806 [screen.py:_load_panel()] - Loading panel: move
2023-10-30 14:30:32,963 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-30 14:30:36,588 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-10-30 14:30:36,600 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-30 14:30:38,765 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-10-30 14:30:38,773 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-30 14:32:08,093 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-30 14:32:08,196 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-30 14:33:09,564 [files.py:_callback()] - Error in getting metadata for .thumbs/EBB36 1.0 orbiter 2.0 mount strain relief-32x32.png. Retrying in 6 seconds
2023-10-30 14:33:09,569 [files.py:_callback()] - Error in getting metadata for .thumbs/EBB36 1.0 orbiter 2.0 mount strain relief-400x300.png. Retrying in 6 seconds
2023-10-30 14:33:09,703 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-30 14:33:09,704 [printer.py:change_state()] - Adding callback for state: printing
2023-10-30 14:33:09,729 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 14:33:09,948 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-30 14:33:09,960 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-30 14:33:09,988 [job_status.py:update_file_metadata()] - Update Metadata. File: EBB36 1.0 orbiter 2.0 mount strain relief.gcode Size: 4346844
2023-10-30 14:33:09,997 [job_status.py:show_file_thumbnail()] - EBB36 1.0 orbiter 2.0 mount strain relief.gcode
2023-10-30 14:34:41,207 [screen.py:show_popup_message()] - error: // skew_correction:  Load failed, unknown profile [DASkew]
2023-10-30 15:32:08,317 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-30 15:37:03,783 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-30 15:37:03,826 [screen.py:wake_screen()] - Screen wake up
2023-10-30 15:37:05,447 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=834, height=480)
2023-10-30 15:37:10,763 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-30 15:37:10,764 [job_status.py:cancel_confirm()] - Canceling print
2023-10-30 15:37:10,765 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-10-30 15:37:10,775 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-10-30 15:37:11,237 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-10-30 15:37:13,978 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-30 15:37:13,978 [printer.py:change_state()] - Adding callback for state: ready
2023-10-30 15:37:30,879 [job_status.py:close_panel()] - Closing job_status panel
2023-10-30 15:37:30,889 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 15:37:31,050 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-30 15:37:31,063 [main_menu.py:add_device()] - Adding device: extruder
2023-10-30 15:37:31,073 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-30 15:37:31,084 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-30 15:37:31,094 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-30 15:37:31,104 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-30 15:37:31,114 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-30 15:37:31,182 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-30 15:37:34,010 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 15:37:34,155 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-30 15:37:36,760 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-25 F600'}
2023-10-30 15:37:36,768 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-30 15:37:36,805 [screen.py:show_popup_message()] - error: Move out of range: 165.729 197.898 -13.074 [5208.772]
2023-10-30 15:37:39,592 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-10-30 15:37:39,598 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-30 15:37:41,647 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-10-30 15:37:41,652 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-30 15:40:52,024 [files.py:_callback()] - Error in getting metadata for .thumbs/EBB36 1.0 orbiter 2.0 mount strain relief-32x32.png. Retrying in 6 seconds
2023-10-30 15:40:52,029 [files.py:_callback()] - Error in getting metadata for .thumbs/EBB36 1.0 orbiter 2.0 mount strain relief-400x300.png. Retrying in 6 seconds
2023-10-30 15:40:52,149 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-30 15:40:52,149 [printer.py:change_state()] - Adding callback for state: printing
2023-10-30 15:40:52,163 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 15:40:52,380 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-30 15:40:52,393 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-30 15:40:52,411 [job_status.py:update_file_metadata()] - Update Metadata. File: EBB36 1.0 orbiter 2.0 mount strain relief.gcode Size: 2304531
2023-10-30 15:40:52,420 [job_status.py:show_file_thumbnail()] - EBB36 1.0 orbiter 2.0 mount strain relief.gcode
2023-10-30 15:40:53,010 [files.py:add_file()] - File already exists: EBB36 1.0 orbiter 2.0 mount strain relief.gcode
2023-10-30 15:42:11,976 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 15:42:12,120 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2023-10-30 15:42:16,827 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2023-10-30 15:42:47,031 [screen.py:show_popup_message()] - error: // skew_correction:  Load failed, unknown profile [DASkew]
2023-10-30 15:42:54,337 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2023-10-30 15:42:55,682 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-10-30 15:42:58,626 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-10-30 15:43:27,560 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-30 15:43:27,616 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-30 15:43:27,636 [job_status.py:update_file_metadata()] - Update Metadata. File: EBB36 1.0 orbiter 2.0 mount strain relief.gcode Size: 2304531
2023-10-30 15:43:27,645 [job_status.py:show_file_thumbnail()] - EBB36 1.0 orbiter 2.0 mount strain relief.gcode
2023-10-30 16:16:31,481 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-10-30 16:16:35,723 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-30 16:16:35,723 [printer.py:change_state()] - Adding callback for state: ready
2023-10-30 16:22:51,425 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffa11b7480 (GtkDialog at 0x4da7110)>
2023-10-30 16:22:51,465 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2023-10-30 16:22:57,721 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-30 16:22:57,722 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-30 16:22:57,724 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-30 16:22:57,729 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-30 16:22:57,730 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 16:22:57,799 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-30 16:23:01,334 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 16:23:01,351 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 16:23:01,353 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-30 16:23:01,371 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-30 16:23:01,373 [printer.py:configure_cameras()] - Cameras: []
2023-10-30 16:23:01,392 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-30 16:23:01,425 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-30 16:23:01,429 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew'}, 'gcode_macro PRINT_END': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.440'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n0.008750, 0.028125, 0.015000, -0.000625, 0.031250\n-0.043750, -0.027500, -0.038750, -0.042500, -0.042500\n-0.054375, -0.058750, -0.078750, -0.075000, -0.105625\n-0.025625, -0.024375, -0.057500, -0.088750, -0.118125\n0.065625, 0.051875, 0.002500, -0.060625, -0.118125', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '320.0', 'min_y': '12.0', 'max_y': '320.0'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.00875, 0.028125, 0.015, -0.000625, 0.03125], [-0.04375, -0.0275, -0.03875, -0.0425, -0.0425], [-0.054375, -0.05875, -0.07875, -0.075, -0.105625], [-0.025625, -0.024375, -0.0575, -0.08875, -0.118125], [0.065625, 0.051875, 0.0025, -0.060625, -0.118125]], 'min_x': 35.0, 'max_x': 320.0, 'min_y': 12.0, 'max_y': 320.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.44, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-30 16:23:01,436 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-30 16:23:01,436 [printer.py:reinit()] - # Extruders: 1
2023-10-30 16:23:01,436 [printer.py:reinit()] - # Temperature devices: 5
2023-10-30 16:23:01,436 [printer.py:reinit()] - # Fans: 2
2023-10-30 16:23:01,437 [printer.py:reinit()] - # Output pins: 1
2023-10-30 16:23:01,437 [printer.py:reinit()] - # Leds: 0
2023-10-30 16:23:01,459 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-30 16:23:01,462 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-30 16:23:01,738 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-30 16:23:01,799 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 16:23:01,810 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-30 16:23:01,833 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-30 16:23:01,835 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-30 16:23:01,836 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-30 16:23:01,837 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-30 16:23:01,838 [screen.py:init_printer()] - Printer initialized
2023-10-30 16:23:01,839 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-30 16:23:01,840 [printer.py:change_state()] - Adding callback for state: startup
2023-10-30 16:23:02,421 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-30 16:23:02,421 [printer.py:change_state()] - Adding callback for state: ready
2023-10-30 16:23:02,429 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 16:23:02,546 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-30 16:23:02,559 [main_menu.py:add_device()] - Adding device: extruder
2023-10-30 16:23:02,569 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-30 16:23:02,580 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-30 16:23:02,590 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-30 16:23:02,599 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-30 16:23:02,609 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-30 16:23:02,679 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-30 16:23:13,870 [files.py:_callback()] - Error in getting metadata for .thumbs/Bambu_Mount-32x32.png. Retrying in 6 seconds
2023-10-30 16:23:13,876 [files.py:_callback()] - Error in getting metadata for .thumbs/Bambu_Mount-400x300.png. Retrying in 6 seconds
2023-10-30 16:23:13,953 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-30 16:23:13,954 [printer.py:change_state()] - Adding callback for state: printing
2023-10-30 16:23:13,979 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 16:23:14,233 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-30 16:23:14,245 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-30 16:23:14,263 [job_status.py:update_file_metadata()] - Update Metadata. File: Bambu_Mount.gcode Size: 1835408
2023-10-30 16:23:14,273 [job_status.py:show_file_thumbnail()] - Bambu_Mount.gcode
2023-10-30 16:25:08,073 [screen.py:show_popup_message()] - error: // skew_correction:  Load failed, unknown profile [DASkew]
2023-10-30 16:25:52,712 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2023-10-30 16:25:54,006 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-30 16:25:54,006 [job_status.py:cancel_confirm()] - Canceling print
2023-10-30 16:25:54,007 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-10-30 16:25:54,014 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-10-30 16:25:54,407 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-10-30 16:25:57,652 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-30 16:25:57,653 [printer.py:change_state()] - Adding callback for state: ready
2023-10-30 16:25:59,267 [job_status.py:close_panel()] - Closing job_status panel
2023-10-30 16:25:59,272 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 16:25:59,408 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-30 16:25:59,421 [main_menu.py:add_device()] - Adding device: extruder
2023-10-30 16:25:59,432 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-30 16:25:59,443 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-30 16:25:59,453 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-30 16:25:59,463 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-30 16:25:59,473 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-30 16:25:59,541 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-30 16:26:00,808 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 16:26:01,012 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-30 16:26:02,419 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-25 F600'}
2023-10-30 16:26:02,425 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-30 16:26:02,455 [screen.py:show_popup_message()] - error: Move out of range: 40.127 31.850 -24.700 [74.202]
2023-10-30 16:26:03,926 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-25 F600'}
2023-10-30 16:26:03,933 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-30 16:26:03,959 [screen.py:show_popup_message()] - error: Move out of range: 40.127 31.850 -24.700 [74.202]
2023-10-30 16:26:05,155 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-10-30 16:26:05,162 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-30 16:26:05,699 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-10-30 16:26:05,704 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-30 16:38:19,493 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2023-10-30 16:38:19,494 [printer.py:change_state()] - Adding callback for state: shutdown
2023-10-30 16:38:19,510 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 16:38:19,584 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-30 16:38:19,769 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2023-10-30 16:38:19,770 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-30 16:38:19,788 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-30 16:38:19,792 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 16:38:19,880 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-30 16:38:23,335 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 16:38:23,354 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 16:38:23,356 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-30 16:38:23,373 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-30 16:38:23,375 [printer.py:configure_cameras()] - Cameras: []
2023-10-30 16:38:23,395 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-30 16:38:23,427 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-30 16:38:23,431 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew'}, 'gcode_macro PRINT_END': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.440'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n0.008750, 0.028125, 0.015000, -0.000625, 0.031250\n-0.043750, -0.027500, -0.038750, -0.042500, -0.042500\n-0.054375, -0.058750, -0.078750, -0.075000, -0.105625\n-0.025625, -0.024375, -0.057500, -0.088750, -0.118125\n0.065625, 0.051875, 0.002500, -0.060625, -0.118125', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '320.0', 'min_y': '12.0', 'max_y': '320.0'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.00875, 0.028125, 0.015, -0.000625, 0.03125], [-0.04375, -0.0275, -0.03875, -0.0425, -0.0425], [-0.054375, -0.05875, -0.07875, -0.075, -0.105625], [-0.025625, -0.024375, -0.0575, -0.08875, -0.118125], [0.065625, 0.051875, 0.0025, -0.060625, -0.118125]], 'min_x': 35.0, 'max_x': 320.0, 'min_y': 12.0, 'max_y': 320.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.44, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-30 16:38:23,438 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-30 16:38:23,438 [printer.py:reinit()] - # Extruders: 1
2023-10-30 16:38:23,438 [printer.py:reinit()] - # Temperature devices: 5
2023-10-30 16:38:23,439 [printer.py:reinit()] - # Fans: 2
2023-10-30 16:38:23,439 [printer.py:reinit()] - # Output pins: 1
2023-10-30 16:38:23,439 [printer.py:reinit()] - # Leds: 0
2023-10-30 16:38:23,462 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-30 16:38:23,465 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-30 16:38:23,672 [KlippyRest.py:_do_request()] - 503 Server Error>>Klippy Disconnected for url>>http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor%20CANBOARD&temperature_sensor%20MCU&temperature_sensor%20SoC&temperature_sensor%20chamber&fan&heater_fan%20hotend_fan&output_pin%20caselight
2023-10-30 16:38:27,332 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 16:38:27,351 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 16:38:27,353 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-30 16:38:27,370 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-30 16:38:27,372 [printer.py:configure_cameras()] - Cameras: []
2023-10-30 16:38:27,392 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-30 16:38:27,428 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-30 16:38:27,432 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew'}, 'gcode_macro PRINT_END': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.440'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n0.008750, 0.028125, 0.015000, -0.000625, 0.031250\n-0.043750, -0.027500, -0.038750, -0.042500, -0.042500\n-0.054375, -0.058750, -0.078750, -0.075000, -0.105625\n-0.025625, -0.024375, -0.057500, -0.088750, -0.118125\n0.065625, 0.051875, 0.002500, -0.060625, -0.118125', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '320.0', 'min_y': '12.0', 'max_y': '320.0'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.00875, 0.028125, 0.015, -0.000625, 0.03125], [-0.04375, -0.0275, -0.03875, -0.0425, -0.0425], [-0.054375, -0.05875, -0.07875, -0.075, -0.105625], [-0.025625, -0.024375, -0.0575, -0.08875, -0.118125], [0.065625, 0.051875, 0.0025, -0.060625, -0.118125]], 'min_x': 35.0, 'max_x': 320.0, 'min_y': 12.0, 'max_y': 320.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.44, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-30 16:38:27,437 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-30 16:38:27,437 [printer.py:reinit()] - # Extruders: 1
2023-10-30 16:38:27,438 [printer.py:reinit()] - # Temperature devices: 5
2023-10-30 16:38:27,438 [printer.py:reinit()] - # Fans: 2
2023-10-30 16:38:27,438 [printer.py:reinit()] - # Output pins: 1
2023-10-30 16:38:27,438 [printer.py:reinit()] - # Leds: 0
2023-10-30 16:38:27,461 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-30 16:38:27,464 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-30 16:38:27,738 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-30 16:38:27,798 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 16:38:27,808 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-30 16:38:27,831 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-30 16:38:27,834 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-30 16:38:27,835 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-30 16:38:27,835 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-30 16:38:27,836 [screen.py:init_printer()] - Printer initialized
2023-10-30 16:38:27,837 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-30 16:38:27,838 [printer.py:change_state()] - Adding callback for state: startup
2023-10-30 16:38:28,422 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-30 16:38:28,423 [printer.py:change_state()] - Adding callback for state: ready
2023-10-30 16:38:28,430 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 16:38:28,547 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-30 16:38:28,560 [main_menu.py:add_device()] - Adding device: extruder
2023-10-30 16:38:28,571 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-30 16:38:28,581 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-30 16:38:28,591 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-30 16:38:28,601 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-30 16:38:28,611 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-30 16:38:28,681 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-30 16:47:22,875 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffa07207c0 (GtkDialog at 0x4f2dc60)>
2023-10-30 16:47:22,926 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2023-10-30 16:47:57,483 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-30 16:47:57,483 [printer.py:change_state()] - Adding callback for state: printing
2023-10-30 16:47:57,503 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-30 16:47:57,507 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 16:47:57,721 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-30 16:47:57,734 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-30 16:47:57,749 [job_status.py:update_file_metadata()] - Update Metadata. File: Bambu_Mount.gcode Size: 1838724
2023-10-30 16:47:57,758 [job_status.py:show_file_thumbnail()] - Bambu_Mount.gcode
2023-10-30 16:47:58,349 [files.py:add_file()] - File already exists: Bambu_Mount.gcode
2023-10-30 16:50:55,468 [screen.py:show_popup_message()] - error: // skew_correction:  Load failed, unknown profile [DASkew]
2023-10-30 16:51:16,306 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 16:51:16,514 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2023-10-30 16:51:18,792 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-10-30 17:46:36,886 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-30 17:46:36,887 [printer.py:change_state()] - Adding callback for state: ready
2023-10-30 17:51:19,317 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-30 18:44:18,261 [files.py:_callback()] - Error in getting metadata for .thumbs/Dragonburner tap adapter (1)-32x32.png. Retrying in 6 seconds
2023-10-30 18:44:18,264 [files.py:_callback()] - Error in getting metadata for .thumbs/Dragonburner tap adapter (1)-400x300.png. Retrying in 6 seconds
2023-10-30 18:44:18,476 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-30 18:44:18,477 [printer.py:change_state()] - Adding callback for state: printing
2023-10-30 18:44:18,481 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-30 18:44:18,516 [screen.py:wake_screen()] - Screen wake up
2023-10-30 18:44:18,573 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 18:44:18,794 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-30 18:44:18,806 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-30 18:44:18,823 [job_status.py:update_file_metadata()] - Update Metadata. File: Dragonburner tap adapter (1).gcode Size: 2322363
2023-10-30 18:44:18,832 [job_status.py:show_file_thumbnail()] - Dragonburner tap adapter (1).gcode
2023-10-30 18:49:11,071 [screen.py:show_popup_message()] - error: // skew_correction:  Load failed, unknown profile [DASkew]
2023-10-30 18:50:53,689 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 18:50:53,819 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2023-10-30 18:50:56,701 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-30 18:50:56,768 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-30 18:50:56,788 [job_status.py:update_file_metadata()] - Update Metadata. File: Dragonburner tap adapter (1).gcode Size: 2322363
2023-10-30 18:50:56,797 [job_status.py:show_file_thumbnail()] - Dragonburner tap adapter (1).gcode
2023-10-30 18:51:17,570 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2023-10-30 18:51:19,592 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-30 18:51:19,593 [job_status.py:cancel_confirm()] - Canceling print
2023-10-30 18:51:19,594 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-10-30 18:51:19,602 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-10-30 18:51:19,910 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-10-30 18:51:22,906 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-30 18:51:22,906 [printer.py:change_state()] - Adding callback for state: ready
2023-10-30 18:51:24,493 [job_status.py:close_panel()] - Closing job_status panel
2023-10-30 18:51:24,500 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 18:51:24,645 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-30 18:51:24,661 [main_menu.py:add_device()] - Adding device: extruder
2023-10-30 18:51:24,671 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-30 18:51:24,682 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-30 18:51:24,692 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-30 18:51:24,702 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-30 18:51:24,718 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-30 18:51:24,785 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-30 18:51:25,800 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 18:51:25,962 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-30 18:51:27,645 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-10-30 18:51:27,651 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-30 18:52:12,063 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-30 18:52:12,063 [printer.py:change_state()] - Adding callback for state: printing
2023-10-30 18:52:12,081 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 18:52:12,291 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-30 18:52:12,306 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-30 18:52:12,322 [job_status.py:update_file_metadata()] - Update Metadata. File: Dragonburner tap adapter (1).gcode Size: 2322363
2023-10-30 18:52:12,332 [job_status.py:show_file_thumbnail()] - Dragonburner tap adapter (1).gcode
2023-10-30 18:52:12,341 [files.py:_callback()] - Error in getting metadata for .thumbs/Dragonburner tap adapter (1)-32x32.png. Retrying in 6 seconds
2023-10-30 18:52:12,342 [files.py:_callback()] - Error in getting metadata for .thumbs/Dragonburner tap adapter (1)-400x300.png. Retrying in 6 seconds
2023-10-30 18:52:13,040 [files.py:add_file()] - File already exists: Dragonburner tap adapter (1).gcode
2023-10-30 18:53:37,751 [screen.py:show_popup_message()] - error: // skew_correction:  Load failed, unknown profile [DASkew]
2023-10-30 18:54:37,714 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2023-10-30 18:54:38,360 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-30 18:54:38,360 [job_status.py:cancel_confirm()] - Canceling print
2023-10-30 18:54:38,361 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-10-30 18:54:38,369 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-10-30 18:54:39,006 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-10-30 18:54:40,069 [job_status.py:close_panel()] - Closing job_status panel
2023-10-30 18:54:40,074 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 18:54:40,193 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-30 18:54:40,206 [main_menu.py:add_device()] - Adding device: extruder
2023-10-30 18:54:40,216 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-30 18:54:40,228 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-30 18:54:40,239 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-30 18:54:40,249 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-30 18:54:40,259 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-30 18:54:40,329 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-30 18:54:41,363 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 18:54:41,578 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-30 18:54:41,741 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-30 18:54:41,741 [printer.py:change_state()] - Adding callback for state: ready
2023-10-30 18:54:41,748 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 18:54:41,868 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-30 18:54:41,881 [main_menu.py:add_device()] - Adding device: extruder
2023-10-30 18:54:41,891 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-30 18:54:41,902 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-30 18:54:41,913 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-30 18:54:41,923 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-30 18:54:41,933 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-30 18:54:42,011 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-30 18:54:44,825 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 18:54:44,976 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-30 18:54:46,371 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-10-30 18:54:46,380 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-30 18:55:17,564 [screen.py:_load_panel()] - Loading panel: menu
2023-10-30 18:55:17,837 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2023-10-30 18:55:17,864 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2023-10-30 18:56:43,191 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-30 18:56:43,255 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-30 18:56:45,045 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-30 18:56:45,103 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-30 18:56:47,120 [screen.py:_load_panel()] - Loading panel: print
2023-10-30 18:56:47,158 [print.py:__init__()] - 24h time is True
2023-10-30 18:56:47,218 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2023-10-30 18:56:47,219 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-30 18:56:47,368 [print.py:_callback()] - newfiles: []
2023-10-30 18:56:47,368 [print.py:_callback()] - deletedfiles: ['.thumbs/Dragonburner tap adapter (1)-32x32.png', '.thumbs/Dragonburner tap adapter (1)-400x300.png']
2023-10-30 18:56:47,369 [print.py:_callback()] - updatefiles: []
2023-10-30 18:56:47,370 [print.py:_callback()] - newfiles: []
2023-10-30 18:56:47,370 [print.py:_callback()] - deletedfiles: ['.thumbs/Dragonburner tap adapter (1)-32x32.png']
2023-10-30 18:56:47,370 [print.py:_callback()] - updatefiles: []
2023-10-30 18:56:47,371 [print.py:_callback()] - newfiles: []
2023-10-30 18:56:47,372 [print.py:_callback()] - deletedfiles: ['.thumbs/Dragonburner tap adapter (1)-400x300.png']
2023-10-30 18:56:47,372 [print.py:_callback()] - updatefiles: []
2023-10-30 18:56:57,285 [KlippyGtk.py:Dialog()] - Showing dialog Print Dragonburner tap adapter (1).gcode (width=800, height=480)
2023-10-30 18:56:58,514 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-30 18:56:58,514 [print.py:confirm_print_response()] - Starting print: Dragonburner tap adapter (1).gcode
2023-10-30 18:56:58,514 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2023-10-30 18:56:58,634 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-30 18:56:58,634 [printer.py:change_state()] - Adding callback for state: printing
2023-10-30 18:56:58,647 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 18:56:58,860 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-30 18:56:58,872 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-30 18:56:58,893 [job_status.py:update_file_metadata()] - Update Metadata. File: Dragonburner tap adapter (1).gcode Size: 2389958
2023-10-30 18:56:58,902 [job_status.py:show_file_thumbnail()] - Dragonburner tap adapter (1).gcode
2023-10-30 18:59:14,110 [screen.py:show_popup_message()] - error: // skew_correction:  Load failed, unknown profile [DASkew]
2023-10-30 18:59:18,993 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2023-10-30 18:59:19,616 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-30 18:59:19,617 [job_status.py:cancel_confirm()] - Canceling print
2023-10-30 18:59:19,618 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-10-30 18:59:19,624 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-10-30 18:59:20,789 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-10-30 18:59:24,533 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-30 18:59:24,533 [printer.py:change_state()] - Adding callback for state: ready
2023-10-30 19:00:15,737 [print.py:_callback()] - newfiles: []
2023-10-30 19:00:15,737 [print.py:_callback()] - deletedfiles: []
2023-10-30 19:00:15,737 [print.py:_callback()] - updatefiles: ['Dragonburner tap adapter (1).gcode']
2023-10-30 19:00:15,738 [print.py:update_file()] - Updating file Dragonburner tap adapter (1).gcode
2023-10-30 19:00:15,929 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-30 19:00:15,930 [printer.py:change_state()] - Adding callback for state: printing
2023-10-30 19:00:15,949 [job_status.py:set_state()] - Changing job_status state from 'cancelled' to 'printing'
2023-10-30 19:00:16,020 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 19:00:16,241 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-30 19:00:16,252 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-30 19:00:16,267 [job_status.py:update_file_metadata()] - Update Metadata. File: Dragonburner tap adapter (1).gcode Size: 3617506
2023-10-30 19:00:16,276 [job_status.py:show_file_thumbnail()] - Dragonburner tap adapter (1).gcode
2023-10-30 19:00:16,710 [files.py:add_file()] - File already exists: Dragonburner tap adapter (1).gcode
2023-10-30 19:00:16,714 [print.py:_callback()] - newfiles: []
2023-10-30 19:00:16,714 [print.py:_callback()] - deletedfiles: []
2023-10-30 19:00:16,715 [print.py:_callback()] - updatefiles: ['Dragonburner tap adapter (1).gcode']
2023-10-30 19:00:16,715 [print.py:update_file()] - Updating file Dragonburner tap adapter (1).gcode
2023-10-30 19:00:16,728 [print.py:_callback()] - newfiles: []
2023-10-30 19:00:16,729 [print.py:_callback()] - deletedfiles: []
2023-10-30 19:00:16,729 [print.py:_callback()] - updatefiles: ['Dragonburner tap adapter (1).gcode']
2023-10-30 19:00:16,729 [print.py:update_file()] - Updating file Dragonburner tap adapter (1).gcode
2023-10-30 19:01:50,528 [screen.py:show_popup_message()] - error: // skew_correction:  Load failed, unknown profile [DASkew]
2023-10-30 19:06:54,348 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2023-10-30 19:06:55,208 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-30 19:06:55,209 [job_status.py:cancel_confirm()] - Canceling print
2023-10-30 19:06:55,210 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-10-30 19:06:55,216 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-10-30 19:06:55,519 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-10-30 19:06:58,265 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-30 19:06:58,266 [printer.py:change_state()] - Adding callback for state: ready
2023-10-30 19:07:00,475 [job_status.py:close_panel()] - Closing job_status panel
2023-10-30 19:07:00,484 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 19:07:00,624 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-30 19:07:00,637 [main_menu.py:add_device()] - Adding device: extruder
2023-10-30 19:07:00,647 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-30 19:07:00,658 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-30 19:07:00,668 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-30 19:07:00,679 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-30 19:07:00,690 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-30 19:07:00,759 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-30 19:07:01,769 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 19:07:01,921 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-30 19:07:06,886 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-10-30 19:07:06,892 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-30 19:08:15,436 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffa07013c0 (GtkDialog at 0x4d8ae70)>
2023-10-30 19:08:15,491 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2023-10-30 19:08:18,812 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-30 19:08:18,813 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-30 19:08:18,816 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-30 19:08:18,821 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-30 19:08:18,822 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 19:08:18,892 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-30 19:08:22,340 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 19:08:22,363 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 19:08:22,365 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-30 19:08:22,388 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-30 19:08:22,391 [printer.py:configure_cameras()] - Cameras: []
2023-10-30 19:08:22,416 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-30 19:08:22,454 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-30 19:08:22,458 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew'}, 'gcode_macro PRINT_END': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.420'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.008125, -0.016875, -0.038750, -0.033750, 0.040000\n-0.088750, -0.093750, -0.108750, -0.098125, -0.063750\n-0.087500, -0.107500, -0.133125, -0.126250, -0.130625\n-0.015000, -0.033750, -0.073750, -0.106250, -0.130000\n0.127500, 0.110000, 0.049375, -0.008750, -0.057500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '320.0', 'min_y': '12.0', 'max_y': '320.0'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.008125, -0.016875, -0.03875, -0.03375, 0.04], [-0.08875, -0.09375, -0.10875, -0.098125, -0.06375], [-0.0875, -0.1075, -0.133125, -0.12625, -0.130625], [-0.015, -0.03375, -0.07375, -0.10625, -0.13], [0.1275, 0.11, 0.049375, -0.00875, -0.0575]], 'min_x': 35.0, 'max_x': 320.0, 'min_y': 12.0, 'max_y': 320.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.42, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-30 19:08:22,465 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-30 19:08:22,466 [printer.py:reinit()] - # Extruders: 1
2023-10-30 19:08:22,466 [printer.py:reinit()] - # Temperature devices: 5
2023-10-30 19:08:22,466 [printer.py:reinit()] - # Fans: 2
2023-10-30 19:08:22,466 [printer.py:reinit()] - # Output pins: 1
2023-10-30 19:08:22,467 [printer.py:reinit()] - # Leds: 0
2023-10-30 19:08:22,489 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-30 19:08:22,492 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-30 19:08:22,763 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-30 19:08:22,814 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 19:08:22,824 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-30 19:08:22,844 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-30 19:08:22,846 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-30 19:08:22,847 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-30 19:08:22,847 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-30 19:08:22,848 [screen.py:init_printer()] - Printer initialized
2023-10-30 19:08:22,849 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-30 19:08:22,850 [printer.py:change_state()] - Adding callback for state: startup
2023-10-30 19:08:23,443 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-30 19:08:23,444 [printer.py:change_state()] - Adding callback for state: ready
2023-10-30 19:08:23,449 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 19:08:23,569 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-30 19:08:23,582 [main_menu.py:add_device()] - Adding device: extruder
2023-10-30 19:08:23,592 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-30 19:08:23,602 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-30 19:08:23,613 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-30 19:08:23,623 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-30 19:08:23,633 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-30 19:08:23,706 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-30 19:09:35,041 [print.py:_callback()] - newfiles: []
2023-10-30 19:09:35,042 [print.py:_callback()] - deletedfiles: []
2023-10-30 19:09:35,042 [print.py:_callback()] - updatefiles: ['Dragonburner tap adapter (1).gcode']
2023-10-30 19:09:35,042 [print.py:update_file()] - Updating file Dragonburner tap adapter (1).gcode
2023-10-30 19:09:35,153 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-30 19:09:35,154 [printer.py:change_state()] - Adding callback for state: printing
2023-10-30 19:09:35,183 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 19:09:35,436 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-30 19:09:35,448 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-30 19:09:35,463 [job_status.py:update_file_metadata()] - Update Metadata. File: Dragonburner tap adapter (1).gcode Size: 3709519
2023-10-30 19:09:35,472 [job_status.py:show_file_thumbnail()] - Dragonburner tap adapter (1).gcode
2023-10-30 19:09:36,016 [files.py:add_file()] - File already exists: Dragonburner tap adapter (1).gcode
2023-10-30 19:09:36,019 [print.py:_callback()] - newfiles: []
2023-10-30 19:09:36,020 [print.py:_callback()] - deletedfiles: []
2023-10-30 19:09:36,020 [print.py:_callback()] - updatefiles: ['Dragonburner tap adapter (1).gcode']
2023-10-30 19:09:36,021 [print.py:update_file()] - Updating file Dragonburner tap adapter (1).gcode
2023-10-30 19:09:36,032 [print.py:_callback()] - newfiles: []
2023-10-30 19:09:36,034 [print.py:_callback()] - deletedfiles: []
2023-10-30 19:09:36,034 [print.py:_callback()] - updatefiles: ['Dragonburner tap adapter (1).gcode']
2023-10-30 19:09:36,034 [print.py:update_file()] - Updating file Dragonburner tap adapter (1).gcode
2023-10-30 19:11:12,305 [screen.py:show_popup_message()] - error: // skew_correction:  Load failed, unknown profile [DASkew]
2023-10-30 19:11:50,840 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2023-10-30 19:11:51,849 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-30 19:11:51,849 [job_status.py:cancel_confirm()] - Canceling print
2023-10-30 19:11:51,850 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-10-30 19:11:51,856 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-10-30 19:11:52,292 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-10-30 19:11:55,288 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-30 19:11:55,288 [printer.py:change_state()] - Adding callback for state: ready
2023-10-30 19:11:56,374 [job_status.py:close_panel()] - Closing job_status panel
2023-10-30 19:11:56,388 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 19:11:56,580 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-30 19:11:56,593 [main_menu.py:add_device()] - Adding device: extruder
2023-10-30 19:11:56,603 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-30 19:11:56,613 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-30 19:11:56,624 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-30 19:11:56,634 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-30 19:11:56,644 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-30 19:11:56,712 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-30 19:11:58,024 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 19:11:58,174 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-30 19:11:59,575 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-25 F600'}
2023-10-30 19:11:59,585 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-30 19:11:59,608 [screen.py:show_popup_message()] - error: Move out of range: 115.227 79.829 -24.700 [68.228]
2023-10-30 19:12:02,039 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-10-30 19:12:02,044 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-30 19:13:36,862 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-30 19:13:36,919 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-30 19:13:39,984 [screen.py:_load_panel()] - Loading panel: gcode_macros
2023-10-30 19:13:40,063 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > gcode_macros
2023-10-30 19:13:42,842 [screen.py:show_popup_message()] - echo: Level_Session 
2023-10-30 19:13:42,855 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Level_Session'}
2023-10-30 19:21:13,961 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffa117ca80 (GtkDialog at 0x4ee16f0)>
2023-10-30 19:21:13,990 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2023-10-30 19:22:02,336 [print.py:_callback()] - newfiles: []
2023-10-30 19:22:02,336 [print.py:_callback()] - deletedfiles: []
2023-10-30 19:22:02,337 [print.py:_callback()] - updatefiles: ['Dragonburner tap adapter (1).gcode']
2023-10-30 19:22:02,337 [print.py:update_file()] - Updating file Dragonburner tap adapter (1).gcode
2023-10-30 19:22:02,525 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-30 19:22:02,526 [printer.py:change_state()] - Adding callback for state: printing
2023-10-30 19:22:02,539 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-30 19:22:02,550 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 19:22:02,776 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-30 19:22:02,788 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-30 19:22:02,804 [job_status.py:update_file_metadata()] - Update Metadata. File: Dragonburner tap adapter (1).gcode Size: 3595745
2023-10-30 19:22:02,814 [job_status.py:show_file_thumbnail()] - Dragonburner tap adapter (1).gcode
2023-10-30 19:22:03,324 [files.py:add_file()] - File already exists: Dragonburner tap adapter (1).gcode
2023-10-30 19:22:03,327 [print.py:_callback()] - newfiles: []
2023-10-30 19:22:03,328 [print.py:_callback()] - deletedfiles: []
2023-10-30 19:22:03,328 [print.py:_callback()] - updatefiles: ['Dragonburner tap adapter (1).gcode']
2023-10-30 19:22:03,328 [print.py:update_file()] - Updating file Dragonburner tap adapter (1).gcode
2023-10-30 19:22:03,339 [print.py:_callback()] - newfiles: []
2023-10-30 19:22:03,339 [print.py:_callback()] - deletedfiles: []
2023-10-30 19:22:03,339 [print.py:_callback()] - updatefiles: ['Dragonburner tap adapter (1).gcode']
2023-10-30 19:22:03,340 [print.py:update_file()] - Updating file Dragonburner tap adapter (1).gcode
2023-10-30 19:24:58,169 [screen.py:show_popup_message()] - error: // skew_correction:  Load failed, unknown profile [DASkew]
2023-10-30 19:26:41,409 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 19:26:41,540 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2023-10-30 19:26:44,631 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2023-10-30 19:26:46,098 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2023-10-30 19:27:30,818 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2023-10-30 19:27:32,177 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-10-30 19:27:34,282 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-10-30 19:27:35,530 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-10-30 19:27:46,417 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2023-10-30 19:27:47,497 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-10-30 19:28:17,927 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-30 19:28:17,981 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-30 19:28:18,002 [job_status.py:update_file_metadata()] - Update Metadata. File: Dragonburner tap adapter (1).gcode Size: 3595745
2023-10-30 19:28:18,011 [job_status.py:show_file_thumbnail()] - Dragonburner tap adapter (1).gcode
2023-10-30 19:28:25,695 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2023-10-30 19:28:26,522 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-30 19:28:26,523 [job_status.py:cancel_confirm()] - Canceling print
2023-10-30 19:28:26,523 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-10-30 19:28:26,531 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-10-30 19:28:26,882 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-10-30 19:28:29,876 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-30 19:28:29,877 [printer.py:change_state()] - Adding callback for state: ready
2023-10-30 19:28:32,383 [job_status.py:close_panel()] - Closing job_status panel
2023-10-30 19:28:32,393 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 19:28:32,526 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-30 19:28:32,539 [main_menu.py:add_device()] - Adding device: extruder
2023-10-30 19:28:32,550 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-30 19:28:32,560 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-30 19:28:32,571 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-30 19:28:32,581 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-30 19:28:32,591 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-30 19:28:32,660 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-30 19:28:33,922 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 19:28:34,068 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-30 19:28:36,159 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-10-30 19:28:36,165 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-30 19:28:49,052 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-30 19:28:49,141 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-30 19:28:50,802 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 19:28:50,812 [print.py:__init__()] - 24h time is True
2023-10-30 19:28:50,875 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2023-10-30 19:28:50,876 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-30 19:28:54,604 [KlippyGtk.py:Dialog()] - Showing dialog Print Dragonburner tap adapter (1).gcode (width=800, height=480)
2023-10-30 19:28:56,050 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-30 19:29:31,632 [print.py:_callback()] - newfiles: []
2023-10-30 19:29:31,633 [print.py:_callback()] - deletedfiles: []
2023-10-30 19:29:31,633 [print.py:_callback()] - updatefiles: ['Dragonburner tap adapter (1).gcode']
2023-10-30 19:29:31,633 [print.py:update_file()] - Updating file Dragonburner tap adapter (1).gcode
2023-10-30 19:29:31,635 [print.py:_callback()] - newfiles: []
2023-10-30 19:29:31,635 [print.py:_callback()] - deletedfiles: []
2023-10-30 19:29:31,636 [print.py:_callback()] - updatefiles: ['Dragonburner tap adapter (1).gcode']
2023-10-30 19:29:31,636 [print.py:update_file()] - Updating file Dragonburner tap adapter (1).gcode
2023-10-30 19:29:31,798 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-30 19:29:31,798 [printer.py:change_state()] - Adding callback for state: printing
2023-10-30 19:29:31,815 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 19:29:32,041 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-30 19:29:32,054 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-30 19:29:32,070 [job_status.py:update_file_metadata()] - Update Metadata. File: Dragonburner tap adapter (1).gcode Size: 3661243
2023-10-30 19:29:32,080 [job_status.py:show_file_thumbnail()] - Dragonburner tap adapter (1).gcode
2023-10-30 19:29:32,614 [files.py:add_file()] - File already exists: Dragonburner tap adapter (1).gcode
2023-10-30 19:29:32,617 [print.py:_callback()] - newfiles: []
2023-10-30 19:29:32,618 [print.py:_callback()] - deletedfiles: []
2023-10-30 19:29:32,618 [print.py:_callback()] - updatefiles: ['Dragonburner tap adapter (1).gcode']
2023-10-30 19:29:32,619 [print.py:update_file()] - Updating file Dragonburner tap adapter (1).gcode
2023-10-30 19:29:32,621 [print.py:_callback()] - newfiles: []
2023-10-30 19:29:32,622 [print.py:_callback()] - deletedfiles: []
2023-10-30 19:29:32,622 [print.py:_callback()] - updatefiles: ['Dragonburner tap adapter (1).gcode']
2023-10-30 19:29:32,623 [print.py:update_file()] - Updating file Dragonburner tap adapter (1).gcode
2023-10-30 19:29:32,640 [print.py:_callback()] - newfiles: []
2023-10-30 19:29:32,640 [print.py:_callback()] - deletedfiles: []
2023-10-30 19:29:32,640 [print.py:_callback()] - updatefiles: ['Dragonburner tap adapter (1).gcode']
2023-10-30 19:29:32,641 [print.py:update_file()] - Updating file Dragonburner tap adapter (1).gcode
2023-10-30 19:29:32,643 [print.py:_callback()] - newfiles: []
2023-10-30 19:29:32,643 [print.py:_callback()] - deletedfiles: []
2023-10-30 19:29:32,644 [print.py:_callback()] - updatefiles: ['Dragonburner tap adapter (1).gcode']
2023-10-30 19:29:32,644 [print.py:update_file()] - Updating file Dragonburner tap adapter (1).gcode
2023-10-30 19:31:08,331 [screen.py:show_popup_message()] - error: // skew_correction:  Load failed, unknown profile [DASkew]
2023-10-30 19:31:21,199 [screen.py:show_popup_message()] - error: Move out of range: 172.362 -0.131 0.230 [448.760]
2023-10-30 19:31:23,679 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-10-30 19:31:26,672 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-30 19:31:26,672 [printer.py:change_state()] - Adding callback for state: ready
2023-10-30 19:32:00,102 [print.py:_callback()] - newfiles: []
2023-10-30 19:32:00,103 [print.py:_callback()] - deletedfiles: []
2023-10-30 19:32:00,103 [print.py:_callback()] - updatefiles: ['Dragonburner tap adapter (1).gcode']
2023-10-30 19:32:00,103 [print.py:update_file()] - Updating file Dragonburner tap adapter (1).gcode
2023-10-30 19:32:00,105 [print.py:_callback()] - newfiles: []
2023-10-30 19:32:00,105 [print.py:_callback()] - deletedfiles: []
2023-10-30 19:32:00,106 [print.py:_callback()] - updatefiles: ['Dragonburner tap adapter (1).gcode']
2023-10-30 19:32:00,106 [print.py:update_file()] - Updating file Dragonburner tap adapter (1).gcode
2023-10-30 19:32:00,259 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-30 19:32:00,260 [printer.py:change_state()] - Adding callback for state: printing
2023-10-30 19:32:00,271 [job_status.py:set_state()] - Changing job_status state from 'cancelled' to 'printing'
2023-10-30 19:32:00,330 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 19:32:00,557 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-30 19:32:00,568 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-30 19:32:00,584 [job_status.py:update_file_metadata()] - Update Metadata. File: Dragonburner tap adapter (1).gcode Size: 3693126
2023-10-30 19:32:00,594 [job_status.py:show_file_thumbnail()] - Dragonburner tap adapter (1).gcode
2023-10-30 19:32:01,084 [files.py:add_file()] - File already exists: Dragonburner tap adapter (1).gcode
2023-10-30 19:32:01,088 [print.py:_callback()] - newfiles: []
2023-10-30 19:32:01,088 [print.py:_callback()] - deletedfiles: []
2023-10-30 19:32:01,089 [print.py:_callback()] - updatefiles: ['Dragonburner tap adapter (1).gcode']
2023-10-30 19:32:01,089 [print.py:update_file()] - Updating file Dragonburner tap adapter (1).gcode
2023-10-30 19:32:01,092 [print.py:_callback()] - newfiles: []
2023-10-30 19:32:01,092 [print.py:_callback()] - deletedfiles: []
2023-10-30 19:32:01,093 [print.py:_callback()] - updatefiles: ['Dragonburner tap adapter (1).gcode']
2023-10-30 19:32:01,093 [print.py:update_file()] - Updating file Dragonburner tap adapter (1).gcode
2023-10-30 19:32:01,109 [print.py:_callback()] - newfiles: []
2023-10-30 19:32:01,110 [print.py:_callback()] - deletedfiles: []
2023-10-30 19:32:01,110 [print.py:_callback()] - updatefiles: ['Dragonburner tap adapter (1).gcode']
2023-10-30 19:32:01,110 [print.py:update_file()] - Updating file Dragonburner tap adapter (1).gcode
2023-10-30 19:32:01,113 [print.py:_callback()] - newfiles: []
2023-10-30 19:32:01,114 [print.py:_callback()] - deletedfiles: []
2023-10-30 19:32:01,114 [print.py:_callback()] - updatefiles: ['Dragonburner tap adapter (1).gcode']
2023-10-30 19:32:01,115 [print.py:update_file()] - Updating file Dragonburner tap adapter (1).gcode
2023-10-30 19:33:36,971 [screen.py:show_popup_message()] - error: // skew_correction:  Load failed, unknown profile [DASkew]
2023-10-30 19:35:33,452 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 19:35:33,673 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2023-10-30 19:35:35,773 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2023-10-30 19:35:37,337 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2023-10-30 19:35:37,774 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2023-10-30 19:36:26,480 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-30 19:36:26,590 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-30 19:36:26,627 [job_status.py:update_file_metadata()] - Update Metadata. File: Dragonburner tap adapter (1).gcode Size: 3693126
2023-10-30 19:36:26,636 [job_status.py:show_file_thumbnail()] - Dragonburner tap adapter (1).gcode
2023-10-30 19:36:27,427 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2023-10-30 19:36:28,459 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-30 19:36:28,459 [job_status.py:cancel_confirm()] - Canceling print
2023-10-30 19:36:28,460 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-10-30 19:36:28,468 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-10-30 19:36:28,847 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-10-30 19:36:30,288 [job_status.py:close_panel()] - Closing job_status panel
2023-10-30 19:36:30,293 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 19:36:30,417 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-30 19:36:30,431 [main_menu.py:add_device()] - Adding device: extruder
2023-10-30 19:36:30,441 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-30 19:36:30,451 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-30 19:36:30,462 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-30 19:36:30,472 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-30 19:36:30,483 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-30 19:36:30,552 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-30 19:36:31,507 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 19:36:31,664 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-30 19:36:31,844 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-30 19:36:31,844 [printer.py:change_state()] - Adding callback for state: ready
2023-10-30 19:36:31,851 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 19:36:31,970 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-30 19:36:31,983 [main_menu.py:add_device()] - Adding device: extruder
2023-10-30 19:36:31,994 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-30 19:36:32,004 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-30 19:36:32,014 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-30 19:36:32,031 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-30 19:36:32,044 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-30 19:36:32,115 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-30 19:36:35,324 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 19:36:35,540 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-30 19:36:36,465 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-10-30 19:36:36,471 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-30 19:37:53,758 [print.py:_callback()] - newfiles: []
2023-10-30 19:37:53,758 [print.py:_callback()] - deletedfiles: []
2023-10-30 19:37:53,758 [print.py:_callback()] - updatefiles: ['Dragonburner tap adapter (1).gcode']
2023-10-30 19:37:53,759 [print.py:update_file()] - Updating file Dragonburner tap adapter (1).gcode
2023-10-30 19:37:53,760 [print.py:_callback()] - newfiles: []
2023-10-30 19:37:53,761 [print.py:_callback()] - deletedfiles: []
2023-10-30 19:37:53,761 [print.py:_callback()] - updatefiles: ['Dragonburner tap adapter (1).gcode']
2023-10-30 19:37:53,762 [print.py:update_file()] - Updating file Dragonburner tap adapter (1).gcode
2023-10-30 19:37:53,816 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-30 19:37:53,817 [printer.py:change_state()] - Adding callback for state: printing
2023-10-30 19:37:53,835 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 19:37:54,049 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-30 19:37:54,062 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-30 19:37:54,079 [job_status.py:update_file_metadata()] - Update Metadata. File: Dragonburner tap adapter (1).gcode Size: 3693126
2023-10-30 19:37:54,088 [job_status.py:show_file_thumbnail()] - Dragonburner tap adapter (1).gcode
2023-10-30 19:37:54,741 [files.py:add_file()] - File already exists: Dragonburner tap adapter (1).gcode
2023-10-30 19:37:54,744 [print.py:_callback()] - newfiles: []
2023-10-30 19:37:54,744 [print.py:_callback()] - deletedfiles: []
2023-10-30 19:37:54,745 [print.py:_callback()] - updatefiles: ['Dragonburner tap adapter (1).gcode']
2023-10-30 19:37:54,746 [print.py:update_file()] - Updating file Dragonburner tap adapter (1).gcode
2023-10-30 19:37:54,747 [print.py:_callback()] - newfiles: []
2023-10-30 19:37:54,748 [print.py:_callback()] - deletedfiles: []
2023-10-30 19:37:54,748 [print.py:_callback()] - updatefiles: ['Dragonburner tap adapter (1).gcode']
2023-10-30 19:37:54,749 [print.py:update_file()] - Updating file Dragonburner tap adapter (1).gcode
2023-10-30 19:37:54,764 [print.py:_callback()] - newfiles: []
2023-10-30 19:37:54,764 [print.py:_callback()] - deletedfiles: []
2023-10-30 19:37:54,765 [print.py:_callback()] - updatefiles: ['Dragonburner tap adapter (1).gcode']
2023-10-30 19:37:54,765 [print.py:update_file()] - Updating file Dragonburner tap adapter (1).gcode
2023-10-30 19:37:54,767 [print.py:_callback()] - newfiles: []
2023-10-30 19:37:54,768 [print.py:_callback()] - deletedfiles: []
2023-10-30 19:37:54,768 [print.py:_callback()] - updatefiles: ['Dragonburner tap adapter (1).gcode']
2023-10-30 19:37:54,769 [print.py:update_file()] - Updating file Dragonburner tap adapter (1).gcode
2023-10-30 19:39:48,711 [screen.py:show_popup_message()] - error: // skew_correction:  Load failed, unknown profile [DASkew]
2023-10-30 19:41:48,032 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2023-10-30 19:41:48,835 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-30 19:41:48,836 [job_status.py:cancel_confirm()] - Canceling print
2023-10-30 19:41:48,837 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-10-30 19:41:48,844 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-10-30 19:41:49,229 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-10-30 19:41:51,985 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-30 19:41:51,986 [printer.py:change_state()] - Adding callback for state: ready
2023-10-30 19:41:52,056 [job_status.py:close_panel()] - Closing job_status panel
2023-10-30 19:41:52,064 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 19:41:52,235 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-30 19:41:52,249 [main_menu.py:add_device()] - Adding device: extruder
2023-10-30 19:41:52,259 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-30 19:41:52,270 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-30 19:41:52,280 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-30 19:41:52,290 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-30 19:41:52,301 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-30 19:41:52,369 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-30 19:41:53,291 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 19:41:53,439 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-30 19:41:55,097 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-10-30 19:41:55,104 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-30 19:42:11,970 [screen.py:show_panel()] - Reinitializing panel
2023-10-30 19:42:12,216 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2023-10-30 19:42:12,240 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2023-10-30 19:42:13,088 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-65-g4a14962
2023-10-30 19:17:23,256 [screen.py:main()] - Python version: 3.9
2023-10-30 19:17:23,257 [screen.py:main()] - KlipperScreen version: v0.3.6-65-g4a14962
2023-10-30 19:17:23,267 [functions.py:detect_desktop_environment()] - Error:
'XDG_CURRENT_DESKTOP'

Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
2023-10-30 19:17:23,529 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-10-30 19:17:23,533 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2023-10-30 19:17:23,558 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-10-30 19:17:23,658 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-10-30 19:17:23,658 [config.py:install_language()] - Using system lang
2023-10-30 19:17:23,659 [config.py:install_language()] - Using lang en
2023-10-30 19:17:23,696 [screen.py:__init__()] - Screen resolution: 800x480
2023-10-30 19:17:23,699 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-10-30 19:17:25,316 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-10-30 19:17:25,335 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-10-30 19:17:25,349 [screen.py:initial_connection()] - Default printer: None
2023-10-30 19:17:25,349 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-10-30 19:17:25,350 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-10-30 19:17:25,442 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-30 19:17:25,466 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-10-30 19:17:25,507 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 19:17:25,531 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-10-30 19:17:25,533 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-10-30 19:17:25,554 [_logging.py:info()] - Websocket connected
2023-10-30 19:17:25,555 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-10-30 19:17:25,905 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 19:17:25,927 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 19:17:25,930 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'authorization', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-30 19:17:25,952 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-30 19:17:25,954 [printer.py:configure_cameras()] - Cameras: []
2023-10-30 19:17:25,955 [screen.py:init_printer()] - Klipper not connected
2023-10-30 19:17:29,075 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 19:17:29,093 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 19:17:29,096 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'authorization', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-30 19:17:29,113 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-30 19:17:29,115 [printer.py:configure_cameras()] - Cameras: []
2023-10-30 19:17:29,116 [screen.py:init_printer()] - Klipper not connected
2023-10-30 19:17:32,083 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 19:17:32,109 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 19:17:32,111 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'authorization', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-30 19:17:32,135 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-30 19:17:32,136 [printer.py:configure_cameras()] - Cameras: []
2023-10-30 19:17:32,174 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2023-10-30 19:17:35,074 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 19:17:35,092 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-30 19:17:35,094 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'authorization', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-30 19:17:35,110 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-30 19:17:35,112 [printer.py:configure_cameras()] - Cameras: []
2023-10-30 19:17:35,132 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-30 19:17:35,417 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-30 19:17:35,421 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew'}, 'gcode_macro PRINT_END': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.420'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.008125, -0.016875, -0.038750, -0.033750, 0.040000\n-0.088750, -0.093750, -0.108750, -0.098125, -0.063750\n-0.087500, -0.107500, -0.133125, -0.126250, -0.130625\n-0.015000, -0.033750, -0.073750, -0.106250, -0.130000\n0.127500, 0.110000, 0.049375, -0.008750, -0.057500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '320.0', 'min_y': '12.0', 'max_y': '320.0'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.008125, -0.016875, -0.03875, -0.03375, 0.04], [-0.08875, -0.09375, -0.10875, -0.098125, -0.06375], [-0.0875, -0.1075, -0.133125, -0.12625, -0.130625], [-0.015, -0.03375, -0.07375, -0.10625, -0.13], [0.1275, 0.11, 0.049375, -0.00875, -0.0575]], 'min_x': 35.0, 'max_x': 320.0, 'min_y': 12.0, 'max_y': 320.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.42, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-30 19:17:35,426 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-30 19:17:35,426 [printer.py:reinit()] - # Extruders: 1
2023-10-30 19:17:35,427 [printer.py:reinit()] - # Temperature devices: 5
2023-10-30 19:17:35,427 [printer.py:reinit()] - # Fans: 2
2023-10-30 19:17:35,428 [printer.py:reinit()] - # Output pins: 1
2023-10-30 19:17:35,428 [printer.py:reinit()] - # Leds: 0
2023-10-30 19:17:35,455 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-30 19:17:35,459 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-30 19:17:35,734 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-30 19:17:35,754 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 19:17:35,756 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-30 19:17:35,757 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-30 19:17:35,757 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-30 19:17:35,758 [screen.py:init_printer()] - Printer initialized
2023-10-30 19:17:35,759 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-10-30 19:17:35,760 [printer.py:change_state()] - Adding callback for state: ready
2023-10-30 19:17:35,767 [screen.py:_load_panel()] - Loading panel: main_menu
2023-10-30 19:17:35,982 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-30 19:17:36,008 [main_menu.py:add_device()] - Adding device: extruder
2023-10-30 19:17:36,023 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-30 19:17:36,037 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-30 19:17:36,047 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-30 19:17:36,057 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-30 19:17:36,067 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-30 19:17:36,134 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-30 19:17:36,137 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: []
2023-10-30 19:17:41,075 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-30 19:17:41,103 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-30 19:17:41,125 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-30 19:17:41,128 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-31 13:44:50,075 [screen.py:_load_panel()] - Loading panel: gcode_macros
2023-10-31 13:44:50,216 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > gcode_macros
2023-10-31 13:44:52,505 [screen.py:show_popup_message()] - echo: Level_Session 
2023-10-31 13:44:52,524 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Level_Session'}
2023-10-31 13:47:23,087 [screen.py:show_popup_message()] - error: Shutdown due to webhooks request
2023-10-31 13:47:23,156 [screen.py:show_popup_message()] - error: Shutdown due to webhooks request
2023-10-31 13:47:23,164 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2023-10-31 13:47:23,164 [printer.py:change_state()] - Adding callback for state: shutdown
2023-10-31 13:47:23,243 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 13:47:23,321 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-65-g4a14962
2023-10-31 13:47:49,156 [screen.py:main()] - Python version: 3.9
2023-10-31 13:47:49,157 [screen.py:main()] - KlipperScreen version: v0.3.6-65-g4a14962
2023-10-31 13:47:49,179 [functions.py:detect_desktop_environment()] - Error:
'XDG_CURRENT_DESKTOP'

Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
2023-10-31 13:47:49,539 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-10-31 13:47:49,541 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2023-10-31 13:47:49,577 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-10-31 13:47:49,679 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-10-31 13:47:49,680 [config.py:install_language()] - Using system lang
2023-10-31 13:47:49,681 [config.py:install_language()] - Using lang en
2023-10-31 13:47:49,715 [screen.py:__init__()] - Screen resolution: 800x480
2023-10-31 13:47:49,717 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-10-31 13:47:51,393 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-10-31 13:47:51,412 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-10-31 13:47:51,425 [screen.py:initial_connection()] - Default printer: None
2023-10-31 13:47:51,426 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-10-31 13:47:51,427 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-10-31 13:47:51,517 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-31 13:47:51,537 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-10-31 13:47:51,576 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 13:47:51,601 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-10-31 13:47:51,604 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-10-31 13:47:51,624 [_logging.py:info()] - Websocket connected
2023-10-31 13:47:51,624 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-10-31 13:47:51,995 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 13:47:52,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 13:47:52,027 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-31 13:47:52,058 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-31 13:47:52,059 [printer.py:configure_cameras()] - Cameras: []
2023-10-31 13:47:52,060 [screen.py:init_printer()] - Klipper not connected
2023-10-31 13:47:55,443 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 13:47:55,462 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 13:47:55,465 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-31 13:47:55,487 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-31 13:47:55,489 [printer.py:configure_cameras()] - Cameras: []
2023-10-31 13:47:55,489 [screen.py:init_printer()] - Klipper not connected
2023-10-31 13:47:58,452 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 13:47:58,479 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 13:47:58,482 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-31 13:47:58,508 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-31 13:47:58,512 [printer.py:configure_cameras()] - Cameras: []
2023-10-31 13:47:58,552 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2023-10-31 13:48:01,454 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 13:48:01,483 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 13:48:01,486 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-31 13:48:01,514 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-31 13:48:01,516 [printer.py:configure_cameras()] - Cameras: []
2023-10-31 13:48:01,549 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-31 13:48:01,815 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-31 13:48:01,818 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew'}, 'gcode_macro PRINT_END': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.420'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.008125, -0.016875, -0.038750, -0.033750, 0.040000\n-0.088750, -0.093750, -0.108750, -0.098125, -0.063750\n-0.087500, -0.107500, -0.133125, -0.126250, -0.130625\n-0.015000, -0.033750, -0.073750, -0.106250, -0.130000\n0.127500, 0.110000, 0.049375, -0.008750, -0.057500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '320.0', 'min_y': '12.0', 'max_y': '320.0'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.008125, -0.016875, -0.03875, -0.03375, 0.04], [-0.08875, -0.09375, -0.10875, -0.098125, -0.06375], [-0.0875, -0.1075, -0.133125, -0.12625, -0.130625], [-0.015, -0.03375, -0.07375, -0.10625, -0.13], [0.1275, 0.11, 0.049375, -0.00875, -0.0575]], 'min_x': 35.0, 'max_x': 320.0, 'min_y': 12.0, 'max_y': 320.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.42, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-31 13:48:01,823 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-31 13:48:01,824 [printer.py:reinit()] - # Extruders: 1
2023-10-31 13:48:01,824 [printer.py:reinit()] - # Temperature devices: 5
2023-10-31 13:48:01,824 [printer.py:reinit()] - # Fans: 2
2023-10-31 13:48:01,824 [printer.py:reinit()] - # Output pins: 1
2023-10-31 13:48:01,825 [printer.py:reinit()] - # Leds: 0
2023-10-31 13:48:01,848 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-31 13:48:01,851 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-31 13:48:02,131 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-31 13:48:02,152 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 13:48:02,153 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 13:48:02,154 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-31 13:48:02,155 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-31 13:48:02,156 [screen.py:init_printer()] - Printer initialized
2023-10-31 13:48:02,157 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-10-31 13:48:02,157 [printer.py:change_state()] - Adding callback for state: error
2023-10-31 13:48:02,161 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 13:48:02,232 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-31 13:48:07,447 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 13:48:07,448 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 13:48:12,441 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 13:48:12,443 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 13:48:17,440 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 13:48:17,442 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 13:48:17,924 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2023-10-31 13:48:17,925 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-31 13:48:17,929 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-31 13:48:17,931 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 13:48:18,042 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-31 13:48:21,445 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 13:48:21,467 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 13:48:21,469 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-31 13:48:21,490 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-31 13:48:21,492 [printer.py:configure_cameras()] - Cameras: []
2023-10-31 13:48:21,518 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-31 13:48:21,562 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-31 13:48:21,566 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew'}, 'gcode_macro PRINT_END': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.420'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.008125, -0.016875, -0.038750, -0.033750, 0.040000\n-0.088750, -0.093750, -0.108750, -0.098125, -0.063750\n-0.087500, -0.107500, -0.133125, -0.126250, -0.130625\n-0.015000, -0.033750, -0.073750, -0.106250, -0.130000\n0.127500, 0.110000, 0.049375, -0.008750, -0.057500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '320.0', 'min_y': '12.0', 'max_y': '320.0'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.008125, -0.016875, -0.03875, -0.03375, 0.04], [-0.08875, -0.09375, -0.10875, -0.098125, -0.06375], [-0.0875, -0.1075, -0.133125, -0.12625, -0.130625], [-0.015, -0.03375, -0.07375, -0.10625, -0.13], [0.1275, 0.11, 0.049375, -0.00875, -0.0575]], 'min_x': 35.0, 'max_x': 320.0, 'min_y': 12.0, 'max_y': 320.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n\n{% set target_chamber = params.CHAMBER|default("20")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\n\n\n\n\n\n\nM190 S{target_bed}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90\n\n\nSKEW_PROFILE LOAD=DASkew', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nSET_SKEW CLEAR=1\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.42, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-31 13:48:21,572 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-31 13:48:21,573 [printer.py:reinit()] - # Extruders: 1
2023-10-31 13:48:21,573 [printer.py:reinit()] - # Temperature devices: 5
2023-10-31 13:48:21,573 [printer.py:reinit()] - # Fans: 2
2023-10-31 13:48:21,574 [printer.py:reinit()] - # Output pins: 1
2023-10-31 13:48:21,574 [printer.py:reinit()] - # Leds: 0
2023-10-31 13:48:21,601 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-31 13:48:21,605 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-31 13:48:21,870 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-31 13:48:21,891 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 13:48:21,892 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 13:48:21,893 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-31 13:48:21,894 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-31 13:48:21,895 [screen.py:init_printer()] - Printer initialized
2023-10-31 13:48:21,896 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-31 13:48:21,896 [printer.py:change_state()] - Adding callback for state: startup
2023-10-31 13:48:22,443 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 13:48:22,445 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 13:48:22,802 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-31 13:48:22,802 [printer.py:change_state()] - Adding callback for state: ready
2023-10-31 13:48:22,808 [screen.py:_load_panel()] - Loading panel: main_menu
2023-10-31 13:48:22,939 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-31 13:48:22,952 [main_menu.py:add_device()] - Adding device: extruder
2023-10-31 13:48:22,962 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-31 13:48:22,972 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-31 13:48:22,982 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-31 13:48:22,992 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-31 13:48:23,002 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-31 13:48:23,074 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-31 13:48:23,077 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: []
2023-10-31 13:48:27,441 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 13:48:27,469 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-31 13:48:27,491 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-31 13:48:27,494 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-31 13:48:27,511 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 13:48:27,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-31 13:48:27,560 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-31 13:48:27,563 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-31 13:57:39,106 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-31 13:57:39,107 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-31 13:57:39,109 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-31 13:57:39,113 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 13:57:39,180 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-31 13:57:42,968 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 13:57:43,001 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 13:57:43,005 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-31 13:57:43,038 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-31 13:57:43,041 [printer.py:configure_cameras()] - Cameras: []
2023-10-31 13:57:43,078 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-31 13:57:43,261 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-31 13:57:43,263 [screen.py:init_printer()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-31 13:57:43,265 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-31 13:57:43,265 [printer.py:reinit()] - # Extruders: 0
2023-10-31 13:57:43,265 [printer.py:reinit()] - # Temperature devices: 0
2023-10-31 13:57:43,265 [printer.py:reinit()] - # Fans: 0
2023-10-31 13:57:43,266 [printer.py:reinit()] - # Output pins: 0
2023-10-31 13:57:43,266 [printer.py:reinit()] - # Leds: 0
2023-10-31 13:57:43,286 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-31 13:57:43,288 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-31 13:57:43,516 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2023-10-31 13:57:43,518 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-31 13:57:43,519 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-31 13:57:43,520 [screen.py:init_printer()] - Printer initialized
2023-10-31 13:57:43,521 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-10-31 13:57:43,521 [printer.py:change_state()] - Adding callback for state: error
2023-10-31 13:57:43,530 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 13:57:43,611 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-31 13:59:04,824 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2023-10-31 13:59:04,824 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-31 13:59:04,826 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-31 13:59:04,830 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 13:59:04,931 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-31 13:59:07,963 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 13:59:07,992 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 13:59:07,995 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-31 13:59:08,022 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-31 13:59:08,025 [printer.py:configure_cameras()] - Cameras: []
2023-10-31 13:59:08,047 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-31 13:59:08,222 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-31 13:59:08,224 [screen.py:init_printer()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-31 13:59:08,225 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-31 13:59:08,225 [printer.py:reinit()] - # Extruders: 0
2023-10-31 13:59:08,226 [printer.py:reinit()] - # Temperature devices: 0
2023-10-31 13:59:08,226 [printer.py:reinit()] - # Fans: 0
2023-10-31 13:59:08,226 [printer.py:reinit()] - # Output pins: 0
2023-10-31 13:59:08,226 [printer.py:reinit()] - # Leds: 0
2023-10-31 13:59:08,247 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-31 13:59:08,249 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-31 13:59:08,479 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2023-10-31 13:59:08,481 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-31 13:59:08,482 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-31 13:59:08,483 [screen.py:init_printer()] - Printer initialized
2023-10-31 13:59:08,484 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-10-31 13:59:08,484 [printer.py:change_state()] - Adding callback for state: error
2023-10-31 13:59:08,488 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 13:59:08,559 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-31 14:03:38,245 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2023-10-31 14:03:38,246 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-31 14:03:38,248 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-31 14:03:38,252 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 14:03:38,361 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-31 14:03:41,950 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 14:03:41,968 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 14:03:41,970 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-31 14:03:41,987 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-31 14:03:41,989 [printer.py:configure_cameras()] - Cameras: []
2023-10-31 14:03:42,008 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-31 14:03:42,042 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-31 14:03:42,046 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.420'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.008125, -0.016875, -0.038750, -0.033750, 0.040000\n-0.088750, -0.093750, -0.108750, -0.098125, -0.063750\n-0.087500, -0.107500, -0.133125, -0.126250, -0.130625\n-0.015000, -0.033750, -0.073750, -0.106250, -0.130000\n0.127500, 0.110000, 0.049375, -0.008750, -0.057500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '320.0', 'min_y': '12.0', 'max_y': '320.0'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.008125, -0.016875, -0.03875, -0.03375, 0.04], [-0.08875, -0.09375, -0.10875, -0.098125, -0.06375], [-0.0875, -0.1075, -0.133125, -0.12625, -0.130625], [-0.015, -0.03375, -0.07375, -0.10625, -0.13], [0.1275, 0.11, 0.049375, -0.00875, -0.0575]], 'min_x': 35.0, 'max_x': 320.0, 'min_y': 12.0, 'max_y': 320.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.42, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-31 14:03:42,051 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-31 14:03:42,052 [printer.py:reinit()] - # Extruders: 1
2023-10-31 14:03:42,052 [printer.py:reinit()] - # Temperature devices: 5
2023-10-31 14:03:42,053 [printer.py:reinit()] - # Fans: 2
2023-10-31 14:03:42,053 [printer.py:reinit()] - # Output pins: 1
2023-10-31 14:03:42,053 [printer.py:reinit()] - # Leds: 0
2023-10-31 14:03:42,076 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-31 14:03:42,079 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-31 14:03:42,373 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-31 14:03:42,454 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 14:03:42,490 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-31 14:03:42,522 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-31 14:03:42,525 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-31 14:03:42,526 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-31 14:03:42,527 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-31 14:03:42,529 [screen.py:init_printer()] - Printer initialized
2023-10-31 14:03:42,530 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-31 14:03:42,531 [printer.py:change_state()] - Adding callback for state: startup
2023-10-31 14:03:43,031 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-31 14:03:43,031 [printer.py:change_state()] - Adding callback for state: ready
2023-10-31 14:03:43,037 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 14:03:43,157 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-31 14:03:43,170 [main_menu.py:add_device()] - Adding device: extruder
2023-10-31 14:03:43,180 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-31 14:03:43,191 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-31 14:03:43,200 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-31 14:03:43,210 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-31 14:03:43,220 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-31 14:03:43,290 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-31 14:14:24,267 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2023-10-31 14:18:38,904 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-31 14:18:38,904 [printer.py:change_state()] - Adding callback for state: printing
2023-10-31 14:18:38,928 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-31 14:18:38,932 [screen.py:_load_panel()] - Loading panel: job_status
2023-10-31 14:18:39,185 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-31 14:18:39,195 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-31 14:18:39,224 [job_status.py:update_file_metadata()] - Update Metadata. File: Dragonburner tap adapter (1).gcode Size: 3689084
2023-10-31 14:18:39,241 [job_status.py:show_file_thumbnail()] - Dragonburner tap adapter (1).gcode
2023-10-31 14:18:39,830 [files.py:add_file()] - File already exists: Dragonburner tap adapter (1).gcode
2023-10-31 14:18:50,924 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2023-10-31 14:18:51,793 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-31 14:18:51,793 [job_status.py:cancel_confirm()] - Canceling print
2023-10-31 14:18:51,794 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-10-31 14:18:51,800 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-10-31 14:19:13,177 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2023-10-31 14:19:13,179 [job_status.py:restart()] - Starting print: Dragonburner tap adapter (1).gcode
2023-10-31 14:19:37,590 [printer.py:change_state()] - Changing state from 'printing' to 'shutdown'
2023-10-31 14:19:37,591 [printer.py:change_state()] - Adding callback for state: shutdown
2023-10-31 14:19:37,617 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 14:19:37,688 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-31 14:19:43,104 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2023-10-31 14:19:43,105 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-31 14:19:43,106 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-31 14:19:43,116 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 14:19:43,213 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-31 14:19:46,951 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 14:19:46,969 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 14:19:46,971 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-31 14:19:46,988 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-31 14:19:46,989 [printer.py:configure_cameras()] - Cameras: []
2023-10-31 14:19:47,009 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-31 14:19:47,045 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-31 14:19:47,049 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.420'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.008125, -0.016875, -0.038750, -0.033750, 0.040000\n-0.088750, -0.093750, -0.108750, -0.098125, -0.063750\n-0.087500, -0.107500, -0.133125, -0.126250, -0.130625\n-0.015000, -0.033750, -0.073750, -0.106250, -0.130000\n0.127500, 0.110000, 0.049375, -0.008750, -0.057500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '320.0', 'min_y': '12.0', 'max_y': '320.0'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.008125, -0.016875, -0.03875, -0.03375, 0.04], [-0.08875, -0.09375, -0.10875, -0.098125, -0.06375], [-0.0875, -0.1075, -0.133125, -0.12625, -0.130625], [-0.015, -0.03375, -0.07375, -0.10625, -0.13], [0.1275, 0.11, 0.049375, -0.00875, -0.0575]], 'min_x': 35.0, 'max_x': 320.0, 'min_y': 12.0, 'max_y': 320.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.42, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-31 14:19:47,057 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-31 14:19:47,057 [printer.py:reinit()] - # Extruders: 1
2023-10-31 14:19:47,057 [printer.py:reinit()] - # Temperature devices: 5
2023-10-31 14:19:47,058 [printer.py:reinit()] - # Fans: 2
2023-10-31 14:19:47,058 [printer.py:reinit()] - # Output pins: 1
2023-10-31 14:19:47,058 [printer.py:reinit()] - # Leds: 0
2023-10-31 14:19:47,081 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-31 14:19:47,084 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-31 14:19:47,365 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-31 14:19:47,425 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 14:19:47,435 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-31 14:19:47,458 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-31 14:19:47,460 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-31 14:19:47,461 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-31 14:19:47,461 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-31 14:19:47,463 [screen.py:init_printer()] - Printer initialized
2023-10-31 14:19:47,464 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-31 14:19:47,465 [printer.py:change_state()] - Adding callback for state: startup
2023-10-31 14:19:48,038 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-31 14:19:48,038 [printer.py:change_state()] - Adding callback for state: ready
2023-10-31 14:19:48,045 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 14:19:48,163 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-31 14:19:48,176 [main_menu.py:add_device()] - Adding device: extruder
2023-10-31 14:19:48,186 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-31 14:19:48,197 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-31 14:19:48,206 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-31 14:19:48,217 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-31 14:19:48,227 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-31 14:19:48,298 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-31 14:29:39,130 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffb0cfb640 (GtkDialog at 0x14dcee00)>
2023-10-31 14:29:39,163 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2023-10-31 14:30:32,672 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-31 14:30:32,673 [printer.py:change_state()] - Adding callback for state: printing
2023-10-31 14:30:32,694 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-31 14:30:32,697 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 14:30:32,910 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-31 14:30:32,925 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-31 14:30:32,940 [job_status.py:update_file_metadata()] - Update Metadata. File: Dragonburner tap adapter (1).gcode Size: 3689084
2023-10-31 14:30:32,949 [job_status.py:show_file_thumbnail()] - Dragonburner tap adapter (1).gcode
2023-10-31 14:30:33,583 [files.py:add_file()] - File already exists: Dragonburner tap adapter (1).gcode
2023-10-31 15:08:01,216 [screen.py:_load_panel()] - Loading panel: fine_tune
2023-10-31 15:08:01,340 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2023-10-31 15:08:03,628 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2023-10-31 15:08:06,234 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2023-10-31 15:09:29,514 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-31 15:09:29,617 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-31 15:09:29,646 [job_status.py:update_file_metadata()] - Update Metadata. File: Dragonburner tap adapter (1).gcode Size: 3689084
2023-10-31 15:09:29,656 [job_status.py:show_file_thumbnail()] - Dragonburner tap adapter (1).gcode
2023-10-31 15:09:31,332 [screen.py:_load_panel()] - Loading panel: temperature
2023-10-31 15:09:31,382 [temperature.py:add_device()] - Adding device: extruder
2023-10-31 15:09:31,394 [temperature.py:add_device()] - Adding device: heater_bed
2023-10-31 15:09:31,407 [temperature.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-31 15:09:31,417 [temperature.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-31 15:09:31,427 [temperature.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-31 15:09:31,438 [temperature.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-31 15:09:31,449 [temperature.py:select_heater()] - Selecting extruder
2023-10-31 15:09:31,525 [screen.py:attach_panel()] - Current panel hierarchy: job_status > temperature
2023-10-31 15:09:36,650 [temperature.py:verify_max_temp()] - 230/350
2023-10-31 15:09:36,651 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S230
2023-10-31 15:10:03,522 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-31 15:10:03,649 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-31 15:10:03,669 [job_status.py:update_file_metadata()] - Update Metadata. File: Dragonburner tap adapter (1).gcode Size: 3689084
2023-10-31 15:10:03,678 [job_status.py:show_file_thumbnail()] - Dragonburner tap adapter (1).gcode
2023-10-31 15:10:07,962 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2023-10-31 15:10:10,399 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-10-31 15:10:15,521 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-10-31 15:10:16,412 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-10-31 15:11:23,466 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-31 15:11:23,520 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-31 15:11:23,540 [job_status.py:update_file_metadata()] - Update Metadata. File: Dragonburner tap adapter (1).gcode Size: 3689084
2023-10-31 15:11:23,549 [job_status.py:show_file_thumbnail()] - Dragonburner tap adapter (1).gcode
2023-10-31 15:11:26,189 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2023-10-31 15:11:27,423 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-31 15:11:27,424 [job_status.py:cancel_confirm()] - Canceling print
2023-10-31 15:11:27,425 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-10-31 15:11:27,437 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-10-31 15:11:27,853 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-10-31 15:11:30,853 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-31 15:11:30,854 [printer.py:change_state()] - Adding callback for state: ready
2023-10-31 15:11:34,978 [job_status.py:close_panel()] - Closing job_status panel
2023-10-31 15:11:34,983 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 15:11:35,102 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-31 15:11:35,118 [main_menu.py:add_device()] - Adding device: extruder
2023-10-31 15:11:35,128 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-31 15:11:35,139 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-31 15:11:35,149 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-31 15:11:35,159 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-31 15:11:35,170 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-31 15:11:35,294 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-31 15:11:37,020 [screen.py:_load_panel()] - Loading panel: move
2023-10-31 15:11:37,172 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-31 15:11:39,642 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-10-31 15:11:39,649 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-31 15:11:52,283 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-10-31 15:11:52,289 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-31 15:12:11,098 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-31 15:12:11,209 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-31 15:12:12,501 [screen.py:_load_panel()] - Loading panel: print
2023-10-31 15:12:12,514 [print.py:__init__()] - 24h time is True
2023-10-31 15:12:12,573 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2023-10-31 15:12:12,573 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-31 15:12:19,935 [KlippyGtk.py:Dialog()] - Showing dialog Print Dragonburner tap adapter (1).gcode (width=800, height=480)
2023-10-31 15:12:21,161 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-31 15:12:21,162 [print.py:confirm_print_response()] - Starting print: Dragonburner tap adapter (1).gcode
2023-10-31 15:12:21,162 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2023-10-31 15:12:21,242 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-31 15:12:21,242 [printer.py:change_state()] - Adding callback for state: printing
2023-10-31 15:12:21,266 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 15:12:21,482 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-31 15:12:21,497 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-31 15:12:21,513 [job_status.py:update_file_metadata()] - Update Metadata. File: Dragonburner tap adapter (1).gcode Size: 3689084
2023-10-31 15:12:21,522 [job_status.py:show_file_thumbnail()] - Dragonburner tap adapter (1).gcode
2023-10-31 15:12:41,508 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 15:12:41,638 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2023-10-31 15:12:46,730 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-31 15:12:46,826 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-31 15:12:46,857 [job_status.py:update_file_metadata()] - Update Metadata. File: Dragonburner tap adapter (1).gcode Size: 3689084
2023-10-31 15:12:46,873 [job_status.py:show_file_thumbnail()] - Dragonburner tap adapter (1).gcode
2023-10-31 15:21:56,386 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 15:21:56,431 [temperature.py:add_device()] - Adding device: extruder
2023-10-31 15:21:56,443 [temperature.py:add_device()] - Adding device: heater_bed
2023-10-31 15:21:56,455 [temperature.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-31 15:21:56,465 [temperature.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-31 15:21:56,476 [temperature.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-31 15:21:56,490 [temperature.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-31 15:21:56,501 [temperature.py:select_heater()] - Selecting extruder
2023-10-31 15:21:56,572 [screen.py:attach_panel()] - Current panel hierarchy: job_status > temperature
2023-10-31 15:22:04,955 [temperature.py:verify_max_temp()] - 230/350
2023-10-31 15:22:04,955 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S230
2023-10-31 15:22:12,165 [temperature.py:verify_max_temp()] - 0/350
2023-10-31 15:22:12,165 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S0
2023-10-31 15:22:16,911 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-31 15:22:17,062 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-31 15:22:17,096 [job_status.py:update_file_metadata()] - Update Metadata. File: Dragonburner tap adapter (1).gcode Size: 3689084
2023-10-31 15:22:17,112 [job_status.py:show_file_thumbnail()] - Dragonburner tap adapter (1).gcode
2023-10-31 15:22:54,664 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2023-10-31 15:22:54,786 [screen.py:show_popup_message()] - echo: Extruder not hot enough
2023-10-31 15:22:54,801 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-10-31 15:22:57,489 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-31 15:22:57,489 [printer.py:change_state()] - Adding callback for state: ready
2023-10-31 15:23:06,235 [job_status.py:close_panel()] - Closing job_status panel
2023-10-31 15:23:06,239 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 15:23:06,360 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-31 15:23:06,374 [main_menu.py:add_device()] - Adding device: extruder
2023-10-31 15:23:06,384 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-31 15:23:06,396 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-31 15:23:06,407 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-31 15:23:06,418 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-31 15:23:06,429 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-31 15:23:06,503 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-31 15:23:09,493 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 15:23:09,701 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-31 15:23:12,715 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-10-31 15:23:12,724 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-31 15:23:14,787 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-10-31 15:23:14,792 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-31 15:24:47,003 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-31 15:24:47,065 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-31 15:24:52,899 [main_menu.py:verify_max_temp()] - 220/350
2023-10-31 15:24:52,899 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S220
2023-10-31 15:25:49,717 [main_menu.py:verify_max_temp()] - 0/350
2023-10-31 15:25:49,717 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S0
2023-10-31 15:30:59,778 [print.py:_callback()] - newfiles: []
2023-10-31 15:30:59,779 [print.py:_callback()] - deletedfiles: []
2023-10-31 15:30:59,779 [print.py:_callback()] - updatefiles: ['Dragonburner tap adapter (1).gcode']
2023-10-31 15:30:59,780 [print.py:update_file()] - Updating file Dragonburner tap adapter (1).gcode
2023-10-31 15:30:59,854 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-31 15:30:59,854 [printer.py:change_state()] - Adding callback for state: printing
2023-10-31 15:30:59,877 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 15:31:00,087 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-31 15:31:00,099 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-31 15:31:00,116 [job_status.py:update_file_metadata()] - Update Metadata. File: Dragonburner tap adapter (1).gcode Size: 3662350
2023-10-31 15:31:00,126 [job_status.py:show_file_thumbnail()] - Dragonburner tap adapter (1).gcode
2023-10-31 15:31:00,758 [files.py:add_file()] - File already exists: Dragonburner tap adapter (1).gcode
2023-10-31 15:31:00,761 [print.py:_callback()] - newfiles: []
2023-10-31 15:31:00,762 [print.py:_callback()] - deletedfiles: []
2023-10-31 15:31:00,762 [print.py:_callback()] - updatefiles: ['Dragonburner tap adapter (1).gcode']
2023-10-31 15:31:00,763 [print.py:update_file()] - Updating file Dragonburner tap adapter (1).gcode
2023-10-31 15:31:00,774 [print.py:_callback()] - newfiles: []
2023-10-31 15:31:00,775 [print.py:_callback()] - deletedfiles: []
2023-10-31 15:31:00,775 [print.py:_callback()] - updatefiles: ['Dragonburner tap adapter (1).gcode']
2023-10-31 15:31:00,775 [print.py:update_file()] - Updating file Dragonburner tap adapter (1).gcode
2023-10-31 15:31:08,129 [printer.py:change_state()] - Changing state from 'printing' to 'shutdown'
2023-10-31 15:31:08,130 [printer.py:change_state()] - Adding callback for state: shutdown
2023-10-31 15:31:08,172 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 15:31:08,242 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-65-g4a14962
2023-10-31 15:17:23,533 [screen.py:main()] - Python version: 3.9
2023-10-31 15:17:23,534 [screen.py:main()] - KlipperScreen version: v0.3.6-65-g4a14962
2023-10-31 15:17:23,544 [functions.py:detect_desktop_environment()] - Error:
'XDG_CURRENT_DESKTOP'

Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
2023-10-31 15:17:23,822 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-10-31 15:17:23,825 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2023-10-31 15:17:23,851 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-10-31 15:17:23,950 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-10-31 15:17:23,951 [config.py:install_language()] - Using system lang
2023-10-31 15:17:23,951 [config.py:install_language()] - Using lang en
2023-10-31 15:17:23,987 [screen.py:__init__()] - Screen resolution: 800x480
2023-10-31 15:17:23,990 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-10-31 15:17:25,587 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-10-31 15:17:25,605 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-10-31 15:17:25,622 [screen.py:initial_connection()] - Default printer: None
2023-10-31 15:17:25,623 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-10-31 15:17:25,624 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-10-31 15:17:25,718 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-31 15:17:25,739 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-10-31 15:17:25,776 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:17:25,801 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-10-31 15:17:25,804 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-10-31 15:17:25,823 [_logging.py:info()] - Websocket connected
2023-10-31 15:17:25,823 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-10-31 15:17:26,180 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:17:26,202 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:17:26,204 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-31 15:17:26,227 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-31 15:17:26,229 [printer.py:configure_cameras()] - Cameras: []
2023-10-31 15:17:26,230 [screen.py:init_printer()] - Klipper not connected
2023-10-31 15:17:29,871 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:17:29,891 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:17:29,893 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-31 15:17:29,912 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-31 15:17:29,914 [printer.py:configure_cameras()] - Cameras: []
2023-10-31 15:17:29,914 [screen.py:init_printer()] - Klipper not connected
2023-10-31 15:17:32,876 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:17:32,898 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:17:32,900 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-31 15:17:32,920 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-31 15:17:32,922 [printer.py:configure_cameras()] - Cameras: []
2023-10-31 15:17:32,946 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-31 15:17:32,989 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-31 15:17:32,993 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.420'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.008125, -0.016875, -0.038750, -0.033750, 0.040000\n-0.088750, -0.093750, -0.108750, -0.098125, -0.063750\n-0.087500, -0.107500, -0.133125, -0.126250, -0.130625\n-0.015000, -0.033750, -0.073750, -0.106250, -0.130000\n0.127500, 0.110000, 0.049375, -0.008750, -0.057500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '320.0', 'min_y': '12.0', 'max_y': '320.0'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.008125, -0.016875, -0.03875, -0.03375, 0.04], [-0.08875, -0.09375, -0.10875, -0.098125, -0.06375], [-0.0875, -0.1075, -0.133125, -0.12625, -0.130625], [-0.015, -0.03375, -0.07375, -0.10625, -0.13], [0.1275, 0.11, 0.049375, -0.00875, -0.0575]], 'min_x': 35.0, 'max_x': 320.0, 'min_y': 12.0, 'max_y': 320.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.42, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-31 15:17:32,998 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-31 15:17:32,999 [printer.py:reinit()] - # Extruders: 1
2023-10-31 15:17:32,999 [printer.py:reinit()] - # Temperature devices: 5
2023-10-31 15:17:33,000 [printer.py:reinit()] - # Fans: 2
2023-10-31 15:17:33,000 [printer.py:reinit()] - # Output pins: 1
2023-10-31 15:17:33,000 [printer.py:reinit()] - # Leds: 0
2023-10-31 15:17:33,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-31 15:17:33,036 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-31 15:17:33,317 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-31 15:17:33,359 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:17:33,361 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:17:33,362 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-31 15:17:33,363 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-31 15:17:33,364 [screen.py:init_printer()] - Printer initialized
2023-10-31 15:17:33,365 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-31 15:17:33,366 [printer.py:change_state()] - Adding callback for state: startup
2023-10-31 15:17:38,868 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:17:38,869 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:17:43,878 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:17:43,881 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:17:48,255 [printer.py:change_state()] - Changing state from 'startup' to 'disconnected'
2023-10-31 15:17:48,256 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-31 15:17:48,257 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-31 15:17:48,260 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 15:17:48,328 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-31 15:17:48,886 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:17:48,890 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:17:51,868 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:17:51,885 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:17:51,887 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-31 15:17:51,904 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-31 15:17:51,905 [printer.py:configure_cameras()] - Cameras: []
2023-10-31 15:17:51,925 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-31 15:17:51,959 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-31 15:17:51,963 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.420'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.008125, -0.016875, -0.038750, -0.033750, 0.040000\n-0.088750, -0.093750, -0.108750, -0.098125, -0.063750\n-0.087500, -0.107500, -0.133125, -0.126250, -0.130625\n-0.015000, -0.033750, -0.073750, -0.106250, -0.130000\n0.127500, 0.110000, 0.049375, -0.008750, -0.057500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '320.0', 'min_y': '12.0', 'max_y': '320.0'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.008125, -0.016875, -0.03875, -0.03375, 0.04], [-0.08875, -0.09375, -0.10875, -0.098125, -0.06375], [-0.0875, -0.1075, -0.133125, -0.12625, -0.130625], [-0.015, -0.03375, -0.07375, -0.10625, -0.13], [0.1275, 0.11, 0.049375, -0.00875, -0.0575]], 'min_x': 35.0, 'max_x': 320.0, 'min_y': 12.0, 'max_y': 320.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.42, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-31 15:17:51,968 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-31 15:17:51,969 [printer.py:reinit()] - # Extruders: 1
2023-10-31 15:17:51,969 [printer.py:reinit()] - # Temperature devices: 5
2023-10-31 15:17:51,969 [printer.py:reinit()] - # Fans: 2
2023-10-31 15:17:51,969 [printer.py:reinit()] - # Output pins: 1
2023-10-31 15:17:51,970 [printer.py:reinit()] - # Leds: 0
2023-10-31 15:17:51,993 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-31 15:17:51,996 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-31 15:17:52,280 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-31 15:17:52,300 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:17:52,302 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:17:52,303 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-31 15:17:52,303 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-31 15:17:52,305 [screen.py:init_printer()] - Printer initialized
2023-10-31 15:17:52,306 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-31 15:17:52,306 [printer.py:change_state()] - Adding callback for state: startup
2023-10-31 15:17:53,871 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:17:53,873 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:17:57,867 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:17:57,869 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:17:58,869 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:17:58,871 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:18:02,867 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:18:02,869 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:18:03,884 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:18:03,887 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:18:07,867 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:18:07,869 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:18:08,868 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:18:08,870 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:18:12,894 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:18:12,897 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:18:13,871 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:18:13,873 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:18:17,882 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:18:17,884 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:18:18,869 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:18:18,870 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:34:36,612 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:34:36,615 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:34:37,607 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:34:37,610 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:34:41,613 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:34:41,616 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:34:42,615 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:34:42,618 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:34:46,607 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:34:46,610 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:34:47,615 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:34:47,618 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:34:51,104 [printer.py:change_state()] - Changing state from 'startup' to 'disconnected'
2023-10-31 15:34:51,105 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-31 15:34:51,107 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-31 15:34:51,111 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 15:34:51,233 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-31 15:34:51,595 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:34:51,597 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:34:52,599 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:34:52,601 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:34:54,595 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:34:54,612 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:34:54,614 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-31 15:34:54,631 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-31 15:34:54,633 [printer.py:configure_cameras()] - Cameras: []
2023-10-31 15:34:54,653 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-31 15:34:54,687 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-31 15:34:54,691 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.420'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.008125, -0.016875, -0.038750, -0.033750, 0.040000\n-0.088750, -0.093750, -0.108750, -0.098125, -0.063750\n-0.087500, -0.107500, -0.133125, -0.126250, -0.130625\n-0.015000, -0.033750, -0.073750, -0.106250, -0.130000\n0.127500, 0.110000, 0.049375, -0.008750, -0.057500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '320.0', 'min_y': '12.0', 'max_y': '320.0'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.008125, -0.016875, -0.03875, -0.03375, 0.04], [-0.08875, -0.09375, -0.10875, -0.098125, -0.06375], [-0.0875, -0.1075, -0.133125, -0.12625, -0.130625], [-0.015, -0.03375, -0.07375, -0.10625, -0.13], [0.1275, 0.11, 0.049375, -0.00875, -0.0575]], 'min_x': 35.0, 'max_x': 320.0, 'min_y': 12.0, 'max_y': 320.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.42, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-31 15:34:54,696 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-31 15:34:54,697 [printer.py:reinit()] - # Extruders: 1
2023-10-31 15:34:54,697 [printer.py:reinit()] - # Temperature devices: 5
2023-10-31 15:34:54,697 [printer.py:reinit()] - # Fans: 2
2023-10-31 15:34:54,697 [printer.py:reinit()] - # Output pins: 1
2023-10-31 15:34:54,698 [printer.py:reinit()] - # Leds: 0
2023-10-31 15:34:54,720 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-31 15:34:54,723 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-31 15:34:55,010 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-31 15:34:55,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:34:55,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:34:55,034 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-31 15:34:55,034 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-31 15:34:55,035 [screen.py:init_printer()] - Printer initialized
2023-10-31 15:34:55,036 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-31 15:34:55,037 [printer.py:change_state()] - Adding callback for state: startup
2023-10-31 15:34:56,607 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:34:56,610 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:34:56,957 [printer.py:change_state()] - Changing state from 'startup' to 'disconnected'
2023-10-31 15:34:56,958 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-31 15:34:56,959 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-31 15:34:56,963 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 15:34:57,088 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-31 15:34:57,595 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:34:57,597 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:35:00,596 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:35:00,598 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:35:00,614 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:35:00,632 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:35:00,633 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-31 15:35:00,650 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-31 15:35:00,651 [printer.py:configure_cameras()] - Cameras: []
2023-10-31 15:35:00,671 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-31 15:35:00,706 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-31 15:35:00,710 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.420'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.008125, -0.016875, -0.038750, -0.033750, 0.040000\n-0.088750, -0.093750, -0.108750, -0.098125, -0.063750\n-0.087500, -0.107500, -0.133125, -0.126250, -0.130625\n-0.015000, -0.033750, -0.073750, -0.106250, -0.130000\n0.127500, 0.110000, 0.049375, -0.008750, -0.057500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '320.0', 'min_y': '12.0', 'max_y': '320.0'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.008125, -0.016875, -0.03875, -0.03375, 0.04], [-0.08875, -0.09375, -0.10875, -0.098125, -0.06375], [-0.0875, -0.1075, -0.133125, -0.12625, -0.130625], [-0.015, -0.03375, -0.07375, -0.10625, -0.13], [0.1275, 0.11, 0.049375, -0.00875, -0.0575]], 'min_x': 35.0, 'max_x': 320.0, 'min_y': 12.0, 'max_y': 320.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.42, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-31 15:35:00,716 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-31 15:35:00,716 [printer.py:reinit()] - # Extruders: 1
2023-10-31 15:35:00,716 [printer.py:reinit()] - # Temperature devices: 5
2023-10-31 15:35:00,716 [printer.py:reinit()] - # Fans: 2
2023-10-31 15:35:00,717 [printer.py:reinit()] - # Output pins: 1
2023-10-31 15:35:00,717 [printer.py:reinit()] - # Leds: 0
2023-10-31 15:35:00,739 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-31 15:35:00,742 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-31 15:35:01,026 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-31 15:35:01,046 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:35:01,047 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:35:01,048 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-31 15:35:01,049 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-31 15:35:01,050 [screen.py:init_printer()] - Printer initialized
2023-10-31 15:35:01,051 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-31 15:35:01,051 [printer.py:change_state()] - Adding callback for state: startup
2023-10-31 15:35:01,610 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:35:01,613 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:35:02,609 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:35:02,611 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:35:05,606 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:35:05,609 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:35:05,970 [printer.py:change_state()] - Changing state from 'startup' to 'shutdown'
2023-10-31 15:35:05,971 [printer.py:change_state()] - Adding callback for state: shutdown
2023-10-31 15:35:05,976 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 15:35:06,092 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-31 15:35:06,596 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:35:06,598 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:35:06,614 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:35:06,616 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:35:07,596 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:35:07,597 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:35:10,595 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:35:10,597 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:35:11,608 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:35:11,611 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:35:11,638 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:35:11,641 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:35:12,614 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:35:12,617 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-65-g4a14962
2023-10-31 15:35:37,110 [screen.py:main()] - Python version: 3.9
2023-10-31 15:35:37,112 [screen.py:main()] - KlipperScreen version: v0.3.6-65-g4a14962
2023-10-31 15:35:37,124 [functions.py:detect_desktop_environment()] - Error:
'XDG_CURRENT_DESKTOP'

Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
2023-10-31 15:35:37,441 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-10-31 15:35:37,447 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2023-10-31 15:35:37,475 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-10-31 15:35:37,575 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-10-31 15:35:37,576 [config.py:install_language()] - Using system lang
2023-10-31 15:35:37,577 [config.py:install_language()] - Using lang en
2023-10-31 15:35:37,613 [screen.py:__init__()] - Screen resolution: 800x480
2023-10-31 15:35:37,616 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-10-31 15:35:39,268 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-10-31 15:35:39,285 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-10-31 15:35:39,301 [screen.py:initial_connection()] - Default printer: None
2023-10-31 15:35:39,302 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-10-31 15:35:39,302 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-10-31 15:35:39,404 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-31 15:35:39,423 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-10-31 15:35:39,471 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:35:39,495 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-10-31 15:35:39,498 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-10-31 15:35:39,518 [_logging.py:info()] - Websocket connected
2023-10-31 15:35:39,519 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-10-31 15:35:39,867 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:35:39,891 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:35:39,894 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-31 15:35:39,918 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-31 15:35:39,922 [printer.py:configure_cameras()] - Cameras: []
2023-10-31 15:35:39,922 [screen.py:init_printer()] - Klipper not connected
2023-10-31 15:35:43,270 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:35:43,289 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:35:43,291 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-31 15:35:43,310 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-31 15:35:43,312 [printer.py:configure_cameras()] - Cameras: []
2023-10-31 15:35:43,313 [screen.py:init_printer()] - Klipper not connected
2023-10-31 15:35:46,279 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:35:46,304 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:35:46,308 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-31 15:35:46,329 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-31 15:35:46,331 [printer.py:configure_cameras()] - Cameras: []
2023-10-31 15:35:46,369 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2023-10-31 15:35:49,276 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:35:49,300 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:35:49,303 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-31 15:35:49,326 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-31 15:35:49,328 [printer.py:configure_cameras()] - Cameras: []
2023-10-31 15:35:49,351 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-31 15:35:49,458 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-31 15:35:49,462 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.420'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.008125, -0.016875, -0.038750, -0.033750, 0.040000\n-0.088750, -0.093750, -0.108750, -0.098125, -0.063750\n-0.087500, -0.107500, -0.133125, -0.126250, -0.130625\n-0.015000, -0.033750, -0.073750, -0.106250, -0.130000\n0.127500, 0.110000, 0.049375, -0.008750, -0.057500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '320.0', 'min_y': '12.0', 'max_y': '320.0'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.008125, -0.016875, -0.03875, -0.03375, 0.04], [-0.08875, -0.09375, -0.10875, -0.098125, -0.06375], [-0.0875, -0.1075, -0.133125, -0.12625, -0.130625], [-0.015, -0.03375, -0.07375, -0.10625, -0.13], [0.1275, 0.11, 0.049375, -0.00875, -0.0575]], 'min_x': 35.0, 'max_x': 320.0, 'min_y': 12.0, 'max_y': 320.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.42, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-31 15:35:49,467 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-31 15:35:49,468 [printer.py:reinit()] - # Extruders: 1
2023-10-31 15:35:49,468 [printer.py:reinit()] - # Temperature devices: 5
2023-10-31 15:35:49,468 [printer.py:reinit()] - # Fans: 2
2023-10-31 15:35:49,468 [printer.py:reinit()] - # Output pins: 1
2023-10-31 15:35:49,468 [printer.py:reinit()] - # Leds: 0
2023-10-31 15:35:49,491 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-31 15:35:49,494 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-31 15:35:49,796 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-31 15:35:49,817 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:35:49,819 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:35:49,820 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-31 15:35:49,820 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-31 15:35:49,821 [screen.py:init_printer()] - Printer initialized
2023-10-31 15:35:49,822 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-10-31 15:35:49,823 [printer.py:change_state()] - Adding callback for state: ready
2023-10-31 15:35:49,829 [screen.py:_load_panel()] - Loading panel: main_menu
2023-10-31 15:35:49,962 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-31 15:35:49,975 [main_menu.py:add_device()] - Adding device: extruder
2023-10-31 15:35:49,986 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-31 15:35:49,996 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-31 15:35:50,006 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-31 15:35:50,016 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-31 15:35:50,026 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-31 15:35:50,095 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-31 15:35:50,098 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: []
2023-10-31 15:35:55,270 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:35:55,298 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-31 15:35:55,321 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-31 15:35:55,323 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-31 15:37:46,484 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-31 15:37:46,486 [printer.py:change_state()] - Adding callback for state: printing
2023-10-31 15:37:46,513 [screen.py:_load_panel()] - Loading panel: job_status
2023-10-31 15:37:46,776 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-31 15:37:46,788 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-31 15:37:46,817 [job_status.py:update_file_metadata()] - Update Metadata. File: Dragonburner tap adapter (1).gcode Size: 3704486
2023-10-31 15:37:46,831 [job_status.py:show_file_thumbnail()] - Dragonburner tap adapter (1).gcode
2023-10-31 15:37:47,280 [files.py:add_file()] - File already exists: Dragonburner tap adapter (1).gcode
2023-10-31 15:37:54,258 [printer.py:change_state()] - Changing state from 'printing' to 'shutdown'
2023-10-31 15:37:54,259 [printer.py:change_state()] - Adding callback for state: shutdown
2023-10-31 15:37:54,307 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 15:37:54,377 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-65-g4a14962
2023-10-31 15:46:05,098 [screen.py:main()] - Python version: 3.9
2023-10-31 15:46:05,098 [screen.py:main()] - KlipperScreen version: v0.3.6-65-g4a14962
2023-10-31 15:46:05,111 [functions.py:detect_desktop_environment()] - Error:
'XDG_CURRENT_DESKTOP'

Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
2023-10-31 15:46:05,400 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-10-31 15:46:05,406 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2023-10-31 15:46:05,434 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-10-31 15:46:05,622 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-10-31 15:46:05,623 [config.py:install_language()] - Using system lang
2023-10-31 15:46:05,624 [config.py:install_language()] - Using lang en
2023-10-31 15:46:05,658 [screen.py:__init__()] - Screen resolution: 800x480
2023-10-31 15:46:05,661 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-10-31 15:46:07,149 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-10-31 15:46:07,162 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-10-31 15:46:07,175 [screen.py:initial_connection()] - Default printer: None
2023-10-31 15:46:07,176 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-10-31 15:46:07,178 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-10-31 15:46:07,434 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-31 15:46:07,449 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-10-31 15:46:07,479 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2023-10-31 15:46:17,301 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-10-31 15:46:17,327 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:46:17,349 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-10-31 15:46:17,352 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-10-31 15:46:17,366 [_logging.py:info()] - Websocket connected
2023-10-31 15:46:17,366 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-10-31 15:46:17,391 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:46:17,429 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:46:17,431 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'authorization', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-31 15:46:17,454 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-31 15:46:17,456 [printer.py:configure_cameras()] - Cameras: []
2023-10-31 15:46:17,489 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2023-10-31 15:46:20,317 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:46:20,335 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:46:20,337 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'authorization', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-31 15:46:20,353 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-31 15:46:20,355 [printer.py:configure_cameras()] - Cameras: []
2023-10-31 15:46:20,374 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-31 15:46:20,600 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-31 15:46:20,604 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.420'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.008125, -0.016875, -0.038750, -0.033750, 0.040000\n-0.088750, -0.093750, -0.108750, -0.098125, -0.063750\n-0.087500, -0.107500, -0.133125, -0.126250, -0.130625\n-0.015000, -0.033750, -0.073750, -0.106250, -0.130000\n0.127500, 0.110000, 0.049375, -0.008750, -0.057500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '320.0', 'min_y': '12.0', 'max_y': '320.0'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.008125, -0.016875, -0.03875, -0.03375, 0.04], [-0.08875, -0.09375, -0.10875, -0.098125, -0.06375], [-0.0875, -0.1075, -0.133125, -0.12625, -0.130625], [-0.015, -0.03375, -0.07375, -0.10625, -0.13], [0.1275, 0.11, 0.049375, -0.00875, -0.0575]], 'min_x': 35.0, 'max_x': 320.0, 'min_y': 12.0, 'max_y': 320.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.42, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-31 15:46:20,609 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-31 15:46:20,609 [printer.py:reinit()] - # Extruders: 1
2023-10-31 15:46:20,609 [printer.py:reinit()] - # Temperature devices: 5
2023-10-31 15:46:20,610 [printer.py:reinit()] - # Fans: 2
2023-10-31 15:46:20,610 [printer.py:reinit()] - # Output pins: 1
2023-10-31 15:46:20,610 [printer.py:reinit()] - # Leds: 0
2023-10-31 15:46:20,634 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-31 15:46:20,637 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-31 15:46:20,924 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-31 15:46:20,944 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:46:20,946 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:46:20,947 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-31 15:46:20,947 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-31 15:46:20,948 [screen.py:init_printer()] - Printer initialized
2023-10-31 15:46:20,950 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-10-31 15:46:20,950 [printer.py:change_state()] - Adding callback for state: error
2023-10-31 15:46:20,954 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 15:46:21,052 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-31 15:46:26,334 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:46:26,337 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:46:31,315 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:46:31,317 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:46:34,558 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2023-10-31 15:46:34,559 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-31 15:46:34,561 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-31 15:46:34,563 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 15:46:34,629 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-31 15:46:36,328 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:46:36,334 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:46:38,315 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:46:38,333 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:46:38,335 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'authorization', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-31 15:46:38,352 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-31 15:46:38,354 [printer.py:configure_cameras()] - Cameras: []
2023-10-31 15:46:38,373 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-31 15:46:38,408 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-31 15:46:38,412 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.420'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.008125, -0.016875, -0.038750, -0.033750, 0.040000\n-0.088750, -0.093750, -0.108750, -0.098125, -0.063750\n-0.087500, -0.107500, -0.133125, -0.126250, -0.130625\n-0.015000, -0.033750, -0.073750, -0.106250, -0.130000\n0.127500, 0.110000, 0.049375, -0.008750, -0.057500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '320.0', 'min_y': '12.0', 'max_y': '320.0'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.008125, -0.016875, -0.03875, -0.03375, 0.04], [-0.08875, -0.09375, -0.10875, -0.098125, -0.06375], [-0.0875, -0.1075, -0.133125, -0.12625, -0.130625], [-0.015, -0.03375, -0.07375, -0.10625, -0.13], [0.1275, 0.11, 0.049375, -0.00875, -0.0575]], 'min_x': 35.0, 'max_x': 320.0, 'min_y': 12.0, 'max_y': 320.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.42, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-31 15:46:38,417 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-31 15:46:38,418 [printer.py:reinit()] - # Extruders: 1
2023-10-31 15:46:38,418 [printer.py:reinit()] - # Temperature devices: 5
2023-10-31 15:46:38,418 [printer.py:reinit()] - # Fans: 2
2023-10-31 15:46:38,418 [printer.py:reinit()] - # Output pins: 1
2023-10-31 15:46:38,419 [printer.py:reinit()] - # Leds: 0
2023-10-31 15:46:38,442 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-31 15:46:38,445 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-31 15:46:38,704 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-31 15:46:38,761 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:46:38,764 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:46:38,766 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-31 15:46:38,766 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-31 15:46:38,768 [screen.py:init_printer()] - Printer initialized
2023-10-31 15:46:38,769 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-31 15:46:38,770 [printer.py:change_state()] - Adding callback for state: startup
2023-10-31 15:46:39,904 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-31 15:46:39,904 [printer.py:change_state()] - Adding callback for state: ready
2023-10-31 15:46:39,909 [screen.py:_load_panel()] - Loading panel: main_menu
2023-10-31 15:46:40,044 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-31 15:46:40,057 [main_menu.py:add_device()] - Adding device: extruder
2023-10-31 15:46:40,068 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-31 15:46:40,080 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-31 15:46:40,090 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-31 15:46:40,099 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-31 15:46:40,109 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-31 15:46:40,180 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-31 15:46:40,183 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: []
2023-10-31 15:46:41,316 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:46:41,318 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-31 15:46:44,322 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:46:44,352 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-31 15:46:44,378 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-31 15:46:44,380 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-31 15:46:46,315 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:46:46,343 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-31 15:46:46,364 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-31 15:46:46,366 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-31 15:47:41,089 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-31 15:47:41,089 [printer.py:change_state()] - Adding callback for state: printing
2023-10-31 15:47:41,115 [screen.py:_load_panel()] - Loading panel: job_status
2023-10-31 15:47:41,382 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-31 15:47:41,395 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-31 15:47:41,433 [job_status.py:update_file_metadata()] - Update Metadata. File: Dragonburner tap adapter (1).gcode Size: 3704486
2023-10-31 15:47:41,448 [job_status.py:show_file_thumbnail()] - Dragonburner tap adapter (1).gcode
2023-10-31 15:47:42,056 [files.py:add_file()] - File already exists: Dragonburner tap adapter (1).gcode
2023-10-31 15:54:34,865 [screen.py:_load_panel()] - Loading panel: fine_tune
2023-10-31 15:54:35,003 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2023-10-31 15:54:37,711 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2023-10-31 15:54:38,938 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-10-31 15:54:39,849 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-10-31 15:54:40,945 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-10-31 15:54:41,865 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-10-31 15:55:45,114 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-10-31 15:56:09,506 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2023-10-31 15:57:18,995 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-10-31 15:57:20,673 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-10-31 15:57:49,130 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-31 15:57:49,224 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-31 15:57:49,250 [job_status.py:update_file_metadata()] - Update Metadata. File: Dragonburner tap adapter (1).gcode Size: 3704486
2023-10-31 15:57:49,261 [job_status.py:show_file_thumbnail()] - Dragonburner tap adapter (1).gcode
2023-10-31 15:57:52,001 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2023-10-31 15:57:52,690 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-31 15:57:52,691 [job_status.py:cancel_confirm()] - Canceling print
2023-10-31 15:57:52,692 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-10-31 15:57:52,699 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-10-31 15:57:52,895 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-10-31 15:57:55,641 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-31 15:57:55,642 [printer.py:change_state()] - Adding callback for state: ready
2023-10-31 15:57:55,925 [printer.py:get_probe()] - Probe type: probe
2023-10-31 15:57:55,991 [KlippyGtk.py:Dialog()] - Showing dialog Save Z (width=800, height=480)
2023-10-31 15:57:57,939 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-31 15:57:57,939 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: Z_OFFSET_APPLY_PROBE
2023-10-31 15:57:57,941 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SAVE_CONFIG
2023-10-31 15:57:58,030 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2023-10-31 15:57:59,104 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-31 15:57:59,104 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-31 15:57:59,107 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-31 15:57:59,112 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-31 15:57:59,113 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 15:57:59,182 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-31 15:58:01,499 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffb432b840 (GtkDialog at 0x105a8b20)>
2023-10-31 15:58:01,537 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2023-10-31 15:58:02,609 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:58:02,626 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 15:58:02,629 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'authorization', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-31 15:58:02,645 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-31 15:58:02,647 [printer.py:configure_cameras()] - Cameras: []
2023-10-31 15:58:02,667 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-31 15:58:02,707 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-31 15:58:02,713 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.360'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.015625, -0.024375, -0.025625\n-0.069375, -0.079375, -0.071250\n-0.094375, -0.111250, -0.108125', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '128.2', 'max_x': '208.11999999999998', 'min_y': '51.55', 'max_y': '131.47'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.015625, -0.024375, -0.025625], [-0.069375, -0.079375, -0.07125], [-0.094375, -0.11125, -0.108125]], 'min_x': 128.2, 'max_x': 208.11999999999998, 'min_y': 51.55, 'max_y': 131.47, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.36, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-31 15:58:02,721 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-31 15:58:02,721 [printer.py:reinit()] - # Extruders: 1
2023-10-31 15:58:02,722 [printer.py:reinit()] - # Temperature devices: 5
2023-10-31 15:58:02,722 [printer.py:reinit()] - # Fans: 2
2023-10-31 15:58:02,723 [printer.py:reinit()] - # Output pins: 1
2023-10-31 15:58:02,723 [printer.py:reinit()] - # Leds: 0
2023-10-31 15:58:02,751 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-31 15:58:02,755 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-31 15:58:03,023 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-31 15:58:03,064 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 15:58:03,088 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-31 15:58:03,109 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-31 15:58:03,111 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-31 15:58:03,112 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-31 15:58:03,113 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-31 15:58:03,114 [screen.py:init_printer()] - Printer initialized
2023-10-31 15:58:03,115 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-31 15:58:03,115 [printer.py:change_state()] - Adding callback for state: startup
2023-10-31 15:58:03,947 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-31 15:58:03,947 [printer.py:change_state()] - Adding callback for state: ready
2023-10-31 15:58:03,957 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-31 15:58:03,958 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 15:58:04,078 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-31 15:58:04,092 [main_menu.py:add_device()] - Adding device: extruder
2023-10-31 15:58:04,102 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-31 15:58:04,113 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-31 15:58:04,123 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-31 15:58:04,133 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-31 15:58:04,143 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-31 15:58:04,214 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-31 15:58:09,301 [screen.py:_load_panel()] - Loading panel: move
2023-10-31 15:58:09,500 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-31 15:58:12,185 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-10-31 15:58:12,194 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-31 15:58:12,217 [screen.py:show_popup_message()] - error: Must home axis first: 0.000 0.000 25.000 [0.000]
2023-10-31 15:58:15,113 [screen.py:_load_panel()] - Loading panel: gcode_macros
2023-10-31 15:58:15,190 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > gcode_macros
2023-10-31 15:58:17,299 [screen.py:show_popup_message()] - echo: FAKE_POSITION 
2023-10-31 15:58:17,313 [screen.py:_send_action()] - printer.gcode.script: {'script': 'FAKE_POSITION'}
2023-10-31 15:58:19,944 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-31 15:58:20,058 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-31 15:58:21,168 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-10-31 15:58:21,174 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-31 15:58:30,528 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-31 15:58:30,619 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-31 15:58:32,082 [screen.py:_load_panel()] - Loading panel: print
2023-10-31 15:58:32,095 [print.py:__init__()] - 24h time is True
2023-10-31 15:58:32,151 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2023-10-31 15:58:32,152 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-31 15:58:38,190 [KlippyGtk.py:Dialog()] - Showing dialog Print Dragonburner tap adapter (1).gcode (width=800, height=480)
2023-10-31 15:58:39,347 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-31 15:58:39,347 [print.py:confirm_print_response()] - Starting print: Dragonburner tap adapter (1).gcode
2023-10-31 15:58:39,347 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2023-10-31 15:58:39,557 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-31 15:58:39,558 [printer.py:change_state()] - Adding callback for state: printing
2023-10-31 15:58:39,576 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 15:58:39,816 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-31 15:58:39,827 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-31 15:58:39,843 [job_status.py:update_file_metadata()] - Update Metadata. File: Dragonburner tap adapter (1).gcode Size: 3704486
2023-10-31 15:58:39,852 [job_status.py:show_file_thumbnail()] - Dragonburner tap adapter (1).gcode
2023-10-31 16:03:22,845 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 16:03:22,989 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2023-10-31 16:03:44,538 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2023-10-31 16:15:05,007 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-31 16:15:05,062 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-31 16:15:05,082 [job_status.py:update_file_metadata()] - Update Metadata. File: Dragonburner tap adapter (1).gcode Size: 3704486
2023-10-31 16:15:05,091 [job_status.py:show_file_thumbnail()] - Dragonburner tap adapter (1).gcode
2023-10-31 17:15:05,591 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-31 17:34:00,379 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-31 17:34:00,413 [screen.py:wake_screen()] - Screen wake up
2023-10-31 17:34:00,469 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-10-31 17:34:04,641 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-31 17:34:04,642 [printer.py:change_state()] - Adding callback for state: ready
2023-10-31 18:34:00,597 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-31 18:40:31,963 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffb410bec0 (GtkDialog at 0x1076a8a0)>
2023-10-31 18:40:32,023 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2023-10-31 18:40:34,978 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-31 18:40:34,979 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-31 18:40:34,982 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-31 18:40:34,983 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-31 18:40:35,024 [screen.py:wake_screen()] - Screen wake up
2023-10-31 18:40:35,084 [screen.py:close_screensaver()] - Restoring Dialog <Gtk.Dialog object at 0xffffb43301c0 (GtkDialog at 0x10c2f940)>
2023-10-31 18:40:35,093 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-31 18:40:35,095 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 18:40:35,197 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-31 18:40:38,617 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 18:40:38,641 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-31 18:40:38,644 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'authorization', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-31 18:40:38,667 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-31 18:40:38,669 [printer.py:configure_cameras()] - Cameras: []
2023-10-31 18:40:38,696 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-31 18:40:38,741 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-31 18:40:38,745 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.370'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.038125, -0.045625, -0.045000\n-0.088750, -0.100000, -0.085625\n-0.114375, -0.126875, -0.125000', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '128.2', 'max_x': '208.13', 'min_y': '51.55', 'max_y': '131.47'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.038125, -0.045625, -0.045], [-0.08875, -0.1, -0.085625], [-0.114375, -0.126875, -0.125]], 'min_x': 128.2, 'max_x': 208.13, 'min_y': 51.55, 'max_y': 131.47, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.37, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-31 18:40:38,753 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-10-31 18:40:38,753 [printer.py:reinit()] - # Extruders: 1
2023-10-31 18:40:38,753 [printer.py:reinit()] - # Temperature devices: 5
2023-10-31 18:40:38,753 [printer.py:reinit()] - # Fans: 2
2023-10-31 18:40:38,754 [printer.py:reinit()] - # Output pins: 1
2023-10-31 18:40:38,754 [printer.py:reinit()] - # Leds: 0
2023-10-31 18:40:38,777 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-31 18:40:38,780 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-31 18:40:39,060 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-10-31 18:40:39,111 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-31 18:40:39,121 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-10-31 18:40:39,141 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-31 18:40:39,144 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-31 18:40:39,145 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-10-31 18:40:39,145 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-31 18:40:39,146 [screen.py:init_printer()] - Printer initialized
2023-10-31 18:40:39,147 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-31 18:40:39,148 [printer.py:change_state()] - Adding callback for state: startup
2023-10-31 18:40:39,732 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-31 18:40:39,732 [printer.py:change_state()] - Adding callback for state: ready
2023-10-31 18:40:39,738 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 18:40:39,856 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-31 18:40:39,870 [main_menu.py:add_device()] - Adding device: extruder
2023-10-31 18:40:39,880 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-31 18:40:39,891 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-31 18:40:39,901 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-31 18:40:39,911 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-31 18:40:39,921 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-31 18:40:39,995 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-31 18:46:15,996 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 18:46:16,169 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-31 18:46:17,245 [print.py:_callback()] - newfiles: ['.thumbs/Cowl_NoProbe (3)-32x32.png']
2023-10-31 18:46:17,246 [print.py:_callback()] - deletedfiles: []
2023-10-31 18:46:17,246 [print.py:_callback()] - updatefiles: []
2023-10-31 18:46:17,256 [print.py:_callback()] - newfiles: ['.thumbs/Cowl_NoProbe (3)-400x300.png']
2023-10-31 18:46:17,257 [print.py:_callback()] - deletedfiles: []
2023-10-31 18:46:17,258 [print.py:_callback()] - updatefiles: []
2023-10-31 18:46:17,267 [print.py:_callback()] - newfiles: ['Cowl_NoProbe (3).gcode']
2023-10-31 18:46:17,291 [print.py:_callback()] - deletedfiles: []
2023-10-31 18:46:17,291 [print.py:_callback()] - updatefiles: []
2023-10-31 18:46:17,292 [files.py:_callback()] - Error in getting metadata for .thumbs/Cowl_NoProbe (3)-32x32.png. Retrying in 6 seconds
2023-10-31 18:46:17,293 [files.py:_callback()] - Error in getting metadata for .thumbs/Cowl_NoProbe (3)-400x300.png. Retrying in 6 seconds
2023-10-31 18:46:17,299 [print.py:_callback()] - newfiles: []
2023-10-31 18:46:17,300 [print.py:_callback()] - deletedfiles: []
2023-10-31 18:46:17,300 [print.py:_callback()] - updatefiles: ['Cowl_NoProbe (3).gcode']
2023-10-31 18:46:17,301 [print.py:update_file()] - Updating file Cowl_NoProbe (3).gcode
2023-10-31 18:46:17,469 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-31 18:46:17,469 [printer.py:change_state()] - Adding callback for state: printing
2023-10-31 18:46:17,486 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 18:46:17,723 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-31 18:46:17,734 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-31 18:46:17,750 [job_status.py:update_file_metadata()] - Update Metadata. File: Cowl_NoProbe (3).gcode Size: 6133554
2023-10-31 18:46:17,761 [job_status.py:show_file_thumbnail()] - Cowl_NoProbe (3).gcode
2023-10-31 18:57:36,826 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 18:57:36,997 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2023-10-31 18:57:39,109 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-10-31 18:57:41,981 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-10-31 18:57:47,261 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-10-31 18:57:53,422 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-10-31 18:57:57,065 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-10-31 18:58:09,253 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-10-31 18:58:27,486 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-10-31 18:58:34,322 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-31 18:58:34,404 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-31 18:58:34,434 [job_status.py:update_file_metadata()] - Update Metadata. File: Cowl_NoProbe (3).gcode Size: 6133554
2023-10-31 18:58:34,450 [job_status.py:show_file_thumbnail()] - Cowl_NoProbe (3).gcode
2023-10-31 18:58:35,869 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2023-10-31 18:58:37,446 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-31 18:58:37,447 [job_status.py:cancel_confirm()] - Canceling print
2023-10-31 18:58:37,449 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-10-31 18:58:37,459 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-10-31 18:58:38,029 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-10-31 18:58:39,314 [job_status.py:close_panel()] - Closing job_status panel
2023-10-31 18:58:39,318 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 18:58:39,442 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-31 18:58:39,455 [main_menu.py:add_device()] - Adding device: extruder
2023-10-31 18:58:39,465 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-31 18:58:39,476 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-31 18:58:39,486 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-31 18:58:39,496 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-31 18:58:39,506 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-31 18:58:39,638 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-31 18:58:40,958 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 18:58:41,107 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-31 18:58:41,527 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-31 18:58:41,527 [printer.py:change_state()] - Adding callback for state: ready
2023-10-31 18:58:41,538 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 18:58:41,661 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-31 18:58:41,678 [main_menu.py:add_device()] - Adding device: extruder
2023-10-31 18:58:41,689 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-31 18:58:41,699 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-31 18:58:41,710 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-31 18:58:41,725 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-31 18:58:41,739 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-31 18:58:41,846 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-31 18:58:42,236 [screen.py:_load_panel()] - Loading panel: temperature
2023-10-31 18:58:42,268 [temperature.py:add_device()] - Adding device: extruder
2023-10-31 18:58:42,283 [temperature.py:add_device()] - Adding device: heater_bed
2023-10-31 18:58:42,295 [temperature.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-10-31 18:58:42,305 [temperature.py:add_device()] - Adding device: temperature_sensor MCU
2023-10-31 18:58:42,315 [temperature.py:add_device()] - Adding device: temperature_sensor SoC
2023-10-31 18:58:42,325 [temperature.py:add_device()] - Adding device: temperature_sensor chamber
2023-10-31 18:58:42,336 [temperature.py:select_heater()] - Selecting extruder
2023-10-31 18:58:42,338 [temperature.py:select_heater()] - Selecting heater_bed
2023-10-31 18:58:42,406 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2023-10-31 18:58:45,162 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-31 18:58:45,252 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-31 18:58:46,340 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 18:58:46,486 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-31 18:58:47,491 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-10-31 18:58:47,500 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-31 18:59:20,074 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-31 18:59:20,184 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-31 18:59:24,192 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 18:59:24,211 [print.py:__init__()] - 24h time is True
2023-10-31 18:59:24,285 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2023-10-31 18:59:24,286 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-31 18:59:24,460 [print.py:_callback()] - newfiles: []
2023-10-31 18:59:24,461 [print.py:_callback()] - deletedfiles: ['.thumbs/Cowl_NoProbe (3)-32x32.png', '.thumbs/Cowl_NoProbe (3)-400x300.png']
2023-10-31 18:59:24,461 [print.py:_callback()] - updatefiles: []
2023-10-31 18:59:24,462 [print.py:_callback()] - newfiles: []
2023-10-31 18:59:24,462 [print.py:_callback()] - deletedfiles: ['.thumbs/Cowl_NoProbe (3)-32x32.png', '.thumbs/Cowl_NoProbe (3)-400x300.png']
2023-10-31 18:59:24,463 [print.py:_callback()] - updatefiles: []
2023-10-31 18:59:24,463 [print.py:_callback()] - newfiles: []
2023-10-31 18:59:24,464 [print.py:_callback()] - deletedfiles: ['.thumbs/Cowl_NoProbe (3)-32x32.png']
2023-10-31 18:59:24,464 [print.py:_callback()] - updatefiles: []
2023-10-31 18:59:24,465 [print.py:_callback()] - newfiles: []
2023-10-31 18:59:24,466 [print.py:_callback()] - deletedfiles: ['.thumbs/Cowl_NoProbe (3)-32x32.png']
2023-10-31 18:59:24,466 [print.py:_callback()] - updatefiles: []
2023-10-31 18:59:24,466 [print.py:_callback()] - newfiles: []
2023-10-31 18:59:24,467 [print.py:_callback()] - deletedfiles: ['.thumbs/Cowl_NoProbe (3)-400x300.png']
2023-10-31 18:59:24,467 [print.py:_callback()] - updatefiles: []
2023-10-31 18:59:24,468 [print.py:_callback()] - newfiles: []
2023-10-31 18:59:24,469 [print.py:_callback()] - deletedfiles: ['.thumbs/Cowl_NoProbe (3)-400x300.png']
2023-10-31 18:59:24,469 [print.py:_callback()] - updatefiles: []
2023-10-31 18:59:31,280 [KlippyGtk.py:Dialog()] - Showing dialog Print Cowl_NoProbe (3).gcode (width=800, height=480)
2023-10-31 18:59:32,585 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-31 18:59:32,586 [print.py:confirm_print_response()] - Starting print: Cowl_NoProbe (3).gcode
2023-10-31 18:59:32,587 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2023-10-31 18:59:32,681 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-31 18:59:32,682 [printer.py:change_state()] - Adding callback for state: printing
2023-10-31 18:59:32,700 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 18:59:32,956 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-31 18:59:32,968 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-31 18:59:32,986 [job_status.py:update_file_metadata()] - Update Metadata. File: Cowl_NoProbe (3).gcode Size: 6133554
2023-10-31 18:59:32,996 [job_status.py:show_file_thumbnail()] - Cowl_NoProbe (3).gcode
2023-10-31 19:59:32,610 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-31 21:10:31,603 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-31 21:10:31,630 [screen.py:wake_screen()] - Screen wake up
2023-10-31 21:10:31,683 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-10-31 21:10:37,105 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-31 21:10:37,106 [printer.py:change_state()] - Adding callback for state: ready
2023-10-31 21:15:36,683 [print.py:_callback()] - newfiles: ['.thumbs/Orbiter2_Mount (2)-32x32.png']
2023-10-31 21:15:36,684 [print.py:_callback()] - deletedfiles: []
2023-10-31 21:15:36,685 [print.py:_callback()] - updatefiles: []
2023-10-31 21:15:36,686 [print.py:_callback()] - newfiles: ['.thumbs/Orbiter2_Mount (2)-32x32.png']
2023-10-31 21:15:36,687 [print.py:_callback()] - deletedfiles: []
2023-10-31 21:15:36,687 [print.py:_callback()] - updatefiles: []
2023-10-31 21:15:36,699 [print.py:_callback()] - newfiles: ['.thumbs/Orbiter2_Mount (2)-400x300.png']
2023-10-31 21:15:36,699 [print.py:_callback()] - deletedfiles: []
2023-10-31 21:15:36,700 [print.py:_callback()] - updatefiles: []
2023-10-31 21:15:36,705 [print.py:_callback()] - newfiles: ['.thumbs/Orbiter2_Mount (2)-400x300.png']
2023-10-31 21:15:36,706 [print.py:_callback()] - deletedfiles: []
2023-10-31 21:15:36,706 [print.py:_callback()] - updatefiles: []
2023-10-31 21:15:36,708 [files.py:_callback()] - Error in getting metadata for .thumbs/Orbiter2_Mount (2)-32x32.png. Retrying in 6 seconds
2023-10-31 21:15:36,714 [print.py:_callback()] - newfiles: ['Orbiter2_Mount (2).gcode']
2023-10-31 21:15:36,750 [print.py:_callback()] - deletedfiles: []
2023-10-31 21:15:36,751 [print.py:_callback()] - updatefiles: []
2023-10-31 21:15:36,752 [print.py:_callback()] - newfiles: ['Orbiter2_Mount (2).gcode']
2023-10-31 21:15:36,753 [print.py:_callback()] - deletedfiles: []
2023-10-31 21:15:36,754 [print.py:_callback()] - updatefiles: []
2023-10-31 21:15:36,755 [files.py:_callback()] - Error in getting metadata for .thumbs/Orbiter2_Mount (2)-400x300.png. Retrying in 6 seconds
2023-10-31 21:15:36,759 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-31 21:15:36,759 [printer.py:change_state()] - Adding callback for state: printing
2023-10-31 21:15:36,771 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2023-10-31 21:15:36,779 [job_status.py:update_file_metadata()] - Update Metadata. File: Orbiter2_Mount (2).gcode Size: 754158
2023-10-31 21:15:36,788 [job_status.py:show_file_thumbnail()] - Orbiter2_Mount (2).gcode
2023-10-31 21:15:36,854 [print.py:_callback()] - newfiles: []
2023-10-31 21:15:36,854 [print.py:_callback()] - deletedfiles: []
2023-10-31 21:15:36,855 [print.py:_callback()] - updatefiles: ['Orbiter2_Mount (2).gcode']
2023-10-31 21:15:36,855 [print.py:update_file()] - Updating file Orbiter2_Mount (2).gcode
2023-10-31 21:15:36,857 [print.py:_callback()] - newfiles: []
2023-10-31 21:15:36,857 [print.py:_callback()] - deletedfiles: []
2023-10-31 21:15:36,858 [print.py:_callback()] - updatefiles: ['Orbiter2_Mount (2).gcode']
2023-10-31 21:15:36,858 [print.py:update_file()] - Updating file Orbiter2_Mount (2).gcode
2023-10-31 21:15:36,864 [screen.py:show_panel()] - Reinitializing panel
2023-10-31 21:15:37,097 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-31 21:15:37,109 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-31 21:15:37,125 [job_status.py:update_file_metadata()] - Update Metadata. File: Orbiter2_Mount (2).gcode Size: 754158
2023-10-31 21:15:37,134 [job_status.py:show_file_thumbnail()] - Orbiter2_Mount (2).gcode
2023-10-31 21:44:19,199 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-10-31 21:44:25,438 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-31 21:44:25,438 [printer.py:change_state()] - Adding callback for state: ready
2023-10-31 22:10:32,591 [screen.py:show_screensaver()] - Showing Screensaver
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-65-g4a14962
2023-11-01 05:17:22,811 [screen.py:main()] - Python version: 3.9
2023-11-01 05:17:22,812 [screen.py:main()] - KlipperScreen version: v0.3.6-65-g4a14962
2023-11-01 05:17:22,823 [functions.py:detect_desktop_environment()] - Error:
'XDG_CURRENT_DESKTOP'

Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
2023-11-01 05:17:23,209 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-11-01 05:17:23,212 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2023-11-01 05:17:23,249 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-11-01 05:17:23,387 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-11-01 05:17:23,388 [config.py:install_language()] - Using system lang
2023-11-01 05:17:23,388 [config.py:install_language()] - Using lang en
2023-11-01 05:17:23,422 [screen.py:__init__()] - Screen resolution: 800x480
2023-11-01 05:17:23,424 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-11-01 05:17:24,963 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-11-01 05:17:24,977 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-11-01 05:17:24,988 [screen.py:initial_connection()] - Default printer: None
2023-11-01 05:17:24,989 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-01 05:17:24,994 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-11-01 05:17:25,094 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-01 05:17:25,121 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-01 05:17:25,166 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-01 05:17:25,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-01 05:17:25,194 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-01 05:17:25,213 [_logging.py:info()] - Websocket connected
2023-11-01 05:17:25,214 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-01 05:17:25,569 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-01 05:17:25,595 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-01 05:17:25,597 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-01 05:17:25,621 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-01 05:17:25,624 [printer.py:configure_cameras()] - Cameras: []
2023-11-01 05:17:25,625 [screen.py:init_printer()] - Klipper not connected
2023-11-01 05:17:29,311 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-01 05:17:29,331 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-01 05:17:29,333 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-01 05:17:29,352 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-01 05:17:29,354 [printer.py:configure_cameras()] - Cameras: []
2023-11-01 05:17:29,355 [screen.py:init_printer()] - Klipper not connected
2023-11-01 05:17:32,327 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-01 05:17:32,358 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-01 05:17:32,361 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-01 05:17:32,388 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-01 05:17:32,390 [printer.py:configure_cameras()] - Cameras: []
2023-11-01 05:17:32,430 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-01 05:17:32,479 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-01 05:17:32,484 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'max_extrude_cross_section': '5', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.370'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.038125, -0.045625, -0.045000\n-0.088750, -0.100000, -0.085625\n-0.114375, -0.126875, -0.125000', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '128.2', 'max_x': '208.13', 'min_y': '51.55', 'max_y': '131.47'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.038125, -0.045625, -0.045], [-0.08875, -0.1, -0.085625], [-0.114375, -0.126875, -0.125]], 'min_x': 128.2, 'max_x': 208.13, 'min_y': 51.55, 'max_y': 131.47, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.37, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-01 05:17:32,488 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-11-01 05:17:32,489 [printer.py:reinit()] - # Extruders: 1
2023-11-01 05:17:32,489 [printer.py:reinit()] - # Temperature devices: 5
2023-11-01 05:17:32,490 [printer.py:reinit()] - # Fans: 2
2023-11-01 05:17:32,490 [printer.py:reinit()] - # Output pins: 1
2023-11-01 05:17:32,491 [printer.py:reinit()] - # Leds: 0
2023-11-01 05:17:32,524 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-01 05:17:32,527 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-01 05:17:32,802 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-11-01 05:17:32,827 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-01 05:17:32,829 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-11-01 05:17:32,830 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-11-01 05:17:32,831 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-01 05:17:32,832 [screen.py:init_printer()] - Printer initialized
2023-11-01 05:17:32,834 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-11-01 05:17:32,834 [printer.py:change_state()] - Adding callback for state: startup
2023-11-01 05:17:34,729 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-11-01 05:17:34,729 [printer.py:change_state()] - Adding callback for state: ready
2023-11-01 05:17:34,734 [screen.py:_load_panel()] - Loading panel: main_menu
2023-11-01 05:17:34,862 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-01 05:17:34,877 [main_menu.py:add_device()] - Adding device: extruder
2023-11-01 05:17:34,887 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-01 05:17:34,897 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-01 05:17:34,907 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-01 05:17:34,917 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-01 05:17:34,927 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-01 05:17:35,004 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-01 05:17:35,006 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: []
2023-11-01 05:17:38,326 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-01 05:17:38,411 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-11-01 05:17:38,446 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-01 05:17:38,448 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-01 19:54:31,017 [files.py:_callback()] - Error in getting metadata for .thumbs/NeoPixel_Mount-32x32.png. Retrying in 6 seconds
2023-11-01 19:54:31,021 [files.py:_callback()] - Error in getting metadata for .thumbs/NeoPixel_Mount-400x300.png. Retrying in 6 seconds
2023-11-01 19:54:31,078 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-01 19:54:31,078 [printer.py:change_state()] - Adding callback for state: printing
2023-11-01 19:54:31,092 [screen.py:_load_panel()] - Loading panel: job_status
2023-11-01 19:54:31,359 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-01 19:54:31,373 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-01 19:54:31,403 [job_status.py:update_file_metadata()] - Update Metadata. File: NeoPixel_Mount.gcode Size: 879978
2023-11-01 19:54:31,417 [job_status.py:show_file_thumbnail()] - NeoPixel_Mount.gcode
2023-11-01 20:09:49,692 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=834, height=480)
2023-11-01 20:09:53,588 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-01 20:09:53,588 [job_status.py:cancel_confirm()] - Canceling print
2023-11-01 20:09:53,589 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-11-01 20:09:53,595 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-11-01 20:09:54,187 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-11-01 20:09:56,933 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-01 20:09:56,933 [printer.py:change_state()] - Adding callback for state: ready
2023-11-01 20:09:57,737 [job_status.py:close_panel()] - Closing job_status panel
2023-11-01 20:09:57,745 [screen.py:show_panel()] - Reinitializing panel
2023-11-01 20:09:57,909 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-01 20:09:57,923 [main_menu.py:add_device()] - Adding device: extruder
2023-11-01 20:09:57,935 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-01 20:09:57,945 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-01 20:09:57,955 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-01 20:09:57,965 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-01 20:09:57,975 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-01 20:09:58,042 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-01 20:09:59,165 [screen.py:_load_panel()] - Loading panel: move
2023-11-01 20:09:59,317 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-11-01 20:10:01,203 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-11-01 20:10:01,209 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-11-01 20:11:21,748 [files.py:_callback()] - Error in getting metadata for .thumbs/NeoPixel_Mount-32x32.png. Retrying in 6 seconds
2023-11-01 20:11:21,753 [files.py:_callback()] - Error in getting metadata for .thumbs/NeoPixel_Mount-400x300.png. Retrying in 6 seconds
2023-11-01 20:11:21,931 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-01 20:11:21,932 [printer.py:change_state()] - Adding callback for state: printing
2023-11-01 20:11:21,955 [screen.py:show_panel()] - Reinitializing panel
2023-11-01 20:11:22,183 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-01 20:11:22,195 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-01 20:11:22,211 [job_status.py:update_file_metadata()] - Update Metadata. File: NeoPixel_Mount.gcode Size: 1095563
2023-11-01 20:11:22,221 [job_status.py:show_file_thumbnail()] - NeoPixel_Mount.gcode
2023-11-01 20:11:22,736 [files.py:add_file()] - File already exists: NeoPixel_Mount.gcode
2023-11-01 20:12:59,690 [printer.py:change_state()] - Changing state from 'printing' to 'shutdown'
2023-11-01 20:12:59,690 [printer.py:change_state()] - Adding callback for state: shutdown
2023-11-01 20:12:59,732 [screen.py:show_panel()] - Reinitializing panel
2023-11-01 20:12:59,800 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-65-g4a14962
2023-11-01 05:17:22,370 [screen.py:main()] - Python version: 3.9
2023-11-01 05:17:22,371 [screen.py:main()] - KlipperScreen version: v0.3.6-65-g4a14962
2023-11-01 05:17:22,380 [functions.py:detect_desktop_environment()] - Error:
'XDG_CURRENT_DESKTOP'

Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
2023-11-01 05:17:22,616 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-11-01 05:17:22,619 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2023-11-01 05:17:22,647 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-11-01 05:17:22,757 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-11-01 05:17:22,758 [config.py:install_language()] - Using system lang
2023-11-01 05:17:22,759 [config.py:install_language()] - Using lang en
2023-11-01 05:17:22,793 [screen.py:__init__()] - Screen resolution: 800x480
2023-11-01 05:17:22,797 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-11-01 05:17:23,817 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-11-01 05:17:23,830 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-11-01 05:17:23,840 [screen.py:initial_connection()] - Default printer: None
2023-11-01 05:17:23,840 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-01 05:17:23,841 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-11-01 05:17:23,913 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-01 05:17:23,927 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-01 05:17:23,957 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-01 05:17:23,976 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-01 05:17:23,978 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-01 05:17:23,995 [_logging.py:info()] - Websocket connected
2023-11-01 05:17:23,995 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-01 05:17:24,293 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-01 05:17:24,310 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-01 05:17:24,312 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-01 05:17:24,329 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-01 05:17:24,331 [printer.py:configure_cameras()] - Cameras: []
2023-11-01 05:17:24,351 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-01 05:17:24,389 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-01 05:17:24,393 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'max_extrude_cross_section': '5', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.370'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.038125, -0.045625, -0.045000\n-0.088750, -0.100000, -0.085625\n-0.114375, -0.126875, -0.125000', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '128.2', 'max_x': '208.13', 'min_y': '51.55', 'max_y': '131.47'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.038125, -0.045625, -0.045], [-0.08875, -0.1, -0.085625], [-0.114375, -0.126875, -0.125]], 'min_x': 128.2, 'max_x': 208.13, 'min_y': 51.55, 'max_y': 131.47, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.37, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-01 05:17:24,398 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-11-01 05:17:24,398 [printer.py:reinit()] - # Extruders: 1
2023-11-01 05:17:24,398 [printer.py:reinit()] - # Temperature devices: 5
2023-11-01 05:17:24,399 [printer.py:reinit()] - # Fans: 2
2023-11-01 05:17:24,399 [printer.py:reinit()] - # Output pins: 1
2023-11-01 05:17:24,399 [printer.py:reinit()] - # Leds: 0
2023-11-01 05:17:24,424 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-01 05:17:24,427 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-01 05:17:24,703 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-11-01 05:17:24,742 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-01 05:17:24,744 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-11-01 05:17:24,745 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-11-01 05:17:24,745 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-01 05:17:24,747 [screen.py:init_printer()] - Printer initialized
2023-11-01 05:17:24,748 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-11-01 05:17:24,749 [printer.py:change_state()] - Adding callback for state: startup
2023-11-01 05:17:25,380 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-11-01 05:17:25,380 [printer.py:change_state()] - Adding callback for state: ready
2023-11-01 05:17:25,385 [screen.py:_load_panel()] - Loading panel: main_menu
2023-11-01 05:17:25,515 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-01 05:17:25,530 [main_menu.py:add_device()] - Adding device: extruder
2023-11-01 05:17:25,548 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-01 05:17:25,562 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-01 05:17:25,576 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-01 05:17:25,593 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-01 05:17:25,613 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-01 05:17:25,703 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-01 05:17:25,707 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: []
2023-11-01 05:17:30,360 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-01 05:17:30,431 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-11-01 05:17:30,469 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-01 05:17:30,473 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-03 19:05:28,880 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2023-11-03 19:05:37,817 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-03 19:05:37,818 [printer.py:change_state()] - Adding callback for state: printing
2023-11-03 19:05:37,843 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-03 19:05:37,848 [screen.py:_load_panel()] - Loading panel: job_status
2023-11-03 19:05:38,078 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-03 19:05:38,088 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-03 19:05:38,118 [job_status.py:update_file_metadata()] - Update Metadata. File: NeoPixel_Mount.gcode Size: 1100801
2023-11-03 19:05:38,132 [job_status.py:show_file_thumbnail()] - NeoPixel_Mount.gcode
2023-11-03 19:05:38,666 [files.py:add_file()] - File already exists: NeoPixel_Mount.gcode
2023-11-03 19:13:52,713 [printer.py:change_state()] - Changing state from 'printing' to 'shutdown'
2023-11-03 19:13:52,713 [printer.py:change_state()] - Adding callback for state: shutdown
2023-11-03 19:13:52,755 [screen.py:show_panel()] - Reinitializing panel
2023-11-03 19:13:52,825 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-65-g4a14962
2023-11-01 05:17:21,611 [screen.py:main()] - Python version: 3.9
2023-11-01 05:17:21,612 [screen.py:main()] - KlipperScreen version: v0.3.6-65-g4a14962
2023-11-01 05:17:21,621 [functions.py:detect_desktop_environment()] - Error:
'XDG_CURRENT_DESKTOP'

Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
2023-11-01 05:17:21,859 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-11-01 05:17:21,863 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2023-11-01 05:17:21,892 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-11-01 05:17:21,996 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-11-01 05:17:21,997 [config.py:install_language()] - Using system lang
2023-11-01 05:17:21,998 [config.py:install_language()] - Using lang en
2023-11-01 05:17:22,030 [screen.py:__init__()] - Screen resolution: 800x480
2023-11-01 05:17:22,034 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-11-01 05:17:23,056 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-11-01 05:17:23,070 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-11-01 05:17:23,079 [screen.py:initial_connection()] - Default printer: None
2023-11-01 05:17:23,080 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-01 05:17:23,080 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-11-01 05:17:23,152 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-01 05:17:23,168 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-01 05:17:23,201 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-01 05:17:23,220 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-01 05:17:23,222 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-01 05:17:23,236 [_logging.py:info()] - Websocket connected
2023-11-01 05:17:23,237 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-01 05:17:23,524 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-01 05:17:23,547 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-01 05:17:23,549 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-01 05:17:23,569 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-01 05:17:23,571 [printer.py:configure_cameras()] - Cameras: []
2023-11-01 05:17:23,592 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-01 05:17:23,630 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-01 05:17:23,634 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'max_extrude_cross_section': '5', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.370'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.038125, -0.045625, -0.045000\n-0.088750, -0.100000, -0.085625\n-0.114375, -0.126875, -0.125000', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '128.2', 'max_x': '208.13', 'min_y': '51.55', 'max_y': '131.47'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.038125, -0.045625, -0.045], [-0.08875, -0.1, -0.085625], [-0.114375, -0.126875, -0.125]], 'min_x': 128.2, 'max_x': 208.13, 'min_y': 51.55, 'max_y': 131.47, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.37, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-01 05:17:23,639 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-11-01 05:17:23,639 [printer.py:reinit()] - # Extruders: 1
2023-11-01 05:17:23,639 [printer.py:reinit()] - # Temperature devices: 5
2023-11-01 05:17:23,640 [printer.py:reinit()] - # Fans: 2
2023-11-01 05:17:23,640 [printer.py:reinit()] - # Output pins: 1
2023-11-01 05:17:23,640 [printer.py:reinit()] - # Leds: 0
2023-11-01 05:17:23,663 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-01 05:17:23,666 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-01 05:17:23,949 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-11-01 05:17:23,973 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-01 05:17:23,975 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-11-01 05:17:23,976 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-11-01 05:17:23,976 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-01 05:17:23,977 [screen.py:init_printer()] - Printer initialized
2023-11-01 05:17:23,978 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-11-01 05:17:23,979 [printer.py:change_state()] - Adding callback for state: startup
2023-11-01 05:17:24,623 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-11-01 05:17:24,623 [printer.py:change_state()] - Adding callback for state: ready
2023-11-01 05:17:24,629 [screen.py:_load_panel()] - Loading panel: main_menu
2023-11-01 05:17:24,756 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-01 05:17:24,770 [main_menu.py:add_device()] - Adding device: extruder
2023-11-01 05:17:24,781 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-01 05:17:24,792 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-01 05:17:24,802 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-01 05:17:24,812 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-01 05:17:24,822 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-01 05:17:24,901 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-01 05:17:24,910 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: []
2023-11-01 05:17:28,926 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-01 05:17:28,955 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-11-01 05:17:28,982 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-01 05:17:28,984 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-01 05:17:42,677 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-01 05:17:42,678 [printer.py:change_state()] - Adding callback for state: printing
2023-11-01 05:17:42,701 [screen.py:_load_panel()] - Loading panel: job_status
2023-11-01 05:17:42,998 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-01 05:17:43,010 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-01 05:17:43,044 [job_status.py:update_file_metadata()] - Update Metadata. File: NeoPixel_Mount.gcode Size: 1100801
2023-11-01 05:17:43,058 [job_status.py:show_file_thumbnail()] - NeoPixel_Mount.gcode
2023-11-01 05:17:43,501 [files.py:add_file()] - File already exists: NeoPixel_Mount.gcode
2023-11-03 19:20:04,491 [printer.py:change_state()] - Changing state from 'printing' to 'shutdown'
2023-11-03 19:20:04,491 [printer.py:change_state()] - Adding callback for state: shutdown
2023-11-03 19:20:04,530 [screen.py:show_panel()] - Reinitializing panel
2023-11-03 19:20:04,599 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-65-g4a14962
2023-11-01 05:17:20,113 [screen.py:main()] - Python version: 3.9
2023-11-01 05:17:20,114 [screen.py:main()] - KlipperScreen version: v0.3.6-65-g4a14962
2023-11-01 05:17:20,126 [functions.py:detect_desktop_environment()] - Error:
'XDG_CURRENT_DESKTOP'

Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
2023-11-01 05:17:20,368 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-11-01 05:17:20,371 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2023-11-01 05:17:20,398 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-11-01 05:17:20,515 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-11-01 05:17:20,515 [config.py:install_language()] - Using system lang
2023-11-01 05:17:20,516 [config.py:install_language()] - Using lang en
2023-11-01 05:17:20,551 [screen.py:__init__()] - Screen resolution: 800x480
2023-11-01 05:17:20,554 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-11-01 05:17:21,528 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-11-01 05:17:21,541 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-11-01 05:17:21,550 [screen.py:initial_connection()] - Default printer: None
2023-11-01 05:17:21,551 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-01 05:17:21,551 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-11-01 05:17:21,624 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-01 05:17:21,637 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-01 05:17:21,667 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-01 05:17:21,686 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-01 05:17:21,688 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-01 05:17:21,702 [_logging.py:info()] - Websocket connected
2023-11-01 05:17:21,702 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-01 05:17:21,960 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-01 05:17:21,978 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-01 05:17:21,980 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-01 05:17:21,997 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-01 05:17:21,999 [printer.py:configure_cameras()] - Cameras: []
2023-11-01 05:17:22,018 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-01 05:17:22,254 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-01 05:17:22,258 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'max_extrude_cross_section': '5', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.370'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.038125, -0.045625, -0.045000\n-0.088750, -0.100000, -0.085625\n-0.114375, -0.126875, -0.125000', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '128.2', 'max_x': '208.13', 'min_y': '51.55', 'max_y': '131.47'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.038125, -0.045625, -0.045], [-0.08875, -0.1, -0.085625], [-0.114375, -0.126875, -0.125]], 'min_x': 128.2, 'max_x': 208.13, 'min_y': 51.55, 'max_y': 131.47, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.37, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-01 05:17:22,263 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-11-01 05:17:22,263 [printer.py:reinit()] - # Extruders: 1
2023-11-01 05:17:22,264 [printer.py:reinit()] - # Temperature devices: 5
2023-11-01 05:17:22,264 [printer.py:reinit()] - # Fans: 2
2023-11-01 05:17:22,264 [printer.py:reinit()] - # Output pins: 1
2023-11-01 05:17:22,265 [printer.py:reinit()] - # Leds: 0
2023-11-01 05:17:22,970 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-01 05:17:22,974 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-01 05:17:23,371 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-11-01 05:17:23,466 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-01 05:17:23,503 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-11-01 05:17:23,531 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-01 05:17:23,534 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-01 05:17:23,534 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-11-01 05:17:23,535 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-01 05:17:23,536 [screen.py:init_printer()] - Printer initialized
2023-11-01 05:17:23,537 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-01 05:17:23,538 [printer.py:change_state()] - Adding callback for state: ready
2023-11-01 05:17:23,559 [screen.py:_load_panel()] - Loading panel: main_menu
2023-11-01 05:17:23,709 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-01 05:17:23,726 [main_menu.py:add_device()] - Adding device: extruder
2023-11-01 05:17:23,741 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-01 05:17:23,754 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-01 05:17:23,767 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-01 05:17:23,782 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-01 05:17:23,794 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-01 05:17:23,872 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-65-g4a14962
2023-11-04 11:57:50,242 [screen.py:main()] - Python version: 3.9
2023-11-04 11:57:50,243 [screen.py:main()] - KlipperScreen version: v0.3.6-65-g4a14962
2023-11-04 11:57:50,261 [functions.py:detect_desktop_environment()] - Error:
'XDG_CURRENT_DESKTOP'

Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
2023-11-04 11:57:50,534 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-11-04 11:57:50,537 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2023-11-04 11:57:50,565 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-11-04 11:57:50,665 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-11-04 11:57:50,666 [config.py:install_language()] - Using system lang
2023-11-04 11:57:50,666 [config.py:install_language()] - Using lang en
2023-11-04 11:57:50,698 [screen.py:__init__()] - Screen resolution: 800x480
2023-11-04 11:57:50,700 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-11-04 11:57:52,323 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-11-04 11:57:52,341 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-11-04 11:57:52,353 [screen.py:initial_connection()] - Default printer: None
2023-11-04 11:57:52,354 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-04 11:57:52,354 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-11-04 11:57:52,449 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-04 11:57:52,471 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-04 11:57:52,509 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-04 11:57:52,532 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-04 11:57:52,535 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-04 11:57:52,553 [_logging.py:info()] - Websocket connected
2023-11-04 11:57:52,553 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-04 11:57:52,894 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-04 11:57:52,918 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-04 11:57:52,921 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-04 11:57:52,942 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-04 11:57:52,944 [printer.py:configure_cameras()] - Cameras: []
2023-11-04 11:57:52,945 [screen.py:init_printer()] - Klipper not connected
2023-11-04 11:57:56,461 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-04 11:57:56,482 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-04 11:57:56,484 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-04 11:57:56,503 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-04 11:57:56,505 [printer.py:configure_cameras()] - Cameras: []
2023-11-04 11:57:56,506 [screen.py:init_printer()] - Klipper not connected
2023-11-04 11:57:59,460 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-04 11:57:59,538 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-04 11:57:59,541 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-04 11:57:59,567 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-04 11:57:59,570 [printer.py:configure_cameras()] - Cameras: []
2023-11-04 11:57:59,599 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-04 11:57:59,657 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-04 11:57:59,661 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'max_extrude_cross_section': '5', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.370'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.038125, -0.045625, -0.045000\n-0.088750, -0.100000, -0.085625\n-0.114375, -0.126875, -0.125000', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '128.2', 'max_x': '208.13', 'min_y': '51.55', 'max_y': '131.47'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.038125, -0.045625, -0.045], [-0.08875, -0.1, -0.085625], [-0.114375, -0.126875, -0.125]], 'min_x': 128.2, 'max_x': 208.13, 'min_y': 51.55, 'max_y': 131.47, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.37, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-04 11:57:59,667 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-11-04 11:57:59,667 [printer.py:reinit()] - # Extruders: 1
2023-11-04 11:57:59,667 [printer.py:reinit()] - # Temperature devices: 5
2023-11-04 11:57:59,668 [printer.py:reinit()] - # Fans: 2
2023-11-04 11:57:59,668 [printer.py:reinit()] - # Output pins: 1
2023-11-04 11:57:59,668 [printer.py:reinit()] - # Leds: 0
2023-11-04 11:57:59,698 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-04 11:57:59,702 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-04 11:57:59,976 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-11-04 11:58:00,003 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-04 11:58:00,005 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-11-04 11:58:00,007 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-11-04 11:58:00,007 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-04 11:58:00,009 [screen.py:init_printer()] - Printer initialized
2023-11-04 11:58:00,010 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-11-04 11:58:00,010 [printer.py:change_state()] - Adding callback for state: startup
2023-11-04 11:58:01,905 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-11-04 11:58:01,905 [printer.py:change_state()] - Adding callback for state: ready
2023-11-04 11:58:01,910 [screen.py:_load_panel()] - Loading panel: main_menu
2023-11-04 11:58:02,037 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-04 11:58:02,056 [main_menu.py:add_device()] - Adding device: extruder
2023-11-04 11:58:02,067 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-04 11:58:02,077 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-04 11:58:02,088 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-04 11:58:02,098 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-04 11:58:02,108 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-04 11:58:02,179 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-04 11:58:02,182 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: []
2023-11-04 11:58:05,509 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-04 11:58:05,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-11-04 11:58:05,569 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-04 11:58:05,572 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-04 12:13:14,616 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2023-11-04 12:13:20,321 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-04 12:13:20,322 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-04 12:13:20,324 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-04 12:13:20,334 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-04 12:13:20,336 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 12:13:20,410 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-04 12:13:23,622 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-04 12:13:23,640 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-04 12:13:23,642 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-04 12:13:23,659 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-04 12:13:23,661 [printer.py:configure_cameras()] - Cameras: []
2023-11-04 12:13:23,680 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-04 12:13:23,715 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-04 12:13:23,719 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'max_extrude_cross_section': '5', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.370'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019375, 0.042500, 0.026875, 0.011250, 0.018125\n-0.035000, -0.017500, -0.032500, -0.035000, -0.035625\n-0.051250, -0.051875, -0.076875, -0.079375, -0.111875\n-0.031875, -0.030625, -0.065625, -0.093750, -0.118750\n0.073750, 0.045000, -0.015625, -0.073125, -0.093125', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '320.0', 'min_y': '12.0', 'max_y': '320.0'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019375, 0.0425, 0.026875, 0.01125, 0.018125], [-0.035, -0.0175, -0.0325, -0.035, -0.035625], [-0.05125, -0.051875, -0.076875, -0.079375, -0.111875], [-0.031875, -0.030625, -0.065625, -0.09375, -0.11875], [0.07375, 0.045, -0.015625, -0.073125, -0.093125]], 'min_x': 35.0, 'max_x': 320.0, 'min_y': 12.0, 'max_y': 320.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.37, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-04 12:13:23,725 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-11-04 12:13:23,726 [printer.py:reinit()] - # Extruders: 1
2023-11-04 12:13:23,726 [printer.py:reinit()] - # Temperature devices: 5
2023-11-04 12:13:23,726 [printer.py:reinit()] - # Fans: 2
2023-11-04 12:13:23,726 [printer.py:reinit()] - # Output pins: 1
2023-11-04 12:13:23,726 [printer.py:reinit()] - # Leds: 0
2023-11-04 12:13:23,750 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-04 12:13:23,752 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-04 12:13:24,038 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-11-04 12:13:24,085 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-04 12:13:24,109 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-11-04 12:13:24,129 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-04 12:13:24,131 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-04 12:13:24,132 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-11-04 12:13:24,132 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-04 12:13:24,134 [screen.py:init_printer()] - Printer initialized
2023-11-04 12:13:24,135 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-11-04 12:13:24,135 [printer.py:change_state()] - Adding callback for state: startup
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-65-g4a14962
2023-11-04 11:57:47,308 [screen.py:main()] - Python version: 3.9
2023-11-04 11:57:47,309 [screen.py:main()] - KlipperScreen version: v0.3.6-65-g4a14962
2023-11-04 11:57:47,318 [functions.py:detect_desktop_environment()] - Error:
'XDG_CURRENT_DESKTOP'

Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
2023-11-04 11:57:47,555 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-11-04 11:57:47,558 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2023-11-04 11:57:47,585 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-11-04 11:57:47,689 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-11-04 11:57:47,689 [config.py:install_language()] - Using system lang
2023-11-04 11:57:47,690 [config.py:install_language()] - Using lang en
2023-11-04 11:57:47,727 [screen.py:__init__()] - Screen resolution: 800x480
2023-11-04 11:57:47,730 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-11-04 11:57:48,719 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-11-04 11:57:48,732 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-11-04 11:57:48,741 [screen.py:initial_connection()] - Default printer: None
2023-11-04 11:57:48,742 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-04 11:57:48,742 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-11-04 11:57:48,816 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-04 11:57:48,829 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-04 11:57:48,859 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-04 11:57:48,878 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-04 11:57:48,880 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-04 11:57:48,895 [_logging.py:info()] - Websocket connected
2023-11-04 11:57:48,895 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-04 11:57:49,152 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-04 11:57:49,170 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-04 11:57:49,172 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-04 11:57:49,188 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-04 11:57:49,190 [printer.py:configure_cameras()] - Cameras: []
2023-11-04 11:57:49,210 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-04 11:57:49,401 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-04 11:57:49,405 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'max_extrude_cross_section': '5', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.370'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n0.019375, 0.042500, 0.026875, 0.011250, 0.018125\n-0.035000, -0.017500, -0.032500, -0.035000, -0.035625\n-0.051250, -0.051875, -0.076875, -0.079375, -0.111875\n-0.031875, -0.030625, -0.065625, -0.093750, -0.118750\n0.073750, 0.045000, -0.015625, -0.073125, -0.093125', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '320.0', 'min_y': '12.0', 'max_y': '320.0'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.019375, 0.0425, 0.026875, 0.01125, 0.018125], [-0.035, -0.0175, -0.0325, -0.035, -0.035625], [-0.05125, -0.051875, -0.076875, -0.079375, -0.111875], [-0.031875, -0.030625, -0.065625, -0.09375, -0.11875], [0.07375, 0.045, -0.015625, -0.073125, -0.093125]], 'min_x': 35.0, 'max_x': 320.0, 'min_y': 12.0, 'max_y': 320.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.37, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-04 11:57:49,409 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-11-04 11:57:49,410 [printer.py:reinit()] - # Extruders: 1
2023-11-04 11:57:49,410 [printer.py:reinit()] - # Temperature devices: 5
2023-11-04 11:57:49,410 [printer.py:reinit()] - # Fans: 2
2023-11-04 11:57:49,410 [printer.py:reinit()] - # Output pins: 1
2023-11-04 11:57:49,411 [printer.py:reinit()] - # Leds: 0
2023-11-04 11:57:49,434 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-04 11:57:49,437 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-04 11:57:49,727 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-11-04 11:57:49,749 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-04 11:57:49,777 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-11-04 11:57:49,798 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-04 11:57:49,800 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-04 11:57:49,801 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-11-04 11:57:49,801 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-04 11:57:49,802 [screen.py:init_printer()] - Printer initialized
2023-11-04 11:57:49,803 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-04 11:57:49,804 [printer.py:change_state()] - Adding callback for state: ready
2023-11-04 11:57:49,811 [screen.py:_load_panel()] - Loading panel: main_menu
2023-11-04 11:57:49,948 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-04 11:57:49,962 [main_menu.py:add_device()] - Adding device: extruder
2023-11-04 11:57:49,972 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-04 11:57:49,983 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-04 11:57:49,992 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-04 11:57:50,003 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-04 11:57:50,013 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-04 11:57:50,082 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-04 13:40:15,864 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-04 13:40:15,865 [printer.py:change_state()] - Adding callback for state: printing
2023-11-04 13:40:15,892 [screen.py:_load_panel()] - Loading panel: job_status
2023-11-04 13:40:16,125 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-04 13:40:16,137 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-04 13:40:16,164 [job_status.py:update_file_metadata()] - Update Metadata. File: NeoPixel_Mount.gcode Size: 878908
2023-11-04 13:40:16,178 [job_status.py:show_file_thumbnail()] - NeoPixel_Mount.gcode
2023-11-04 13:40:16,783 [files.py:add_file()] - File already exists: NeoPixel_Mount.gcode
2023-11-04 13:52:13,406 [screen.py:_load_panel()] - Loading panel: fine_tune
2023-11-04 13:52:13,551 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2023-11-04 13:53:01,536 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2023-11-04 13:53:03,318 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2023-11-04 13:53:04,315 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2023-11-04 13:53:04,996 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-11-04 13:53:05,388 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-11-04 13:53:27,726 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-11-04 13:53:32,627 [screen.py:_menu_go_back()] - #### Menu go back
2023-11-04 13:53:32,717 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-04 13:53:32,738 [job_status.py:update_file_metadata()] - Update Metadata. File: NeoPixel_Mount.gcode Size: 878908
2023-11-04 13:53:32,747 [job_status.py:show_file_thumbnail()] - NeoPixel_Mount.gcode
2023-11-04 13:53:33,661 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=834, height=480)
2023-11-04 13:53:34,470 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-04 13:53:34,471 [job_status.py:cancel_confirm()] - Canceling print
2023-11-04 13:53:34,473 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-11-04 13:53:34,480 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-11-04 13:53:34,725 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-11-04 13:53:36,170 [job_status.py:close_panel()] - Closing job_status panel
2023-11-04 13:53:36,175 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 13:53:36,299 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-04 13:53:36,312 [main_menu.py:add_device()] - Adding device: extruder
2023-11-04 13:53:36,322 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-04 13:53:36,333 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-04 13:53:36,342 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-04 13:53:36,352 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-04 13:53:36,362 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-04 13:53:36,429 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-04 13:53:37,950 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-04 13:53:37,951 [printer.py:change_state()] - Adding callback for state: ready
2023-11-04 13:53:37,968 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 13:53:38,091 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-04 13:53:38,105 [main_menu.py:add_device()] - Adding device: extruder
2023-11-04 13:53:38,114 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-04 13:53:38,125 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-04 13:53:38,135 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-04 13:53:38,145 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-04 13:53:38,155 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-04 13:53:38,227 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-04 13:53:39,135 [screen.py:_load_panel()] - Loading panel: move
2023-11-04 13:53:39,333 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-11-04 13:53:40,419 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-11-04 13:53:40,425 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-11-04 13:54:28,835 [screen.py:_menu_go_back()] - #### Menu go back
2023-11-04 13:54:28,913 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-04 13:54:30,421 [screen.py:_load_panel()] - Loading panel: print
2023-11-04 13:54:30,434 [print.py:__init__()] - 24h time is True
2023-11-04 13:54:30,490 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2023-11-04 13:54:30,491 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-04 13:54:54,918 [print.py:_callback()] - newfiles: []
2023-11-04 13:54:54,919 [print.py:_callback()] - deletedfiles: []
2023-11-04 13:54:54,919 [print.py:_callback()] - updatefiles: ['NeoPixel_Mount.gcode']
2023-11-04 13:54:54,919 [print.py:update_file()] - Updating file NeoPixel_Mount.gcode
2023-11-04 13:54:54,966 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-04 13:54:54,967 [printer.py:change_state()] - Adding callback for state: printing
2023-11-04 13:54:54,984 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 13:54:55,196 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-04 13:54:55,208 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-04 13:54:55,223 [job_status.py:update_file_metadata()] - Update Metadata. File: NeoPixel_Mount.gcode Size: 903889
2023-11-04 13:54:55,233 [job_status.py:show_file_thumbnail()] - NeoPixel_Mount.gcode
2023-11-04 13:54:55,901 [files.py:add_file()] - File already exists: NeoPixel_Mount.gcode
2023-11-04 13:54:55,905 [print.py:_callback()] - newfiles: []
2023-11-04 13:54:55,905 [print.py:_callback()] - deletedfiles: []
2023-11-04 13:54:55,906 [print.py:_callback()] - updatefiles: ['NeoPixel_Mount.gcode']
2023-11-04 13:54:55,906 [print.py:update_file()] - Updating file NeoPixel_Mount.gcode
2023-11-04 13:54:55,917 [print.py:_callback()] - newfiles: []
2023-11-04 13:54:55,918 [print.py:_callback()] - deletedfiles: []
2023-11-04 13:54:55,918 [print.py:_callback()] - updatefiles: ['NeoPixel_Mount.gcode']
2023-11-04 13:54:55,918 [print.py:update_file()] - Updating file NeoPixel_Mount.gcode
2023-11-04 14:00:02,950 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 14:00:03,093 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2023-11-04 14:00:07,274 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2023-11-04 14:00:08,484 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2023-11-04 14:00:09,236 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2023-11-04 14:00:09,796 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2023-11-04 14:00:10,516 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2023-11-04 14:00:22,890 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2023-11-04 14:00:25,674 [screen.py:_menu_go_back()] - #### Menu go back
2023-11-04 14:00:25,768 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-04 14:00:25,789 [job_status.py:update_file_metadata()] - Update Metadata. File: NeoPixel_Mount.gcode Size: 903889
2023-11-04 14:00:25,798 [job_status.py:show_file_thumbnail()] - NeoPixel_Mount.gcode
2023-11-04 14:00:27,414 [KlippyGtk.py:Dialog()] - Showing dialog NeoPixel_Mount.gcode (width=800, height=480)
2023-11-04 14:00:30,045 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-04 14:16:50,112 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=834, height=480)
2023-11-04 14:16:51,238 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-04 14:16:51,239 [job_status.py:cancel_confirm()] - Canceling print
2023-11-04 14:16:51,240 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-11-04 14:16:51,247 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-11-04 14:16:51,505 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-11-04 14:16:52,227 [job_status.py:close_panel()] - Closing job_status panel
2023-11-04 14:16:52,236 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 14:16:52,430 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-04 14:16:52,443 [main_menu.py:add_device()] - Adding device: extruder
2023-11-04 14:16:52,454 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-04 14:16:52,465 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-04 14:16:52,479 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-04 14:16:52,495 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-04 14:16:52,507 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-04 14:16:52,574 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-04 14:16:53,517 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 14:16:53,664 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-11-04 14:16:54,496 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-04 14:16:54,497 [printer.py:change_state()] - Adding callback for state: ready
2023-11-04 14:16:54,507 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 14:16:54,626 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-04 14:16:54,640 [main_menu.py:add_device()] - Adding device: extruder
2023-11-04 14:16:54,650 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-04 14:16:54,661 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-04 14:16:54,670 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-04 14:16:54,680 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-04 14:16:54,690 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-04 14:16:54,769 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-04 14:16:55,249 [screen.py:_load_panel()] - Loading panel: temperature
2023-11-04 14:16:55,279 [temperature.py:add_device()] - Adding device: extruder
2023-11-04 14:16:55,291 [temperature.py:add_device()] - Adding device: heater_bed
2023-11-04 14:16:55,303 [temperature.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-04 14:16:55,313 [temperature.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-04 14:16:55,324 [temperature.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-04 14:16:55,334 [temperature.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-04 14:16:55,345 [temperature.py:select_heater()] - Selecting extruder
2023-11-04 14:16:55,347 [temperature.py:select_heater()] - Selecting heater_bed
2023-11-04 14:16:55,413 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2023-11-04 14:16:58,451 [screen.py:_menu_go_back()] - #### Menu go back
2023-11-04 14:16:58,566 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-04 14:16:59,853 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 14:17:00,004 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-11-04 14:17:00,980 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-11-04 14:17:00,990 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-11-04 14:17:03,604 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-11-04 14:17:03,610 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-11-04 14:18:46,800 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2023-11-04 14:18:49,119 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-04 14:18:49,120 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-04 14:18:49,124 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-04 14:18:49,133 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-04 14:18:49,134 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 14:18:49,252 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-04 14:18:52,710 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-04 14:18:52,733 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-04 14:18:52,735 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-04 14:18:52,758 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-04 14:18:52,761 [printer.py:configure_cameras()] - Cameras: []
2023-11-04 14:18:52,785 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-04 14:18:52,828 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-04 14:18:52,834 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'max_extrude_cross_section': '5', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'firmware_retraction': {'retract_length': '5', 'retract_speed': '20', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.360'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.000625, -0.011250\n-0.005000, -0.013750, -0.013125\n-0.023750, -0.037500, -0.044375', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '109.46', 'max_x': '166.0', 'min_y': '23.880000000000003', 'max_y': '80.44'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'firmware_retraction': {'retract_length': 5.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.000625, -0.01125], [-0.005, -0.01375, -0.013125], [-0.02375, -0.0375, -0.044375]], 'min_x': 109.46, 'max_x': 166.0, 'min_y': 23.880000000000003, 'max_y': 80.44, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.36, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-04 14:18:52,843 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-11-04 14:18:52,843 [printer.py:reinit()] - # Extruders: 1
2023-11-04 14:18:52,844 [printer.py:reinit()] - # Temperature devices: 5
2023-11-04 14:18:52,846 [printer.py:reinit()] - # Fans: 2
2023-11-04 14:18:52,846 [printer.py:reinit()] - # Output pins: 1
2023-11-04 14:18:52,847 [printer.py:reinit()] - # Leds: 0
2023-11-04 14:18:52,885 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-04 14:18:52,888 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-04 14:18:53,142 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-11-04 14:18:53,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-04 14:18:53,204 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-11-04 14:18:53,224 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-04 14:18:53,227 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-04 14:18:53,228 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-11-04 14:18:53,228 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-04 14:18:53,229 [screen.py:init_printer()] - Printer initialized
2023-11-04 14:18:53,230 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-11-04 14:18:53,231 [printer.py:change_state()] - Adding callback for state: startup
2023-11-04 14:18:54,063 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-11-04 14:18:54,064 [printer.py:change_state()] - Adding callback for state: ready
2023-11-04 14:18:54,070 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 14:18:54,189 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-04 14:18:54,202 [main_menu.py:add_device()] - Adding device: extruder
2023-11-04 14:18:54,212 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-04 14:18:54,223 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-04 14:18:54,233 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-04 14:18:54,242 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-04 14:18:54,252 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-04 14:18:54,322 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-04 14:21:26,881 [print.py:_callback()] - newfiles: ['.thumbs/cable clip-32x32.png']
2023-11-04 14:21:26,882 [print.py:_callback()] - deletedfiles: []
2023-11-04 14:21:26,882 [print.py:_callback()] - updatefiles: []
2023-11-04 14:21:26,890 [print.py:_callback()] - newfiles: ['.thumbs/cable clip-400x300.png']
2023-11-04 14:21:26,891 [print.py:_callback()] - deletedfiles: []
2023-11-04 14:21:26,891 [print.py:_callback()] - updatefiles: []
2023-11-04 14:21:26,895 [files.py:_callback()] - Error in getting metadata for .thumbs/cable clip-32x32.png. Retrying in 6 seconds
2023-11-04 14:21:26,904 [print.py:_callback()] - newfiles: ['cable clip.gcode']
2023-11-04 14:21:26,929 [print.py:_callback()] - deletedfiles: []
2023-11-04 14:21:26,929 [print.py:_callback()] - updatefiles: []
2023-11-04 14:21:26,930 [files.py:_callback()] - Error in getting metadata for .thumbs/cable clip-400x300.png. Retrying in 6 seconds
2023-11-04 14:21:26,935 [print.py:_callback()] - newfiles: []
2023-11-04 14:21:26,936 [print.py:_callback()] - deletedfiles: []
2023-11-04 14:21:26,936 [print.py:_callback()] - updatefiles: ['cable clip.gcode']
2023-11-04 14:21:26,936 [print.py:update_file()] - Updating file cable clip.gcode
2023-11-04 14:21:27,010 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-04 14:21:27,010 [printer.py:change_state()] - Adding callback for state: printing
2023-11-04 14:21:27,033 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 14:21:27,278 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-04 14:21:27,293 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-04 14:21:27,313 [job_status.py:update_file_metadata()] - Update Metadata. File: cable clip.gcode Size: 935927
2023-11-04 14:21:27,322 [job_status.py:show_file_thumbnail()] - cable clip.gcode
2023-11-04 14:21:53,327 [printer.py:change_state()] - Changing state from 'printing' to 'shutdown'
2023-11-04 14:21:53,328 [printer.py:change_state()] - Adding callback for state: shutdown
2023-11-04 14:21:53,367 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 14:21:53,437 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-04 14:21:55,168 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2023-11-04 14:21:55,169 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-04 14:21:55,170 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-04 14:21:55,173 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 14:21:55,241 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-04 14:21:58,705 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-04 14:21:58,725 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-04 14:21:58,728 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-04 14:21:58,754 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-04 14:21:58,756 [printer.py:configure_cameras()] - Cameras: []
2023-11-04 14:21:58,779 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-04 14:21:58,821 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-04 14:21:58,825 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'max_extrude_cross_section': '5', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'firmware_retraction': {'retract_length': '5', 'retract_speed': '20', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.360'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.000625, -0.011250\n-0.005000, -0.013750, -0.013125\n-0.023750, -0.037500, -0.044375', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '109.46', 'max_x': '166.0', 'min_y': '23.880000000000003', 'max_y': '80.44'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'firmware_retraction': {'retract_length': 5.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.015, 0.000625, -0.01125], [-0.005, -0.01375, -0.013125], [-0.02375, -0.0375, -0.044375]], 'min_x': 109.46, 'max_x': 166.0, 'min_y': 23.880000000000003, 'max_y': 80.44, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.36, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-04 14:21:58,833 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-11-04 14:21:58,833 [printer.py:reinit()] - # Extruders: 1
2023-11-04 14:21:58,834 [printer.py:reinit()] - # Temperature devices: 5
2023-11-04 14:21:58,834 [printer.py:reinit()] - # Fans: 2
2023-11-04 14:21:58,834 [printer.py:reinit()] - # Output pins: 1
2023-11-04 14:21:58,835 [printer.py:reinit()] - # Leds: 0
2023-11-04 14:21:58,863 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-04 14:21:58,866 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-04 14:21:59,136 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-11-04 14:21:59,188 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-04 14:21:59,198 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-11-04 14:21:59,218 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-04 14:21:59,220 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-04 14:21:59,221 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-11-04 14:21:59,221 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-04 14:21:59,222 [screen.py:init_printer()] - Printer initialized
2023-11-04 14:21:59,224 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-11-04 14:21:59,224 [printer.py:change_state()] - Adding callback for state: startup
2023-11-04 14:21:59,268 [print.py:_callback()] - newfiles: []
2023-11-04 14:21:59,268 [print.py:_callback()] - deletedfiles: ['.thumbs/cable clip-32x32.png', '.thumbs/cable clip-400x300.png']
2023-11-04 14:21:59,269 [print.py:_callback()] - updatefiles: []
2023-11-04 14:21:59,270 [print.py:_callback()] - newfiles: []
2023-11-04 14:21:59,270 [print.py:_callback()] - deletedfiles: ['.thumbs/cable clip-32x32.png']
2023-11-04 14:21:59,271 [print.py:_callback()] - updatefiles: []
2023-11-04 14:21:59,272 [print.py:_callback()] - newfiles: []
2023-11-04 14:21:59,272 [print.py:_callback()] - deletedfiles: ['.thumbs/cable clip-400x300.png']
2023-11-04 14:21:59,273 [print.py:_callback()] - updatefiles: []
2023-11-04 14:22:00,057 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-11-04 14:22:00,057 [printer.py:change_state()] - Adding callback for state: ready
2023-11-04 14:22:00,063 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 14:22:00,187 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-04 14:22:00,201 [main_menu.py:add_device()] - Adding device: extruder
2023-11-04 14:22:00,212 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-04 14:22:00,224 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-04 14:22:00,235 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-04 14:22:00,246 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-04 14:22:00,256 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-04 14:22:00,336 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-04 14:22:16,042 [print.py:_callback()] - newfiles: []
2023-11-04 14:22:16,042 [print.py:_callback()] - deletedfiles: []
2023-11-04 14:22:16,043 [print.py:_callback()] - updatefiles: ['cable clip.gcode']
2023-11-04 14:22:16,043 [print.py:update_file()] - Updating file cable clip.gcode
2023-11-04 14:22:16,111 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-04 14:22:16,112 [printer.py:change_state()] - Adding callback for state: printing
2023-11-04 14:22:16,134 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 14:22:16,384 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-04 14:22:16,395 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-04 14:22:16,409 [job_status.py:update_file_metadata()] - Update Metadata. File: cable clip.gcode Size: 935927
2023-11-04 14:22:16,418 [job_status.py:show_file_thumbnail()] - cable clip.gcode
2023-11-04 14:22:17,024 [files.py:add_file()] - File already exists: cable clip.gcode
2023-11-04 14:22:17,028 [print.py:_callback()] - newfiles: []
2023-11-04 14:22:17,028 [print.py:_callback()] - deletedfiles: []
2023-11-04 14:22:17,028 [print.py:_callback()] - updatefiles: ['cable clip.gcode']
2023-11-04 14:22:17,029 [print.py:update_file()] - Updating file cable clip.gcode
2023-11-04 14:22:17,041 [print.py:_callback()] - newfiles: []
2023-11-04 14:22:17,042 [print.py:_callback()] - deletedfiles: []
2023-11-04 14:22:17,043 [print.py:_callback()] - updatefiles: ['cable clip.gcode']
2023-11-04 14:22:17,044 [print.py:update_file()] - Updating file cable clip.gcode
2023-11-04 14:27:46,998 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=834, height=480)
2023-11-04 14:27:47,689 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-04 14:27:47,690 [job_status.py:cancel_confirm()] - Canceling print
2023-11-04 14:27:47,691 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-11-04 14:27:47,699 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-11-04 14:27:48,567 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-11-04 14:27:49,668 [job_status.py:close_panel()] - Closing job_status panel
2023-11-04 14:27:49,673 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 14:27:49,797 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-04 14:27:49,824 [main_menu.py:add_device()] - Adding device: extruder
2023-11-04 14:27:49,841 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-04 14:27:49,860 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-04 14:27:49,877 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-04 14:27:49,895 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-04 14:27:49,912 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-04 14:27:50,027 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-04 14:27:51,110 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 14:27:51,265 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-11-04 14:27:52,318 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-04 14:27:52,318 [printer.py:change_state()] - Adding callback for state: ready
2023-11-04 14:27:52,337 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 14:27:52,509 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-04 14:27:52,523 [main_menu.py:add_device()] - Adding device: extruder
2023-11-04 14:27:52,533 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-04 14:27:52,544 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-04 14:27:52,554 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-04 14:27:52,566 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-04 14:27:52,576 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-04 14:27:52,643 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-04 14:27:52,858 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 14:27:52,888 [temperature.py:add_device()] - Adding device: extruder
2023-11-04 14:27:52,901 [temperature.py:add_device()] - Adding device: heater_bed
2023-11-04 14:27:52,914 [temperature.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-04 14:27:52,924 [temperature.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-04 14:27:52,934 [temperature.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-04 14:27:52,944 [temperature.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-04 14:27:52,955 [temperature.py:select_heater()] - Selecting extruder
2023-11-04 14:27:52,957 [temperature.py:select_heater()] - Selecting heater_bed
2023-11-04 14:27:53,022 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2023-11-04 14:27:54,340 [screen.py:_menu_go_back()] - #### Menu go back
2023-11-04 14:27:54,396 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-04 14:27:55,398 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 14:27:55,544 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-11-04 14:27:56,412 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-11-04 14:27:56,418 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-11-04 14:33:37,938 [print.py:_callback()] - newfiles: []
2023-11-04 14:33:37,938 [print.py:_callback()] - deletedfiles: []
2023-11-04 14:33:37,939 [print.py:_callback()] - updatefiles: ['cable clip.gcode']
2023-11-04 14:33:37,939 [print.py:update_file()] - Updating file cable clip.gcode
2023-11-04 14:33:38,072 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-04 14:33:38,072 [printer.py:change_state()] - Adding callback for state: printing
2023-11-04 14:33:38,087 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 14:33:38,305 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-04 14:33:38,317 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-04 14:33:38,334 [job_status.py:update_file_metadata()] - Update Metadata. File: cable clip.gcode Size: 935927
2023-11-04 14:33:38,344 [job_status.py:show_file_thumbnail()] - cable clip.gcode
2023-11-04 14:33:38,920 [files.py:add_file()] - File already exists: cable clip.gcode
2023-11-04 14:33:38,923 [print.py:_callback()] - newfiles: []
2023-11-04 14:33:38,924 [print.py:_callback()] - deletedfiles: []
2023-11-04 14:33:38,924 [print.py:_callback()] - updatefiles: ['cable clip.gcode']
2023-11-04 14:33:38,924 [print.py:update_file()] - Updating file cable clip.gcode
2023-11-04 14:33:38,936 [print.py:_callback()] - newfiles: []
2023-11-04 14:33:38,937 [print.py:_callback()] - deletedfiles: []
2023-11-04 14:33:38,937 [print.py:_callback()] - updatefiles: ['cable clip.gcode']
2023-11-04 14:33:38,937 [print.py:update_file()] - Updating file cable clip.gcode
2023-11-04 14:39:24,143 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 14:39:24,272 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2023-11-04 14:39:26,373 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2023-11-04 14:39:27,479 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-11-04 14:39:30,047 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-11-04 14:39:32,351 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-11-04 14:39:52,944 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-11-04 14:39:53,614 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-11-04 14:39:55,398 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-11-04 14:39:56,391 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-11-04 14:39:58,015 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-11-04 14:40:14,174 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-11-04 14:40:15,022 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-11-04 14:40:20,254 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-11-04 14:40:24,125 [screen.py:_menu_go_back()] - #### Menu go back
2023-11-04 14:40:24,232 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-04 14:40:24,269 [job_status.py:update_file_metadata()] - Update Metadata. File: cable clip.gcode Size: 935927
2023-11-04 14:40:24,290 [job_status.py:show_file_thumbnail()] - cable clip.gcode
2023-11-04 14:40:25,172 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=834, height=480)
2023-11-04 14:40:25,968 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-04 14:40:25,968 [job_status.py:cancel_confirm()] - Canceling print
2023-11-04 14:40:25,969 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-11-04 14:40:25,976 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-11-04 14:40:26,653 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-11-04 14:40:29,651 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-04 14:40:29,651 [printer.py:change_state()] - Adding callback for state: ready
2023-11-04 14:40:31,581 [job_status.py:close_panel()] - Closing job_status panel
2023-11-04 14:40:31,586 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 14:40:31,709 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-04 14:40:31,723 [main_menu.py:add_device()] - Adding device: extruder
2023-11-04 14:40:31,733 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-04 14:40:31,744 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-04 14:40:31,754 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-04 14:40:31,765 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-04 14:40:31,779 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-04 14:40:31,893 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-04 14:40:32,831 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 14:40:32,984 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-11-04 14:40:34,478 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-11-04 14:40:34,488 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-11-04 14:40:36,213 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-11-04 14:40:36,218 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-11-04 14:41:14,629 [screen.py:_menu_go_back()] - #### Menu go back
2023-11-04 14:41:14,746 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-04 14:41:16,648 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 14:41:16,658 [print.py:__init__()] - 24h time is True
2023-11-04 14:41:16,725 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2023-11-04 14:41:16,725 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-04 14:41:25,245 [KlippyGtk.py:Dialog()] - Showing dialog Print cable clip.gcode (width=800, height=480)
2023-11-04 14:41:26,289 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-04 14:41:26,289 [print.py:confirm_print_response()] - Starting print: cable clip.gcode
2023-11-04 14:41:26,290 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2023-11-04 14:41:26,324 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-04 14:41:26,325 [printer.py:change_state()] - Adding callback for state: printing
2023-11-04 14:41:26,345 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 14:41:26,560 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-04 14:41:26,578 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-04 14:41:26,593 [job_status.py:update_file_metadata()] - Update Metadata. File: cable clip.gcode Size: 935927
2023-11-04 14:41:26,603 [job_status.py:show_file_thumbnail()] - cable clip.gcode
2023-11-04 15:15:13,859 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-11-04 15:15:19,614 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-04 15:15:19,615 [printer.py:change_state()] - Adding callback for state: ready
2023-11-04 15:25:51,077 [print.py:_callback()] - newfiles: ['.thumbs/kabelclip-32x32.png']
2023-11-04 15:25:51,078 [print.py:_callback()] - deletedfiles: []
2023-11-04 15:25:51,078 [print.py:_callback()] - updatefiles: []
2023-11-04 15:25:51,080 [print.py:_callback()] - newfiles: ['.thumbs/kabelclip-32x32.png']
2023-11-04 15:25:51,081 [print.py:_callback()] - deletedfiles: []
2023-11-04 15:25:51,081 [print.py:_callback()] - updatefiles: []
2023-11-04 15:25:51,095 [print.py:_callback()] - newfiles: ['.thumbs/kabelclip-400x300.png']
2023-11-04 15:25:51,096 [print.py:_callback()] - deletedfiles: []
2023-11-04 15:25:51,096 [print.py:_callback()] - updatefiles: []
2023-11-04 15:25:51,097 [files.py:_callback()] - Error in getting metadata for .thumbs/kabelclip-32x32.png. Retrying in 6 seconds
2023-11-04 15:25:51,098 [print.py:_callback()] - newfiles: ['.thumbs/kabelclip-400x300.png']
2023-11-04 15:25:51,099 [print.py:_callback()] - deletedfiles: []
2023-11-04 15:25:51,099 [print.py:_callback()] - updatefiles: []
2023-11-04 15:25:51,102 [files.py:_callback()] - Error in getting metadata for .thumbs/kabelclip-400x300.png. Retrying in 6 seconds
2023-11-04 15:25:51,103 [print.py:_callback()] - newfiles: ['kabelclip.gcode']
2023-11-04 15:25:51,132 [print.py:_callback()] - deletedfiles: []
2023-11-04 15:25:51,132 [print.py:_callback()] - updatefiles: []
2023-11-04 15:25:51,133 [print.py:_callback()] - newfiles: ['kabelclip.gcode']
2023-11-04 15:25:51,136 [print.py:_callback()] - deletedfiles: []
2023-11-04 15:25:51,136 [print.py:_callback()] - updatefiles: []
2023-11-04 15:25:51,144 [print.py:_callback()] - newfiles: []
2023-11-04 15:25:51,144 [print.py:_callback()] - deletedfiles: []
2023-11-04 15:25:51,144 [print.py:_callback()] - updatefiles: ['kabelclip.gcode']
2023-11-04 15:25:51,145 [print.py:update_file()] - Updating file kabelclip.gcode
2023-11-04 15:25:51,147 [print.py:_callback()] - newfiles: []
2023-11-04 15:25:51,147 [print.py:_callback()] - deletedfiles: []
2023-11-04 15:25:51,147 [print.py:_callback()] - updatefiles: ['kabelclip.gcode']
2023-11-04 15:25:51,147 [print.py:update_file()] - Updating file kabelclip.gcode
2023-11-04 15:25:51,230 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-04 15:25:51,230 [printer.py:change_state()] - Adding callback for state: printing
2023-11-04 15:25:51,243 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2023-11-04 15:25:51,251 [job_status.py:update_file_metadata()] - Update Metadata. File: kabelclip.gcode Size: 2907620
2023-11-04 15:25:51,261 [job_status.py:show_file_thumbnail()] - kabelclip.gcode
2023-11-04 15:25:51,324 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 15:25:51,554 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-04 15:25:51,566 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-04 15:25:51,582 [job_status.py:update_file_metadata()] - Update Metadata. File: kabelclip.gcode Size: 2907620
2023-11-04 15:25:51,592 [job_status.py:show_file_thumbnail()] - kabelclip.gcode
2023-11-04 15:41:26,687 [screen.py:show_screensaver()] - Showing Screensaver
2023-11-04 16:36:29,746 [screen.py:close_screensaver()] - Closing Screensaver
2023-11-04 16:36:29,772 [screen.py:wake_screen()] - Screen wake up
2023-11-04 16:36:29,826 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-11-04 16:36:35,505 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-04 16:36:35,506 [printer.py:change_state()] - Adding callback for state: ready
2023-11-04 16:38:10,693 [print.py:_callback()] - newfiles: ['.thumbs/front_left_z_motor_mount-32x32.png']
2023-11-04 16:38:10,694 [print.py:_callback()] - deletedfiles: []
2023-11-04 16:38:10,694 [print.py:_callback()] - updatefiles: []
2023-11-04 16:38:10,695 [print.py:_callback()] - newfiles: ['.thumbs/front_left_z_motor_mount-32x32.png']
2023-11-04 16:38:10,696 [print.py:_callback()] - deletedfiles: []
2023-11-04 16:38:10,696 [print.py:_callback()] - updatefiles: []
2023-11-04 16:38:10,708 [files.py:_callback()] - Error in getting metadata for .thumbs/front_left_z_motor_mount-32x32.png. Retrying in 6 seconds
2023-11-04 16:38:10,709 [print.py:_callback()] - newfiles: ['.thumbs/front_left_z_motor_mount-400x300.png']
2023-11-04 16:38:10,709 [print.py:_callback()] - deletedfiles: []
2023-11-04 16:38:10,710 [print.py:_callback()] - updatefiles: []
2023-11-04 16:38:10,711 [print.py:_callback()] - newfiles: ['.thumbs/front_left_z_motor_mount-400x300.png']
2023-11-04 16:38:10,711 [print.py:_callback()] - deletedfiles: []
2023-11-04 16:38:10,712 [print.py:_callback()] - updatefiles: []
2023-11-04 16:38:10,719 [print.py:_callback()] - newfiles: ['front_left_z_motor_mount.gcode']
2023-11-04 16:38:10,747 [print.py:_callback()] - deletedfiles: []
2023-11-04 16:38:10,748 [print.py:_callback()] - updatefiles: []
2023-11-04 16:38:10,748 [print.py:_callback()] - newfiles: ['front_left_z_motor_mount.gcode']
2023-11-04 16:38:10,750 [print.py:_callback()] - deletedfiles: []
2023-11-04 16:38:10,751 [print.py:_callback()] - updatefiles: []
2023-11-04 16:38:10,752 [files.py:_callback()] - Error in getting metadata for .thumbs/front_left_z_motor_mount-400x300.png. Retrying in 6 seconds
2023-11-04 16:38:10,758 [print.py:_callback()] - newfiles: []
2023-11-04 16:38:10,758 [print.py:_callback()] - deletedfiles: []
2023-11-04 16:38:10,758 [print.py:_callback()] - updatefiles: ['front_left_z_motor_mount.gcode']
2023-11-04 16:38:10,759 [print.py:update_file()] - Updating file front_left_z_motor_mount.gcode
2023-11-04 16:38:10,761 [print.py:_callback()] - newfiles: []
2023-11-04 16:38:10,761 [print.py:_callback()] - deletedfiles: []
2023-11-04 16:38:10,761 [print.py:_callback()] - updatefiles: ['front_left_z_motor_mount.gcode']
2023-11-04 16:38:10,762 [print.py:update_file()] - Updating file front_left_z_motor_mount.gcode
2023-11-04 16:38:10,785 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-04 16:38:10,786 [printer.py:change_state()] - Adding callback for state: printing
2023-11-04 16:38:10,798 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2023-11-04 16:38:10,806 [job_status.py:update_file_metadata()] - Update Metadata. File: front_left_z_motor_mount.gcode Size: 8183708
2023-11-04 16:38:10,817 [job_status.py:show_file_thumbnail()] - front_left_z_motor_mount.gcode
2023-11-04 16:38:10,876 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 16:38:11,105 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-04 16:38:11,116 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-04 16:38:11,133 [job_status.py:update_file_metadata()] - Update Metadata. File: front_left_z_motor_mount.gcode Size: 8183708
2023-11-04 16:38:11,142 [job_status.py:show_file_thumbnail()] - front_left_z_motor_mount.gcode
2023-11-04 16:44:16,643 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=834, height=480)
2023-11-04 16:44:17,539 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-04 16:44:17,539 [job_status.py:cancel_confirm()] - Canceling print
2023-11-04 16:44:17,541 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-11-04 16:44:17,553 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-11-04 16:44:17,742 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-11-04 16:44:21,997 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-04 16:44:21,997 [printer.py:change_state()] - Adding callback for state: ready
2023-11-04 16:44:23,605 [job_status.py:close_panel()] - Closing job_status panel
2023-11-04 16:44:23,613 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 16:44:23,791 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-04 16:44:23,805 [main_menu.py:add_device()] - Adding device: extruder
2023-11-04 16:44:23,815 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-04 16:44:23,826 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-04 16:44:23,837 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-04 16:44:23,847 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-04 16:44:23,858 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-04 16:44:23,930 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-04 16:44:24,857 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 16:44:25,016 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-11-04 16:44:27,710 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-11-04 16:44:27,719 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-11-04 16:44:30,253 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-11-04 16:44:30,260 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-11-04 16:45:44,542 [files.py:_callback()] - Error in getting metadata for .thumbs/front_left_z_motor_mount-32x32.png. Retrying in 6 seconds
2023-11-04 16:45:44,547 [files.py:_callback()] - Error in getting metadata for .thumbs/front_left_z_motor_mount-400x300.png. Retrying in 6 seconds
2023-11-04 16:45:44,557 [print.py:_callback()] - newfiles: []
2023-11-04 16:45:44,558 [print.py:_callback()] - deletedfiles: []
2023-11-04 16:45:44,558 [print.py:_callback()] - updatefiles: ['front_left_z_motor_mount.gcode']
2023-11-04 16:45:44,559 [print.py:update_file()] - Updating file front_left_z_motor_mount.gcode
2023-11-04 16:45:44,560 [print.py:_callback()] - newfiles: []
2023-11-04 16:45:44,561 [print.py:_callback()] - deletedfiles: []
2023-11-04 16:45:44,561 [print.py:_callback()] - updatefiles: ['front_left_z_motor_mount.gcode']
2023-11-04 16:45:44,561 [print.py:update_file()] - Updating file front_left_z_motor_mount.gcode
2023-11-04 16:45:44,746 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-04 16:45:44,746 [printer.py:change_state()] - Adding callback for state: printing
2023-11-04 16:45:44,761 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 16:45:44,976 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-04 16:45:44,988 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-04 16:45:45,005 [job_status.py:update_file_metadata()] - Update Metadata. File: front_left_z_motor_mount.gcode Size: 3956973
2023-11-04 16:45:45,016 [job_status.py:show_file_thumbnail()] - front_left_z_motor_mount.gcode
2023-11-04 16:45:45,530 [files.py:add_file()] - File already exists: front_left_z_motor_mount.gcode
2023-11-04 16:45:45,533 [print.py:_callback()] - newfiles: []
2023-11-04 16:45:45,533 [print.py:_callback()] - deletedfiles: []
2023-11-04 16:45:45,534 [print.py:_callback()] - updatefiles: ['front_left_z_motor_mount.gcode']
2023-11-04 16:45:45,535 [print.py:update_file()] - Updating file front_left_z_motor_mount.gcode
2023-11-04 16:45:45,538 [print.py:_callback()] - newfiles: []
2023-11-04 16:45:45,538 [print.py:_callback()] - deletedfiles: []
2023-11-04 16:45:45,539 [print.py:_callback()] - updatefiles: ['front_left_z_motor_mount.gcode']
2023-11-04 16:45:45,539 [print.py:update_file()] - Updating file front_left_z_motor_mount.gcode
2023-11-04 16:45:45,554 [print.py:_callback()] - newfiles: []
2023-11-04 16:45:45,554 [print.py:_callback()] - deletedfiles: []
2023-11-04 16:45:45,555 [print.py:_callback()] - updatefiles: ['front_left_z_motor_mount.gcode']
2023-11-04 16:45:45,555 [print.py:update_file()] - Updating file front_left_z_motor_mount.gcode
2023-11-04 16:45:45,557 [print.py:_callback()] - newfiles: []
2023-11-04 16:45:45,558 [print.py:_callback()] - deletedfiles: []
2023-11-04 16:45:45,558 [print.py:_callback()] - updatefiles: ['front_left_z_motor_mount.gcode']
2023-11-04 16:45:45,558 [print.py:update_file()] - Updating file front_left_z_motor_mount.gcode
2023-11-04 16:53:19,659 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2023-11-04 16:53:20,497 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-04 16:53:20,497 [job_status.py:cancel_confirm()] - Canceling print
2023-11-04 16:53:20,498 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-11-04 16:53:20,509 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-11-04 16:53:20,884 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-11-04 16:53:23,627 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-04 16:53:23,628 [printer.py:change_state()] - Adding callback for state: ready
2023-11-04 16:53:24,950 [printer.py:get_probe()] - Probe type: probe
2023-11-04 16:53:24,982 [KlippyGtk.py:Dialog()] - Showing dialog Save Z (width=800, height=480)
2023-11-04 16:53:26,340 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-04 16:53:26,340 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: Z_OFFSET_APPLY_PROBE
2023-11-04 16:53:26,343 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SAVE_CONFIG
2023-11-04 16:53:26,424 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffff9c60d080 (GtkDialog at 0xe5df6a0)>
2023-11-04 16:53:26,477 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2023-11-04 16:53:27,604 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-04 16:53:27,604 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-04 16:53:27,606 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-04 16:53:27,612 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-04 16:53:27,613 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 16:53:27,682 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-04 16:53:29,930 [screen.py:_go_to_submenu()] - #### Go to submenu 
2023-11-04 16:53:29,930 [screen.py:_go_to_submenu()] - #### Menu __splashscreen
2023-11-04 16:53:29,934 [screen.py:_load_panel()] - Loading panel: menu
2023-11-04 16:53:29,950 [menu.py:evaluate_enable()] - moonraker connected True
2023-11-04 16:53:30,029 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen > 
2023-11-04 16:53:30,040 [menu.py:arrangeMenuItems()] - X > power
2023-11-04 16:53:30,044 [menu.py:evaluate_enable()] - moonraker connected True
2023-11-04 16:53:30,712 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-04 16:53:30,737 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-04 16:53:30,740 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-04 16:53:30,762 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-04 16:53:30,764 [printer.py:configure_cameras()] - Cameras: []
2023-11-04 16:53:30,851 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-04 16:53:30,885 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-04 16:53:30,889 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'max_extrude_cross_section': '5', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'firmware_retraction': {'retract_length': '5', 'retract_speed': '20', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.250'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n0.018750, 0.007500, -0.023750\n-0.056875, -0.033125, -0.045000\n-0.101875, -0.092500, -0.111875', 'x_count': '3', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '54.769999999999996', 'max_x': '144.32999999999998', 'min_y': '14.469999999999999', 'max_y': '94.56'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'firmware_retraction': {'retract_length': 5.0, 'retract_speed': 20.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.01875, 0.0075, -0.02375], [-0.056875, -0.033125, -0.045], [-0.101875, -0.0925, -0.111875]], 'min_x': 54.769999999999996, 'max_x': 144.32999999999998, 'min_y': 14.469999999999999, 'max_y': 94.56, 'x_count': 3, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.25, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-04 16:53:30,897 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-11-04 16:53:30,898 [printer.py:reinit()] - # Extruders: 1
2023-11-04 16:53:30,898 [printer.py:reinit()] - # Temperature devices: 5
2023-11-04 16:53:30,898 [printer.py:reinit()] - # Fans: 2
2023-11-04 16:53:30,898 [printer.py:reinit()] - # Output pins: 1
2023-11-04 16:53:30,899 [printer.py:reinit()] - # Leds: 0
2023-11-04 16:53:30,921 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-04 16:53:30,924 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-04 16:53:31,204 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-11-04 16:53:31,259 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-04 16:53:31,270 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-11-04 16:53:31,292 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-04 16:53:31,295 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-04 16:53:31,296 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-11-04 16:53:31,297 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-04 16:53:31,299 [screen.py:init_printer()] - Printer initialized
2023-11-04 16:53:31,300 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-11-04 16:53:31,301 [printer.py:change_state()] - Adding callback for state: startup
2023-11-04 16:53:31,309 [screen.py:_menu_go_back()] - #### Menu go back
2023-11-04 16:53:31,330 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-04 16:53:31,442 [print.py:_callback()] - newfiles: []
2023-11-04 16:53:31,442 [print.py:_callback()] - deletedfiles: ['.thumbs/kabelclip-32x32.png', '.thumbs/kabelclip-400x300.png', '.thumbs/front_left_z_motor_mount-32x32.png', '.thumbs/front_left_z_motor_mount-400x300.png']
2023-11-04 16:53:31,443 [print.py:_callback()] - updatefiles: []
2023-11-04 16:53:31,444 [print.py:_callback()] - newfiles: []
2023-11-04 16:53:31,445 [print.py:_callback()] - deletedfiles: ['.thumbs/kabelclip-32x32.png', '.thumbs/kabelclip-400x300.png', '.thumbs/front_left_z_motor_mount-32x32.png', '.thumbs/front_left_z_motor_mount-400x300.png']
2023-11-04 16:53:31,445 [print.py:_callback()] - updatefiles: []
2023-11-04 16:53:31,446 [print.py:_callback()] - newfiles: []
2023-11-04 16:53:31,447 [print.py:_callback()] - deletedfiles: ['.thumbs/kabelclip-32x32.png']
2023-11-04 16:53:31,447 [print.py:_callback()] - updatefiles: []
2023-11-04 16:53:31,448 [print.py:_callback()] - newfiles: []
2023-11-04 16:53:31,449 [print.py:_callback()] - deletedfiles: ['.thumbs/kabelclip-32x32.png']
2023-11-04 16:53:31,449 [print.py:_callback()] - updatefiles: []
2023-11-04 16:53:31,450 [print.py:_callback()] - newfiles: []
2023-11-04 16:53:31,451 [print.py:_callback()] - deletedfiles: ['.thumbs/kabelclip-400x300.png']
2023-11-04 16:53:31,451 [print.py:_callback()] - updatefiles: []
2023-11-04 16:53:31,452 [print.py:_callback()] - newfiles: []
2023-11-04 16:53:31,453 [print.py:_callback()] - deletedfiles: ['.thumbs/kabelclip-400x300.png']
2023-11-04 16:53:31,453 [print.py:_callback()] - updatefiles: []
2023-11-04 16:53:31,454 [print.py:_callback()] - newfiles: []
2023-11-04 16:53:31,455 [print.py:_callback()] - deletedfiles: ['.thumbs/front_left_z_motor_mount-32x32.png']
2023-11-04 16:53:31,455 [print.py:_callback()] - updatefiles: []
2023-11-04 16:53:31,456 [print.py:_callback()] - newfiles: []
2023-11-04 16:53:31,456 [print.py:_callback()] - deletedfiles: ['.thumbs/front_left_z_motor_mount-32x32.png']
2023-11-04 16:53:31,457 [print.py:_callback()] - updatefiles: []
2023-11-04 16:53:31,458 [print.py:_callback()] - newfiles: []
2023-11-04 16:53:31,459 [print.py:_callback()] - deletedfiles: ['.thumbs/front_left_z_motor_mount-400x300.png']
2023-11-04 16:53:31,459 [print.py:_callback()] - updatefiles: []
2023-11-04 16:53:31,460 [print.py:_callback()] - newfiles: []
2023-11-04 16:53:31,460 [print.py:_callback()] - deletedfiles: ['.thumbs/front_left_z_motor_mount-400x300.png']
2023-11-04 16:53:31,461 [print.py:_callback()] - updatefiles: []
2023-11-04 16:53:32,343 [KlippyWebsocket.py:connect()] - Already connected
2023-11-04 16:53:32,626 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-11-04 16:53:32,626 [printer.py:change_state()] - Adding callback for state: ready
2023-11-04 16:53:32,632 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 16:53:32,760 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-04 16:53:32,774 [main_menu.py:add_device()] - Adding device: extruder
2023-11-04 16:53:32,784 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-04 16:53:32,794 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-04 16:53:32,804 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-04 16:53:32,814 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-04 16:53:32,825 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-04 16:53:32,897 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-04 16:53:34,329 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 16:53:34,489 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-11-04 16:53:35,815 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-11-04 16:53:35,824 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-11-04 16:53:35,848 [screen.py:show_popup_message()] - error: Must home axis first: 0.000 0.000 25.000 [0.000]
2023-11-04 16:53:41,150 [screen.py:_menu_go_back()] - #### Menu go back
2023-11-04 16:53:41,206 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-04 16:53:43,259 [screen.py:_load_panel()] - Loading panel: gcode_macros
2023-11-04 16:53:43,343 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > gcode_macros
2023-11-04 16:53:45,272 [screen.py:show_popup_message()] - echo: FAKE_POSITION 
2023-11-04 16:53:45,281 [screen.py:_send_action()] - printer.gcode.script: {'script': 'FAKE_POSITION'}
2023-11-04 16:53:47,638 [screen.py:_menu_go_back()] - #### Menu go back
2023-11-04 16:53:47,726 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-04 16:53:49,026 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-11-04 16:53:50,054 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-11-04 16:53:50,060 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-11-04 16:53:51,600 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-11-04 16:53:51,605 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-11-04 17:53:51,688 [screen.py:show_screensaver()] - Showing Screensaver
2023-11-04 18:53:07,224 [print.py:_callback()] - newfiles: []
2023-11-04 18:53:07,224 [print.py:_callback()] - deletedfiles: []
2023-11-04 18:53:07,225 [print.py:_callback()] - updatefiles: ['front_left_z_motor_mount.gcode']
2023-11-04 18:53:07,225 [print.py:update_file()] - Updating file front_left_z_motor_mount.gcode
2023-11-04 18:53:07,227 [print.py:_callback()] - newfiles: []
2023-11-04 18:53:07,227 [print.py:_callback()] - deletedfiles: []
2023-11-04 18:53:07,228 [print.py:_callback()] - updatefiles: ['front_left_z_motor_mount.gcode']
2023-11-04 18:53:07,228 [print.py:update_file()] - Updating file front_left_z_motor_mount.gcode
2023-11-04 18:53:07,365 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-04 18:53:07,365 [printer.py:change_state()] - Adding callback for state: printing
2023-11-04 18:53:07,374 [screen.py:close_screensaver()] - Closing Screensaver
2023-11-04 18:53:07,406 [screen.py:wake_screen()] - Screen wake up
2023-11-04 18:53:07,463 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 18:53:07,718 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-04 18:53:07,731 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-04 18:53:07,748 [job_status.py:update_file_metadata()] - Update Metadata. File: front_left_z_motor_mount.gcode Size: 5094702
2023-11-04 18:53:07,758 [job_status.py:show_file_thumbnail()] - front_left_z_motor_mount.gcode
2023-11-04 18:53:08,206 [files.py:add_file()] - File already exists: front_left_z_motor_mount.gcode
2023-11-04 18:53:08,209 [print.py:_callback()] - newfiles: []
2023-11-04 18:53:08,210 [print.py:_callback()] - deletedfiles: []
2023-11-04 18:53:08,211 [print.py:_callback()] - updatefiles: ['front_left_z_motor_mount.gcode']
2023-11-04 18:53:08,211 [print.py:update_file()] - Updating file front_left_z_motor_mount.gcode
2023-11-04 18:53:08,214 [print.py:_callback()] - newfiles: []
2023-11-04 18:53:08,214 [print.py:_callback()] - deletedfiles: []
2023-11-04 18:53:08,215 [print.py:_callback()] - updatefiles: ['front_left_z_motor_mount.gcode']
2023-11-04 18:53:08,215 [print.py:update_file()] - Updating file front_left_z_motor_mount.gcode
2023-11-04 18:53:08,228 [print.py:_callback()] - newfiles: []
2023-11-04 18:53:08,229 [print.py:_callback()] - deletedfiles: []
2023-11-04 18:53:08,230 [print.py:_callback()] - updatefiles: ['front_left_z_motor_mount.gcode']
2023-11-04 18:53:08,230 [print.py:update_file()] - Updating file front_left_z_motor_mount.gcode
2023-11-04 18:53:08,232 [print.py:_callback()] - newfiles: []
2023-11-04 18:53:08,233 [print.py:_callback()] - deletedfiles: []
2023-11-04 18:53:08,233 [print.py:_callback()] - updatefiles: ['front_left_z_motor_mount.gcode']
2023-11-04 18:53:08,233 [print.py:update_file()] - Updating file front_left_z_motor_mount.gcode
2023-11-04 19:07:04,811 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 19:07:04,940 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2023-11-04 19:07:09,177 [fine_tune.py:change_percent_delta()] - ### Delta 0.05
2023-11-04 19:07:09,891 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2023-11-04 19:10:26,650 [screen.py:_menu_go_back()] - #### Menu go back
2023-11-04 19:10:26,745 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-04 19:10:26,765 [job_status.py:update_file_metadata()] - Update Metadata. File: front_left_z_motor_mount.gcode Size: 5094702
2023-11-04 19:10:26,774 [job_status.py:show_file_thumbnail()] - front_left_z_motor_mount.gcode
2023-11-04 19:10:28,509 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2023-11-04 19:10:29,431 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-04 19:10:29,432 [job_status.py:cancel_confirm()] - Canceling print
2023-11-04 19:10:29,433 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-11-04 19:10:29,446 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-11-04 19:10:29,856 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-11-04 19:10:30,785 [job_status.py:close_panel()] - Closing job_status panel
2023-11-04 19:10:30,790 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 19:10:30,916 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-04 19:10:30,930 [main_menu.py:add_device()] - Adding device: extruder
2023-11-04 19:10:30,940 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-04 19:10:30,950 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-04 19:10:30,960 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-04 19:10:30,971 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-04 19:10:30,981 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-04 19:10:31,049 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-04 19:10:32,268 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 19:10:32,428 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-11-04 19:10:32,851 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-04 19:10:32,851 [printer.py:change_state()] - Adding callback for state: ready
2023-11-04 19:10:32,862 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 19:10:32,982 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-04 19:10:32,995 [main_menu.py:add_device()] - Adding device: extruder
2023-11-04 19:10:33,005 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-04 19:10:33,016 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-04 19:10:33,026 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-04 19:10:33,036 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-04 19:10:33,046 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-04 19:10:33,117 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-04 19:10:33,468 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 19:10:33,498 [temperature.py:add_device()] - Adding device: extruder
2023-11-04 19:10:33,510 [temperature.py:add_device()] - Adding device: heater_bed
2023-11-04 19:10:33,523 [temperature.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-04 19:10:33,533 [temperature.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-04 19:10:33,543 [temperature.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-04 19:10:33,553 [temperature.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-04 19:10:33,565 [temperature.py:select_heater()] - Selecting extruder
2023-11-04 19:10:33,567 [temperature.py:select_heater()] - Selecting heater_bed
2023-11-04 19:10:33,634 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2023-11-04 19:10:35,674 [screen.py:_menu_go_back()] - #### Menu go back
2023-11-04 19:10:35,774 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-04 19:10:36,660 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 19:10:36,808 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-11-04 19:10:37,652 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-11-04 19:10:37,658 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-11-04 19:15:57,223 [print.py:_callback()] - newfiles: []
2023-11-04 19:15:57,223 [print.py:_callback()] - deletedfiles: []
2023-11-04 19:15:57,224 [print.py:_callback()] - updatefiles: ['front_left_z_motor_mount.gcode']
2023-11-04 19:15:57,224 [print.py:update_file()] - Updating file front_left_z_motor_mount.gcode
2023-11-04 19:15:57,226 [print.py:_callback()] - newfiles: []
2023-11-04 19:15:57,226 [print.py:_callback()] - deletedfiles: []
2023-11-04 19:15:57,227 [print.py:_callback()] - updatefiles: ['front_left_z_motor_mount.gcode']
2023-11-04 19:15:57,227 [print.py:update_file()] - Updating file front_left_z_motor_mount.gcode
2023-11-04 19:15:57,287 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-04 19:15:57,288 [printer.py:change_state()] - Adding callback for state: printing
2023-11-04 19:15:57,302 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 19:15:57,527 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-04 19:15:57,542 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-04 19:15:57,558 [job_status.py:update_file_metadata()] - Update Metadata. File: front_left_z_motor_mount.gcode Size: 4990360
2023-11-04 19:15:57,568 [job_status.py:show_file_thumbnail()] - front_left_z_motor_mount.gcode
2023-11-04 19:15:58,201 [files.py:add_file()] - File already exists: front_left_z_motor_mount.gcode
2023-11-04 19:15:58,205 [print.py:_callback()] - newfiles: []
2023-11-04 19:15:58,205 [print.py:_callback()] - deletedfiles: []
2023-11-04 19:15:58,206 [print.py:_callback()] - updatefiles: ['front_left_z_motor_mount.gcode']
2023-11-04 19:15:58,206 [print.py:update_file()] - Updating file front_left_z_motor_mount.gcode
2023-11-04 19:15:58,209 [print.py:_callback()] - newfiles: []
2023-11-04 19:15:58,210 [print.py:_callback()] - deletedfiles: []
2023-11-04 19:15:58,211 [print.py:_callback()] - updatefiles: ['front_left_z_motor_mount.gcode']
2023-11-04 19:15:58,211 [print.py:update_file()] - Updating file front_left_z_motor_mount.gcode
2023-11-04 19:15:58,238 [print.py:_callback()] - newfiles: []
2023-11-04 19:15:58,239 [print.py:_callback()] - deletedfiles: []
2023-11-04 19:15:58,239 [print.py:_callback()] - updatefiles: ['front_left_z_motor_mount.gcode']
2023-11-04 19:15:58,240 [print.py:update_file()] - Updating file front_left_z_motor_mount.gcode
2023-11-04 19:15:58,245 [print.py:_callback()] - newfiles: []
2023-11-04 19:15:58,246 [print.py:_callback()] - deletedfiles: []
2023-11-04 19:15:58,246 [print.py:_callback()] - updatefiles: ['front_left_z_motor_mount.gcode']
2023-11-04 19:15:58,247 [print.py:update_file()] - Updating file front_left_z_motor_mount.gcode
2023-11-04 19:20:28,314 [screen.py:show_popup_message()] - error: Communication timeout during homing z
2023-11-04 19:20:28,325 [screen.py:show_popup_message()] - error: Communication timeout during homing z
2023-11-04 19:20:28,337 [screen.py:show_popup_message()] - echo: Extruder not hot enough
2023-11-04 19:20:28,589 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-11-04 19:20:29,270 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-04 19:20:29,271 [printer.py:change_state()] - Adding callback for state: ready
2023-11-04 19:21:52,194 [print.py:_callback()] - newfiles: ['.thumbs/Trident_Internal_Spool___PTFE_guide_x2_-32x32.png']
2023-11-04 19:21:52,195 [print.py:_callback()] - deletedfiles: []
2023-11-04 19:21:52,196 [print.py:_callback()] - updatefiles: []
2023-11-04 19:21:52,198 [print.py:_callback()] - newfiles: ['.thumbs/Trident_Internal_Spool___PTFE_guide_x2_-32x32.png']
2023-11-04 19:21:52,199 [print.py:_callback()] - deletedfiles: []
2023-11-04 19:21:52,199 [print.py:_callback()] - updatefiles: []
2023-11-04 19:21:52,210 [print.py:_callback()] - newfiles: ['.thumbs/Trident_Internal_Spool___PTFE_guide_x2_-400x300.png']
2023-11-04 19:21:52,211 [print.py:_callback()] - deletedfiles: []
2023-11-04 19:21:52,211 [print.py:_callback()] - updatefiles: []
2023-11-04 19:21:52,213 [print.py:_callback()] - newfiles: ['.thumbs/Trident_Internal_Spool___PTFE_guide_x2_-400x300.png']
2023-11-04 19:21:52,214 [print.py:_callback()] - deletedfiles: []
2023-11-04 19:21:52,214 [print.py:_callback()] - updatefiles: []
2023-11-04 19:21:52,215 [files.py:_callback()] - Error in getting metadata for .thumbs/Trident_Internal_Spool___PTFE_guide_x2_-32x32.png. Retrying in 6 seconds
2023-11-04 19:21:52,224 [print.py:_callback()] - newfiles: ['Trident_Internal_Spool___PTFE_guide_x2_.gcode']
2023-11-04 19:21:52,251 [print.py:_callback()] - deletedfiles: []
2023-11-04 19:21:52,252 [print.py:_callback()] - updatefiles: []
2023-11-04 19:21:52,252 [print.py:_callback()] - newfiles: ['Trident_Internal_Spool___PTFE_guide_x2_.gcode']
2023-11-04 19:21:52,254 [print.py:_callback()] - deletedfiles: []
2023-11-04 19:21:52,255 [print.py:_callback()] - updatefiles: []
2023-11-04 19:21:52,256 [files.py:_callback()] - Error in getting metadata for .thumbs/Trident_Internal_Spool___PTFE_guide_x2_-400x300.png. Retrying in 6 seconds
2023-11-04 19:21:52,262 [print.py:_callback()] - newfiles: []
2023-11-04 19:21:52,263 [print.py:_callback()] - deletedfiles: []
2023-11-04 19:21:52,263 [print.py:_callback()] - updatefiles: ['Trident_Internal_Spool___PTFE_guide_x2_.gcode']
2023-11-04 19:21:52,263 [print.py:update_file()] - Updating file Trident_Internal_Spool___PTFE_guide_x2_.gcode
2023-11-04 19:21:52,266 [print.py:_callback()] - newfiles: []
2023-11-04 19:21:52,267 [print.py:_callback()] - deletedfiles: []
2023-11-04 19:21:52,267 [print.py:_callback()] - updatefiles: ['Trident_Internal_Spool___PTFE_guide_x2_.gcode']
2023-11-04 19:21:52,267 [print.py:update_file()] - Updating file Trident_Internal_Spool___PTFE_guide_x2_.gcode
2023-11-04 19:21:52,285 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-04 19:21:52,286 [printer.py:change_state()] - Adding callback for state: printing
2023-11-04 19:21:52,298 [job_status.py:set_state()] - Changing job_status state from 'cancelled' to 'printing'
2023-11-04 19:21:52,306 [job_status.py:update_file_metadata()] - Update Metadata. File: Trident_Internal_Spool___PTFE_guide_x2_.gcode Size: 7350230
2023-11-04 19:21:52,317 [job_status.py:show_file_thumbnail()] - Trident_Internal_Spool___PTFE_guide_x2_.gcode
2023-11-04 19:21:52,395 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 19:21:52,649 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-04 19:21:52,661 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-04 19:21:52,678 [job_status.py:update_file_metadata()] - Update Metadata. File: Trident_Internal_Spool___PTFE_guide_x2_.gcode Size: 7350230
2023-11-04 19:21:52,688 [job_status.py:show_file_thumbnail()] - Trident_Internal_Spool___PTFE_guide_x2_.gcode
2023-11-04 19:36:50,871 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2023-11-04 19:36:51,705 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-04 19:36:51,706 [job_status.py:cancel_confirm()] - Canceling print
2023-11-04 19:36:51,707 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-11-04 19:36:51,714 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-11-04 19:36:52,183 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-11-04 19:36:54,927 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-04 19:36:54,927 [printer.py:change_state()] - Adding callback for state: ready
2023-11-04 19:41:33,795 [print.py:_callback()] - newfiles: ['.thumbs/Trident_Internal_Spool___PTFE_guide_x2__ABS_1h18m-300x300.png']
2023-11-04 19:41:33,796 [print.py:_callback()] - deletedfiles: []
2023-11-04 19:41:33,796 [print.py:_callback()] - updatefiles: []
2023-11-04 19:41:33,798 [print.py:_callback()] - newfiles: ['.thumbs/Trident_Internal_Spool___PTFE_guide_x2__ABS_1h18m-300x300.png']
2023-11-04 19:41:33,798 [print.py:_callback()] - deletedfiles: []
2023-11-04 19:41:33,799 [print.py:_callback()] - updatefiles: []
2023-11-04 19:41:33,804 [print.py:_callback()] - newfiles: ['.thumbs/Trident_Internal_Spool___PTFE_guide_x2__ABS_1h18m-32x32.png']
2023-11-04 19:41:33,805 [print.py:_callback()] - deletedfiles: []
2023-11-04 19:41:33,805 [print.py:_callback()] - updatefiles: []
2023-11-04 19:41:33,809 [print.py:_callback()] - newfiles: ['.thumbs/Trident_Internal_Spool___PTFE_guide_x2__ABS_1h18m-32x32.png']
2023-11-04 19:41:33,810 [print.py:_callback()] - deletedfiles: []
2023-11-04 19:41:33,810 [print.py:_callback()] - updatefiles: []
2023-11-04 19:41:33,811 [files.py:_callback()] - Error in getting metadata for .thumbs/Trident_Internal_Spool___PTFE_guide_x2__ABS_1h18m-300x300.png. Retrying in 6 seconds
2023-11-04 19:41:33,817 [print.py:_callback()] - newfiles: ['Trident_Internal_Spool___PTFE_guide_x2__ABS_1h18m.gcode']
2023-11-04 19:41:33,853 [print.py:_callback()] - deletedfiles: []
2023-11-04 19:41:33,853 [print.py:_callback()] - updatefiles: []
2023-11-04 19:41:33,854 [print.py:_callback()] - newfiles: ['Trident_Internal_Spool___PTFE_guide_x2__ABS_1h18m.gcode']
2023-11-04 19:41:33,856 [print.py:_callback()] - deletedfiles: []
2023-11-04 19:41:33,856 [print.py:_callback()] - updatefiles: []
2023-11-04 19:41:33,857 [files.py:_callback()] - Error in getting metadata for .thumbs/Trident_Internal_Spool___PTFE_guide_x2__ABS_1h18m-32x32.png. Retrying in 6 seconds
2023-11-04 19:41:33,865 [print.py:_callback()] - newfiles: []
2023-11-04 19:41:33,865 [print.py:_callback()] - deletedfiles: []
2023-11-04 19:41:33,866 [print.py:_callback()] - updatefiles: ['Trident_Internal_Spool___PTFE_guide_x2__ABS_1h18m.gcode']
2023-11-04 19:41:33,866 [print.py:update_file()] - Updating file Trident_Internal_Spool___PTFE_guide_x2__ABS_1h18m.gcode
2023-11-04 19:41:33,868 [print.py:_callback()] - newfiles: []
2023-11-04 19:41:33,869 [print.py:_callback()] - deletedfiles: []
2023-11-04 19:41:33,869 [print.py:_callback()] - updatefiles: ['Trident_Internal_Spool___PTFE_guide_x2__ABS_1h18m.gcode']
2023-11-04 19:41:33,869 [print.py:update_file()] - Updating file Trident_Internal_Spool___PTFE_guide_x2__ABS_1h18m.gcode
2023-11-04 19:41:33,989 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-04 19:41:33,989 [printer.py:change_state()] - Adding callback for state: printing
2023-11-04 19:41:34,004 [job_status.py:set_state()] - Changing job_status state from 'cancelled' to 'printing'
2023-11-04 19:41:34,015 [job_status.py:update_file_metadata()] - Update Metadata. File: Trident_Internal_Spool___PTFE_guide_x2__ABS_1h18m.gcode Size: 5525400
2023-11-04 19:41:34,024 [job_status.py:show_file_thumbnail()] - Trident_Internal_Spool___PTFE_guide_x2__ABS_1h18m.gcode
2023-11-04 19:41:34,087 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 19:41:34,310 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-04 19:41:34,320 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-04 19:41:34,335 [job_status.py:update_file_metadata()] - Update Metadata. File: Trident_Internal_Spool___PTFE_guide_x2__ABS_1h18m.gcode Size: 5525400
2023-11-04 19:41:34,344 [job_status.py:show_file_thumbnail()] - Trident_Internal_Spool___PTFE_guide_x2__ABS_1h18m.gcode
2023-11-04 20:36:51,691 [screen.py:show_screensaver()] - Showing Screensaver
2023-11-04 21:04:56,266 [screen.py:close_screensaver()] - Closing Screensaver
2023-11-04 21:04:56,297 [screen.py:wake_screen()] - Screen wake up
2023-11-04 21:04:56,351 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-11-04 21:05:02,529 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-04 21:05:02,529 [printer.py:change_state()] - Adding callback for state: ready
2023-11-04 21:15:18,799 [print.py:_callback()] - newfiles: ['.thumbs/X1_PTFEGuide_BestOfBothWorlds_ABS_1h18m-300x300.png']
2023-11-04 21:15:18,800 [print.py:_callback()] - deletedfiles: []
2023-11-04 21:15:18,800 [print.py:_callback()] - updatefiles: []
2023-11-04 21:15:18,801 [print.py:_callback()] - newfiles: ['.thumbs/X1_PTFEGuide_BestOfBothWorlds_ABS_1h18m-300x300.png']
2023-11-04 21:15:18,802 [print.py:_callback()] - deletedfiles: []
2023-11-04 21:15:18,802 [print.py:_callback()] - updatefiles: []
2023-11-04 21:15:18,813 [print.py:_callback()] - newfiles: ['.thumbs/X1_PTFEGuide_BestOfBothWorlds_ABS_1h18m-32x32.png']
2023-11-04 21:15:18,814 [print.py:_callback()] - deletedfiles: []
2023-11-04 21:15:18,814 [print.py:_callback()] - updatefiles: []
2023-11-04 21:15:18,816 [print.py:_callback()] - newfiles: ['.thumbs/X1_PTFEGuide_BestOfBothWorlds_ABS_1h18m-32x32.png']
2023-11-04 21:15:18,816 [print.py:_callback()] - deletedfiles: []
2023-11-04 21:15:18,817 [print.py:_callback()] - updatefiles: []
2023-11-04 21:15:18,819 [files.py:_callback()] - Error in getting metadata for .thumbs/X1_PTFEGuide_BestOfBothWorlds_ABS_1h18m-300x300.png. Retrying in 6 seconds
2023-11-04 21:15:18,825 [files.py:_callback()] - Error in getting metadata for .thumbs/X1_PTFEGuide_BestOfBothWorlds_ABS_1h18m-32x32.png. Retrying in 6 seconds
2023-11-04 21:15:18,826 [print.py:_callback()] - newfiles: ['X1_PTFEGuide_BestOfBothWorlds_ABS_1h18m.gcode']
2023-11-04 21:15:18,855 [print.py:_callback()] - deletedfiles: []
2023-11-04 21:15:18,856 [print.py:_callback()] - updatefiles: []
2023-11-04 21:15:18,857 [print.py:_callback()] - newfiles: ['X1_PTFEGuide_BestOfBothWorlds_ABS_1h18m.gcode']
2023-11-04 21:15:18,860 [print.py:_callback()] - deletedfiles: []
2023-11-04 21:15:18,860 [print.py:_callback()] - updatefiles: []
2023-11-04 21:15:18,867 [print.py:_callback()] - newfiles: []
2023-11-04 21:15:18,868 [print.py:_callback()] - deletedfiles: []
2023-11-04 21:15:18,868 [print.py:_callback()] - updatefiles: ['X1_PTFEGuide_BestOfBothWorlds_ABS_1h18m.gcode']
2023-11-04 21:15:18,868 [print.py:update_file()] - Updating file X1_PTFEGuide_BestOfBothWorlds_ABS_1h18m.gcode
2023-11-04 21:15:18,870 [print.py:_callback()] - newfiles: []
2023-11-04 21:15:18,870 [print.py:_callback()] - deletedfiles: []
2023-11-04 21:15:18,871 [print.py:_callback()] - updatefiles: ['X1_PTFEGuide_BestOfBothWorlds_ABS_1h18m.gcode']
2023-11-04 21:15:18,871 [print.py:update_file()] - Updating file X1_PTFEGuide_BestOfBothWorlds_ABS_1h18m.gcode
2023-11-04 21:15:18,921 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-04 21:15:18,922 [printer.py:change_state()] - Adding callback for state: printing
2023-11-04 21:15:18,933 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2023-11-04 21:15:18,941 [job_status.py:update_file_metadata()] - Update Metadata. File: X1_PTFEGuide_BestOfBothWorlds_ABS_1h18m.gcode Size: 9699618
2023-11-04 21:15:18,950 [job_status.py:show_file_thumbnail()] - X1_PTFEGuide_BestOfBothWorlds_ABS_1h18m.gcode
2023-11-04 21:15:19,012 [screen.py:show_panel()] - Reinitializing panel
2023-11-04 21:15:19,242 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-04 21:15:19,257 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-04 21:15:19,275 [job_status.py:update_file_metadata()] - Update Metadata. File: X1_PTFEGuide_BestOfBothWorlds_ABS_1h18m.gcode Size: 9699618
2023-11-04 21:15:19,284 [job_status.py:show_file_thumbnail()] - X1_PTFEGuide_BestOfBothWorlds_ABS_1h18m.gcode
2023-11-04 21:16:42,429 [print.py:_callback()] - newfiles: ['front_left_z_motor_mount_ABS_5h6m.gcode']
2023-11-04 21:16:42,455 [print.py:_callback()] - deletedfiles: []
2023-11-04 21:16:42,456 [print.py:_callback()] - updatefiles: []
2023-11-04 21:16:42,456 [print.py:_callback()] - newfiles: ['front_left_z_motor_mount_ABS_5h6m.gcode']
2023-11-04 21:16:42,459 [print.py:_callback()] - deletedfiles: []
2023-11-04 21:16:42,459 [print.py:_callback()] - updatefiles: []
2023-11-04 21:16:42,469 [print.py:_callback()] - newfiles: ['.thumbs/front_left_z_motor_mount_ABS_5h6m-300x300.png']
2023-11-04 21:16:42,470 [print.py:_callback()] - deletedfiles: []
2023-11-04 21:16:42,470 [print.py:_callback()] - updatefiles: []
2023-11-04 21:16:42,471 [print.py:_callback()] - newfiles: ['.thumbs/front_left_z_motor_mount_ABS_5h6m-300x300.png']
2023-11-04 21:16:42,472 [print.py:_callback()] - deletedfiles: []
2023-11-04 21:16:42,473 [print.py:_callback()] - updatefiles: []
2023-11-04 21:16:42,473 [print.py:_callback()] - newfiles: ['.thumbs/front_left_z_motor_mount_ABS_5h6m-32x32.png']
2023-11-04 21:16:42,474 [print.py:_callback()] - deletedfiles: []
2023-11-04 21:16:42,475 [print.py:_callback()] - updatefiles: []
2023-11-04 21:16:42,475 [print.py:_callback()] - newfiles: ['.thumbs/front_left_z_motor_mount_ABS_5h6m-32x32.png']
2023-11-04 21:16:42,476 [print.py:_callback()] - deletedfiles: []
2023-11-04 21:16:42,476 [print.py:_callback()] - updatefiles: []
2023-11-04 21:16:42,478 [print.py:_callback()] - newfiles: []
2023-11-04 21:16:42,478 [print.py:_callback()] - deletedfiles: []
2023-11-04 21:16:42,478 [print.py:_callback()] - updatefiles: ['front_left_z_motor_mount_ABS_5h6m.gcode']
2023-11-04 21:16:42,479 [print.py:update_file()] - Updating file front_left_z_motor_mount_ABS_5h6m.gcode
2023-11-04 21:16:42,481 [print.py:_callback()] - newfiles: []
2023-11-04 21:16:42,482 [print.py:_callback()] - deletedfiles: []
2023-11-04 21:16:42,482 [print.py:_callback()] - updatefiles: ['front_left_z_motor_mount_ABS_5h6m.gcode']
2023-11-04 21:16:42,482 [print.py:update_file()] - Updating file front_left_z_motor_mount_ABS_5h6m.gcode
2023-11-04 21:16:42,485 [files.py:_callback()] - Error in getting metadata for .thumbs/front_left_z_motor_mount_ABS_5h6m-300x300.png. Retrying in 6 seconds
2023-11-04 21:16:42,491 [files.py:_callback()] - Error in getting metadata for .thumbs/front_left_z_motor_mount_ABS_5h6m-32x32.png. Retrying in 6 seconds
2023-11-04 22:04:56,688 [screen.py:show_screensaver()] - Showing Screensaver
2023-11-04 22:39:00,562 [screen.py:close_screensaver()] - Closing Screensaver
2023-11-04 22:39:00,590 [screen.py:wake_screen()] - Screen wake up
2023-11-04 22:39:00,644 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-11-04 22:39:05,816 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-04 22:39:05,816 [printer.py:change_state()] - Adding callback for state: ready
2023-11-04 23:39:00,687 [screen.py:show_screensaver()] - Showing Screensaver
2023-11-05 00:33:24,191 [screen.py:close_screensaver()] - Closing Screensaver
2023-11-05 00:33:24,226 [screen.py:wake_screen()] - Screen wake up
2023-11-05 00:33:28,439 [job_status.py:close_panel()] - Closing job_status panel
2023-11-05 00:33:28,446 [screen.py:show_panel()] - Reinitializing panel
2023-11-05 00:33:28,617 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-05 00:33:28,630 [main_menu.py:add_device()] - Adding device: extruder
2023-11-05 00:33:28,640 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-05 00:33:28,650 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-05 00:33:28,660 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-05 00:33:28,670 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-05 00:33:28,681 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-05 00:33:28,749 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-05 00:33:29,890 [screen.py:show_panel()] - Reinitializing panel
2023-11-05 00:33:29,900 [print.py:__init__()] - 24h time is True
2023-11-05 00:33:29,975 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2023-11-05 00:33:29,976 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-05 00:33:30,453 [print.py:_callback()] - newfiles: []
2023-11-05 00:33:30,454 [print.py:_callback()] - deletedfiles: ['.thumbs/Trident_Internal_Spool___PTFE_guide_x2_-32x32.png', '.thumbs/Trident_Internal_Spool___PTFE_guide_x2_-400x300.png', '.thumbs/Trident_Internal_Spool___PTFE_guide_x2__ABS_1h18m-300x300.png', '.thumbs/Trident_Internal_Spool___PTFE_guide_x2__ABS_1h18m-32x32.png', '.thumbs/X1_PTFEGuide_BestOfBothWorlds_ABS_1h18m-300x300.png', '.thumbs/X1_PTFEGuide_BestOfBothWorlds_ABS_1h18m-32x32.png', '.thumbs/front_left_z_motor_mount_ABS_5h6m-300x300.png', '.thumbs/front_left_z_motor_mount_ABS_5h6m-32x32.png']
2023-11-05 00:33:30,454 [print.py:_callback()] - updatefiles: []
2023-11-05 00:33:30,455 [print.py:_callback()] - newfiles: []
2023-11-05 00:33:30,456 [print.py:_callback()] - deletedfiles: ['.thumbs/Trident_Internal_Spool___PTFE_guide_x2_-32x32.png', '.thumbs/Trident_Internal_Spool___PTFE_guide_x2_-400x300.png', '.thumbs/Trident_Internal_Spool___PTFE_guide_x2__ABS_1h18m-300x300.png', '.thumbs/Trident_Internal_Spool___PTFE_guide_x2__ABS_1h18m-32x32.png', '.thumbs/X1_PTFEGuide_BestOfBothWorlds_ABS_1h18m-300x300.png', '.thumbs/X1_PTFEGuide_BestOfBothWorlds_ABS_1h18m-32x32.png', '.thumbs/front_left_z_motor_mount_ABS_5h6m-300x300.png', '.thumbs/front_left_z_motor_mount_ABS_5h6m-32x32.png']
2023-11-05 00:33:30,456 [print.py:_callback()] - updatefiles: []
2023-11-05 00:33:30,457 [print.py:_callback()] - newfiles: []
2023-11-05 00:33:30,457 [print.py:_callback()] - deletedfiles: ['.thumbs/Trident_Internal_Spool___PTFE_guide_x2_-32x32.png', '.thumbs/Trident_Internal_Spool___PTFE_guide_x2_-400x300.png', '.thumbs/Trident_Internal_Spool___PTFE_guide_x2__ABS_1h18m-300x300.png', '.thumbs/Trident_Internal_Spool___PTFE_guide_x2__ABS_1h18m-32x32.png', '.thumbs/X1_PTFEGuide_BestOfBothWorlds_ABS_1h18m-300x300.png', '.thumbs/X1_PTFEGuide_BestOfBothWorlds_ABS_1h18m-32x32.png', '.thumbs/front_left_z_motor_mount_ABS_5h6m-300x300.png', '.thumbs/front_left_z_motor_mount_ABS_5h6m-32x32.png']
2023-11-05 00:33:30,458 [print.py:_callback()] - updatefiles: []
2023-11-05 00:33:30,459 [print.py:_callback()] - newfiles: []
2023-11-05 00:33:30,459 [print.py:_callback()] - deletedfiles: ['.thumbs/Trident_Internal_Spool___PTFE_guide_x2_-32x32.png']
2023-11-05 00:33:30,460 [print.py:_callback()] - updatefiles: []
2023-11-05 00:33:30,460 [print.py:_callback()] - newfiles: []
2023-11-05 00:33:30,461 [print.py:_callback()] - deletedfiles: ['.thumbs/Trident_Internal_Spool___PTFE_guide_x2_-32x32.png']
2023-11-05 00:33:30,461 [print.py:_callback()] - updatefiles: []
2023-11-05 00:33:30,462 [print.py:_callback()] - newfiles: []
2023-11-05 00:33:30,462 [print.py:_callback()] - deletedfiles: ['.thumbs/Trident_Internal_Spool___PTFE_guide_x2_-32x32.png']
2023-11-05 00:33:30,462 [print.py:_callback()] - updatefiles: []
2023-11-05 00:33:30,463 [print.py:_callback()] - newfiles: []
2023-11-05 00:33:30,464 [print.py:_callback()] - deletedfiles: ['.thumbs/Trident_Internal_Spool___PTFE_guide_x2_-400x300.png']
2023-11-05 00:33:30,464 [print.py:_callback()] - updatefiles: []
2023-11-05 00:33:30,465 [print.py:_callback()] - newfiles: []
2023-11-05 00:33:30,465 [print.py:_callback()] - deletedfiles: ['.thumbs/Trident_Internal_Spool___PTFE_guide_x2_-400x300.png']
2023-11-05 00:33:30,465 [print.py:_callback()] - updatefiles: []
2023-11-05 00:33:30,466 [print.py:_callback()] - newfiles: []
2023-11-05 00:33:30,466 [print.py:_callback()] - deletedfiles: ['.thumbs/Trident_Internal_Spool___PTFE_guide_x2_-400x300.png']
2023-11-05 00:33:30,467 [print.py:_callback()] - updatefiles: []
2023-11-05 00:33:30,468 [print.py:_callback()] - newfiles: []
2023-11-05 00:33:30,468 [print.py:_callback()] - deletedfiles: ['.thumbs/Trident_Internal_Spool___PTFE_guide_x2__ABS_1h18m-300x300.png']
2023-11-05 00:33:30,468 [print.py:_callback()] - updatefiles: []
2023-11-05 00:33:30,469 [print.py:_callback()] - newfiles: []
2023-11-05 00:33:30,469 [print.py:_callback()] - deletedfiles: ['.thumbs/Trident_Internal_Spool___PTFE_guide_x2__ABS_1h18m-300x300.png']
2023-11-05 00:33:30,470 [print.py:_callback()] - updatefiles: []
2023-11-05 00:33:30,471 [print.py:_callback()] - newfiles: []
2023-11-05 00:33:30,471 [print.py:_callback()] - deletedfiles: ['.thumbs/Trident_Internal_Spool___PTFE_guide_x2__ABS_1h18m-300x300.png']
2023-11-05 00:33:30,471 [print.py:_callback()] - updatefiles: []
2023-11-05 00:33:30,472 [print.py:_callback()] - newfiles: []
2023-11-05 00:33:30,472 [print.py:_callback()] - deletedfiles: ['.thumbs/Trident_Internal_Spool___PTFE_guide_x2__ABS_1h18m-32x32.png']
2023-11-05 00:33:30,473 [print.py:_callback()] - updatefiles: []
2023-11-05 00:33:30,473 [print.py:_callback()] - newfiles: []
2023-11-05 00:33:30,474 [print.py:_callback()] - deletedfiles: ['.thumbs/Trident_Internal_Spool___PTFE_guide_x2__ABS_1h18m-32x32.png']
2023-11-05 00:33:30,474 [print.py:_callback()] - updatefiles: []
2023-11-05 00:33:30,475 [print.py:_callback()] - newfiles: []
2023-11-05 00:33:30,475 [print.py:_callback()] - deletedfiles: ['.thumbs/Trident_Internal_Spool___PTFE_guide_x2__ABS_1h18m-32x32.png']
2023-11-05 00:33:30,476 [print.py:_callback()] - updatefiles: []
2023-11-05 00:33:30,476 [print.py:_callback()] - newfiles: []
2023-11-05 00:33:30,477 [print.py:_callback()] - deletedfiles: ['.thumbs/X1_PTFEGuide_BestOfBothWorlds_ABS_1h18m-300x300.png']
2023-11-05 00:33:30,477 [print.py:_callback()] - updatefiles: []
2023-11-05 00:33:30,478 [print.py:_callback()] - newfiles: []
2023-11-05 00:33:30,478 [print.py:_callback()] - deletedfiles: ['.thumbs/X1_PTFEGuide_BestOfBothWorlds_ABS_1h18m-300x300.png']
2023-11-05 00:33:30,479 [print.py:_callback()] - updatefiles: []
2023-11-05 00:33:30,479 [print.py:_callback()] - newfiles: []
2023-11-05 00:33:30,480 [print.py:_callback()] - deletedfiles: ['.thumbs/X1_PTFEGuide_BestOfBothWorlds_ABS_1h18m-300x300.png']
2023-11-05 00:33:30,480 [print.py:_callback()] - updatefiles: []
2023-11-05 00:33:30,481 [print.py:_callback()] - newfiles: []
2023-11-05 00:33:30,481 [print.py:_callback()] - deletedfiles: ['.thumbs/X1_PTFEGuide_BestOfBothWorlds_ABS_1h18m-32x32.png']
2023-11-05 00:33:30,482 [print.py:_callback()] - updatefiles: []
2023-11-05 00:33:30,482 [print.py:_callback()] - newfiles: []
2023-11-05 00:33:30,483 [print.py:_callback()] - deletedfiles: ['.thumbs/X1_PTFEGuide_BestOfBothWorlds_ABS_1h18m-32x32.png']
2023-11-05 00:33:30,483 [print.py:_callback()] - updatefiles: []
2023-11-05 00:33:30,484 [print.py:_callback()] - newfiles: []
2023-11-05 00:33:30,484 [print.py:_callback()] - deletedfiles: ['.thumbs/X1_PTFEGuide_BestOfBothWorlds_ABS_1h18m-32x32.png']
2023-11-05 00:33:30,484 [print.py:_callback()] - updatefiles: []
2023-11-05 00:33:30,485 [print.py:_callback()] - newfiles: []
2023-11-05 00:33:30,486 [print.py:_callback()] - deletedfiles: ['.thumbs/front_left_z_motor_mount_ABS_5h6m-300x300.png']
2023-11-05 00:33:30,486 [print.py:_callback()] - updatefiles: []
2023-11-05 00:33:30,486 [print.py:_callback()] - newfiles: []
2023-11-05 00:33:30,487 [print.py:_callback()] - deletedfiles: ['.thumbs/front_left_z_motor_mount_ABS_5h6m-300x300.png']
2023-11-05 00:33:30,487 [print.py:_callback()] - updatefiles: []
2023-11-05 00:33:30,488 [print.py:_callback()] - newfiles: []
2023-11-05 00:33:30,489 [print.py:_callback()] - deletedfiles: ['.thumbs/front_left_z_motor_mount_ABS_5h6m-300x300.png']
2023-11-05 00:33:30,489 [print.py:_callback()] - updatefiles: []
2023-11-05 00:33:30,489 [print.py:_callback()] - newfiles: []
2023-11-05 00:33:30,490 [print.py:_callback()] - deletedfiles: ['.thumbs/front_left_z_motor_mount_ABS_5h6m-32x32.png']
2023-11-05 00:33:30,490 [print.py:_callback()] - updatefiles: []
2023-11-05 00:33:30,491 [print.py:_callback()] - newfiles: []
2023-11-05 00:33:30,492 [print.py:_callback()] - deletedfiles: ['.thumbs/front_left_z_motor_mount_ABS_5h6m-32x32.png']
2023-11-05 00:33:30,492 [print.py:_callback()] - updatefiles: []
2023-11-05 00:33:30,493 [print.py:_callback()] - newfiles: []
2023-11-05 00:33:30,493 [print.py:_callback()] - deletedfiles: ['.thumbs/front_left_z_motor_mount_ABS_5h6m-32x32.png']
2023-11-05 00:33:30,494 [print.py:_callback()] - updatefiles: []
2023-11-05 00:34:08,794 [KlippyGtk.py:Dialog()] - Showing dialog Print front_left_z_motor_mount_ABS_5h6m.gcode (width=800, height=480)
2023-11-05 00:34:11,233 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-05 00:34:11,234 [print.py:confirm_print_response()] - Starting print: front_left_z_motor_mount_ABS_5h6m.gcode
2023-11-05 00:34:11,234 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2023-11-05 00:34:11,503 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-05 00:34:11,504 [printer.py:change_state()] - Adding callback for state: printing
2023-11-05 00:34:11,523 [screen.py:show_panel()] - Reinitializing panel
2023-11-05 00:34:11,738 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-05 00:34:11,755 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-05 00:34:11,770 [job_status.py:update_file_metadata()] - Update Metadata. File: front_left_z_motor_mount_ABS_5h6m.gcode Size: 17074461
2023-11-05 00:34:11,779 [job_status.py:show_file_thumbnail()] - front_left_z_motor_mount_ABS_5h6m.gcode
2023-11-05 00:53:20,760 [screen.py:_go_to_submenu()] - #### Go to submenu 
2023-11-05 00:53:20,761 [screen.py:_go_to_submenu()] - #### Menu __print
2023-11-05 00:53:20,768 [screen.py:show_panel()] - Reinitializing panel
2023-11-05 00:53:21,096 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2023-11-05 00:53:21,122 [menu.py:arrangeMenuItems()] - X > move
2023-11-05 00:53:21,135 [menu.py:arrangeMenuItems()] - X > power
2023-11-05 00:53:21,142 [menu.py:arrangeMenuItems()] - X > led
2023-11-05 00:53:21,155 [menu.py:arrangeMenuItems()] - X > camera
2023-11-05 00:53:21,175 [menu.py:arrangeMenuItems()] - X > spoolman
2023-11-05 00:53:23,152 [screen.py:_menu_go_back()] - #### Menu go back
2023-11-05 00:53:23,206 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-05 00:53:23,226 [job_status.py:update_file_metadata()] - Update Metadata. File: front_left_z_motor_mount_ABS_5h6m.gcode Size: 17074461
2023-11-05 00:53:23,236 [job_status.py:show_file_thumbnail()] - front_left_z_motor_mount_ABS_5h6m.gcode
2023-11-05 00:53:26,816 [screen.py:_go_to_submenu()] - #### Go to submenu 
2023-11-05 00:53:26,817 [screen.py:_go_to_submenu()] - #### Menu __print
2023-11-05 00:53:26,872 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2023-11-05 00:53:26,898 [menu.py:arrangeMenuItems()] - X > move
2023-11-05 00:53:26,909 [menu.py:arrangeMenuItems()] - X > power
2023-11-05 00:53:26,916 [menu.py:arrangeMenuItems()] - X > led
2023-11-05 00:53:26,930 [menu.py:arrangeMenuItems()] - X > camera
2023-11-05 00:53:26,950 [menu.py:arrangeMenuItems()] - X > spoolman
2023-11-05 00:53:34,720 [screen.py:_menu_go_back()] - #### Menu go back
2023-11-05 00:53:34,779 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-05 00:53:34,799 [job_status.py:update_file_metadata()] - Update Metadata. File: front_left_z_motor_mount_ABS_5h6m.gcode Size: 17074461
2023-11-05 00:53:34,808 [job_status.py:show_file_thumbnail()] - front_left_z_motor_mount_ABS_5h6m.gcode
2023-11-05 00:53:36,080 [KlippyGtk.py:Dialog()] - Showing dialog front_left_z_motor_mount_ABS_5h6m.gcode (width=800, height=480)
2023-11-05 00:53:38,403 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-05 00:53:56,824 [screen.py:_go_to_submenu()] - #### Go to submenu 
2023-11-05 00:53:56,825 [screen.py:_go_to_submenu()] - #### Menu __print
2023-11-05 00:53:56,880 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2023-11-05 00:53:56,905 [menu.py:arrangeMenuItems()] - X > move
2023-11-05 00:53:56,916 [menu.py:arrangeMenuItems()] - X > power
2023-11-05 00:53:56,922 [menu.py:arrangeMenuItems()] - X > led
2023-11-05 00:53:56,934 [menu.py:arrangeMenuItems()] - X > camera
2023-11-05 00:53:56,955 [menu.py:arrangeMenuItems()] - X > spoolman
2023-11-05 00:54:01,338 [screen.py:show_panel()] - Reinitializing panel
2023-11-05 00:54:01,428 [screen.py:attach_panel()] - Current panel hierarchy: job_status >  > gcode_macros
2023-11-05 00:54:04,841 [screen_panel.py:load_menu()] - loading menu options
2023-11-05 00:54:09,048 [screen_panel.py:unload_menu()] - self.menu: ['macros_menu', 'options_menu']
2023-11-05 00:54:16,472 [screen.py:_menu_go_back()] - #### Menu go back
2023-11-05 00:54:16,532 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2023-11-05 00:54:16,557 [menu.py:arrangeMenuItems()] - X > move
2023-11-05 00:54:16,568 [menu.py:arrangeMenuItems()] - X > power
2023-11-05 00:54:16,574 [menu.py:arrangeMenuItems()] - X > led
2023-11-05 00:54:16,586 [menu.py:arrangeMenuItems()] - X > camera
2023-11-05 00:54:16,610 [menu.py:arrangeMenuItems()] - X > spoolman
2023-11-05 00:54:24,628 [screen.py:_load_panel()] - Loading panel: settings
2023-11-05 00:54:24,990 [screen.py:attach_panel()] - Current panel hierarchy: job_status >  > settings
2023-11-05 00:54:32,060 [screen.py:_menu_go_back()] - #### Menu go back
2023-11-05 00:54:32,150 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2023-11-05 00:54:32,190 [menu.py:arrangeMenuItems()] - X > move
2023-11-05 00:54:32,208 [menu.py:arrangeMenuItems()] - X > power
2023-11-05 00:54:32,217 [menu.py:arrangeMenuItems()] - X > led
2023-11-05 00:54:32,235 [menu.py:arrangeMenuItems()] - X > camera
2023-11-05 00:54:32,263 [menu.py:arrangeMenuItems()] - X > spoolman
2023-11-05 01:01:09,642 [screen.py:_menu_go_back()] - #### Menu go back
2023-11-05 01:01:09,697 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-05 01:01:09,717 [job_status.py:update_file_metadata()] - Update Metadata. File: front_left_z_motor_mount_ABS_5h6m.gcode Size: 17074461
2023-11-05 01:01:09,727 [job_status.py:show_file_thumbnail()] - front_left_z_motor_mount_ABS_5h6m.gcode
2023-11-05 02:01:09,687 [screen.py:show_screensaver()] - Showing Screensaver
2023-11-05 03:20:48,652 [screen.py:close_screensaver()] - Closing Screensaver
2023-11-05 03:20:48,684 [screen.py:wake_screen()] - Screen wake up
2023-11-05 03:20:48,737 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-11-05 03:20:54,405 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-05 03:20:54,406 [printer.py:change_state()] - Adding callback for state: ready
2023-11-05 04:20:49,688 [screen.py:show_screensaver()] - Showing Screensaver
2023-11-05 09:54:51,835 [print.py:_callback()] - newfiles: ['.thumbs/3x3in-calibration-test-v3_ABS_18m40s-300x300.png']
2023-11-05 09:54:51,836 [print.py:_callback()] - deletedfiles: []
2023-11-05 09:54:51,836 [print.py:_callback()] - updatefiles: []
2023-11-05 09:54:51,837 [print.py:_callback()] - newfiles: ['.thumbs/3x3in-calibration-test-v3_ABS_18m40s-300x300.png']
2023-11-05 09:54:51,837 [print.py:_callback()] - deletedfiles: []
2023-11-05 09:54:51,838 [print.py:_callback()] - updatefiles: []
2023-11-05 09:54:51,839 [print.py:_callback()] - newfiles: ['.thumbs/3x3in-calibration-test-v3_ABS_18m40s-300x300.png']
2023-11-05 09:54:51,840 [print.py:_callback()] - deletedfiles: []
2023-11-05 09:54:51,840 [print.py:_callback()] - updatefiles: []
2023-11-05 09:54:51,849 [print.py:_callback()] - newfiles: ['.thumbs/3x3in-calibration-test-v3_ABS_18m40s-32x32.png']
2023-11-05 09:54:51,850 [print.py:_callback()] - deletedfiles: []
2023-11-05 09:54:51,850 [print.py:_callback()] - updatefiles: []
2023-11-05 09:54:51,852 [print.py:_callback()] - newfiles: ['.thumbs/3x3in-calibration-test-v3_ABS_18m40s-32x32.png']
2023-11-05 09:54:51,852 [print.py:_callback()] - deletedfiles: []
2023-11-05 09:54:51,853 [print.py:_callback()] - updatefiles: []
2023-11-05 09:54:51,854 [print.py:_callback()] - newfiles: ['.thumbs/3x3in-calibration-test-v3_ABS_18m40s-32x32.png']
2023-11-05 09:54:51,854 [print.py:_callback()] - deletedfiles: []
2023-11-05 09:54:51,855 [print.py:_callback()] - updatefiles: []
2023-11-05 09:54:51,857 [files.py:_callback()] - Error in getting metadata for .thumbs/3x3in-calibration-test-v3_ABS_18m40s-300x300.png. Retrying in 6 seconds
2023-11-05 09:54:51,865 [print.py:_callback()] - newfiles: ['3x3in-calibration-test-v3_ABS_18m40s.gcode']
2023-11-05 09:54:51,895 [print.py:_callback()] - deletedfiles: []
2023-11-05 09:54:51,895 [print.py:_callback()] - updatefiles: []
2023-11-05 09:54:51,896 [print.py:_callback()] - newfiles: ['3x3in-calibration-test-v3_ABS_18m40s.gcode']
2023-11-05 09:54:51,898 [print.py:_callback()] - deletedfiles: []
2023-11-05 09:54:51,899 [print.py:_callback()] - updatefiles: []
2023-11-05 09:54:51,899 [files.py:_callback()] - Error in getting metadata for .thumbs/3x3in-calibration-test-v3_ABS_18m40s-32x32.png. Retrying in 6 seconds
2023-11-05 09:54:51,900 [print.py:_callback()] - newfiles: ['3x3in-calibration-test-v3_ABS_18m40s.gcode']
2023-11-05 09:54:51,903 [print.py:_callback()] - deletedfiles: []
2023-11-05 09:54:51,903 [print.py:_callback()] - updatefiles: []
2023-11-05 09:54:51,911 [print.py:_callback()] - newfiles: []
2023-11-05 09:54:51,912 [print.py:_callback()] - deletedfiles: []
2023-11-05 09:54:51,912 [print.py:_callback()] - updatefiles: ['3x3in-calibration-test-v3_ABS_18m40s.gcode']
2023-11-05 09:54:51,912 [print.py:update_file()] - Updating file 3x3in-calibration-test-v3_ABS_18m40s.gcode
2023-11-05 09:54:51,914 [print.py:_callback()] - newfiles: []
2023-11-05 09:54:51,915 [print.py:_callback()] - deletedfiles: []
2023-11-05 09:54:51,915 [print.py:_callback()] - updatefiles: ['3x3in-calibration-test-v3_ABS_18m40s.gcode']
2023-11-05 09:54:51,915 [print.py:update_file()] - Updating file 3x3in-calibration-test-v3_ABS_18m40s.gcode
2023-11-05 09:54:51,917 [print.py:_callback()] - newfiles: []
2023-11-05 09:54:51,917 [print.py:_callback()] - deletedfiles: []
2023-11-05 09:54:51,918 [print.py:_callback()] - updatefiles: ['3x3in-calibration-test-v3_ABS_18m40s.gcode']
2023-11-05 09:54:51,918 [print.py:update_file()] - Updating file 3x3in-calibration-test-v3_ABS_18m40s.gcode
2023-11-05 09:54:52,001 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-05 09:54:52,001 [printer.py:change_state()] - Adding callback for state: printing
2023-11-05 09:54:52,011 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2023-11-05 09:54:52,014 [job_status.py:update_file_metadata()] - Update Metadata. File: 3x3in-calibration-test-v3_ABS_18m40s.gcode Size: 95136
2023-11-05 09:54:52,024 [job_status.py:show_file_thumbnail()] - 3x3in-calibration-test-v3_ABS_18m40s.gcode
2023-11-05 09:54:52,030 [screen.py:close_screensaver()] - Closing Screensaver
2023-11-05 09:54:52,052 [screen.py:wake_screen()] - Screen wake up
2023-11-05 09:54:52,110 [screen.py:show_panel()] - Reinitializing panel
2023-11-05 09:54:52,331 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-05 09:54:52,346 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-05 09:54:52,367 [job_status.py:update_file_metadata()] - Update Metadata. File: 3x3in-calibration-test-v3_ABS_18m40s.gcode Size: 95136
2023-11-05 09:54:52,375 [job_status.py:show_file_thumbnail()] - 3x3in-calibration-test-v3_ABS_18m40s.gcode
2023-11-05 10:09:19,202 [screen.py:show_panel()] - Reinitializing panel
2023-11-05 10:09:19,332 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2023-11-05 10:12:47,135 [fine_tune.py:change_percent_delta()] - ### Delta 0.05
2023-11-05 10:12:50,778 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2023-11-05 10:15:17,700 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2023-11-05 10:15:20,591 [fine_tune.py:change_percent_delta()] - ### Delta 0.01
2023-11-05 10:15:22,305 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-11-05 10:15:23,337 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-11-05 10:15:29,305 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2023-11-05 10:15:29,889 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2023-11-05 10:15:31,682 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2023-11-05 10:19:08,761 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.01 MOVE=1'}
2023-11-05 10:27:15,064 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-05 10:27:15,065 [printer.py:change_state()] - Adding callback for state: ready
2023-11-05 10:36:49,435 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1'}
2023-11-05 10:55:01,977 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffff9c5dec40 (GtkDialog at 0xe804590)>
2023-11-05 10:55:02,008 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2023-11-05 10:55:05,497 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-05 10:55:05,498 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-05 10:55:05,500 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-05 10:55:05,506 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-05 10:55:05,507 [screen.py:show_panel()] - Reinitializing panel
2023-11-05 10:55:05,578 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-05 10:55:08,710 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-05 10:55:08,728 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-05 10:55:08,730 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-05 10:55:08,746 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-05 10:55:08,748 [printer.py:configure_cameras()] - Cameras: []
2023-11-05 10:55:08,768 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-05 10:55:08,802 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-05 10:55:08,806 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'max_extrude_cross_section': '5', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'firmware_retraction': {'retract_length': '2', 'retract_speed': '10', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.310'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n0.002500, 0.009375, 0.021250, -0.023750, -0.048125\n-0.006250, -0.013125, -0.060625, -0.024375, -0.038125\n-0.049375, -0.081250, -0.078750, -0.080000, -0.091875', 'x_count': '5', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '306.56', 'min_y': '29.700000000000003', 'max_y': '110.08'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'firmware_retraction': {'retract_length': 2.0, 'retract_speed': 10.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.0025, 0.009375, 0.02125, -0.02375, -0.048125], [-0.00625, -0.013125, -0.060625, -0.024375, -0.038125], [-0.049375, -0.08125, -0.07875, -0.08, -0.091875]], 'min_x': 35.0, 'max_x': 306.56, 'min_y': 29.700000000000003, 'max_y': 110.08, 'x_count': 5, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.31, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-05 10:55:08,814 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-11-05 10:55:08,814 [printer.py:reinit()] - # Extruders: 1
2023-11-05 10:55:08,815 [printer.py:reinit()] - # Temperature devices: 5
2023-11-05 10:55:08,815 [printer.py:reinit()] - # Fans: 2
2023-11-05 10:55:08,815 [printer.py:reinit()] - # Output pins: 1
2023-11-05 10:55:08,815 [printer.py:reinit()] - # Leds: 0
2023-11-05 10:55:08,841 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-05 10:55:08,844 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-05 10:55:09,127 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-11-05 10:55:09,188 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-05 10:55:09,199 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-11-05 10:55:09,224 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-05 10:55:09,226 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-05 10:55:09,227 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-11-05 10:55:09,228 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-05 10:55:09,229 [screen.py:init_printer()] - Printer initialized
2023-11-05 10:55:09,230 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-11-05 10:55:09,231 [printer.py:change_state()] - Adding callback for state: startup
2023-11-05 10:55:09,296 [print.py:_callback()] - newfiles: []
2023-11-05 10:55:09,297 [print.py:_callback()] - deletedfiles: ['.thumbs/3x3in-calibration-test-v3_ABS_18m40s-300x300.png', '.thumbs/3x3in-calibration-test-v3_ABS_18m40s-32x32.png']
2023-11-05 10:55:09,297 [print.py:_callback()] - updatefiles: []
2023-11-05 10:55:09,298 [print.py:_callback()] - newfiles: []
2023-11-05 10:55:09,298 [print.py:_callback()] - deletedfiles: ['.thumbs/3x3in-calibration-test-v3_ABS_18m40s-300x300.png', '.thumbs/3x3in-calibration-test-v3_ABS_18m40s-32x32.png']
2023-11-05 10:55:09,299 [print.py:_callback()] - updatefiles: []
2023-11-05 10:55:09,299 [print.py:_callback()] - newfiles: []
2023-11-05 10:55:09,300 [print.py:_callback()] - deletedfiles: ['.thumbs/3x3in-calibration-test-v3_ABS_18m40s-300x300.png', '.thumbs/3x3in-calibration-test-v3_ABS_18m40s-32x32.png']
2023-11-05 10:55:09,300 [print.py:_callback()] - updatefiles: []
2023-11-05 10:55:09,301 [print.py:_callback()] - newfiles: []
2023-11-05 10:55:09,301 [print.py:_callback()] - deletedfiles: ['.thumbs/3x3in-calibration-test-v3_ABS_18m40s-300x300.png']
2023-11-05 10:55:09,302 [print.py:_callback()] - updatefiles: []
2023-11-05 10:55:09,306 [print.py:_callback()] - newfiles: []
2023-11-05 10:55:09,306 [print.py:_callback()] - deletedfiles: ['.thumbs/3x3in-calibration-test-v3_ABS_18m40s-300x300.png']
2023-11-05 10:55:09,307 [print.py:_callback()] - updatefiles: []
2023-11-05 10:55:09,307 [print.py:_callback()] - newfiles: []
2023-11-05 10:55:09,308 [print.py:_callback()] - deletedfiles: ['.thumbs/3x3in-calibration-test-v3_ABS_18m40s-300x300.png']
2023-11-05 10:55:09,308 [print.py:_callback()] - updatefiles: []
2023-11-05 10:55:09,309 [print.py:_callback()] - newfiles: []
2023-11-05 10:55:09,309 [print.py:_callback()] - deletedfiles: ['.thumbs/3x3in-calibration-test-v3_ABS_18m40s-32x32.png']
2023-11-05 10:55:09,310 [print.py:_callback()] - updatefiles: []
2023-11-05 10:55:09,310 [print.py:_callback()] - newfiles: []
2023-11-05 10:55:09,311 [print.py:_callback()] - deletedfiles: ['.thumbs/3x3in-calibration-test-v3_ABS_18m40s-32x32.png']
2023-11-05 10:55:09,311 [print.py:_callback()] - updatefiles: []
2023-11-05 10:55:09,312 [print.py:_callback()] - newfiles: []
2023-11-05 10:55:09,312 [print.py:_callback()] - deletedfiles: ['.thumbs/3x3in-calibration-test-v3_ABS_18m40s-32x32.png']
2023-11-05 10:55:09,312 [print.py:_callback()] - updatefiles: []
2023-11-05 10:55:10,292 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-11-05 10:55:10,293 [printer.py:change_state()] - Adding callback for state: ready
2023-11-05 10:55:10,299 [screen.py:show_panel()] - Reinitializing panel
2023-11-05 10:55:10,417 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-05 10:55:10,431 [main_menu.py:add_device()] - Adding device: extruder
2023-11-05 10:55:10,441 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-05 10:55:10,452 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-05 10:55:10,462 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-05 10:55:10,473 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-05 10:55:10,483 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-05 10:55:10,557 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-05 10:58:52,361 [print.py:_callback()] - newfiles: ['.thumbs/Body1_ABS_1h14m-350x350.png']
2023-11-05 10:58:52,362 [print.py:_callback()] - deletedfiles: []
2023-11-05 10:58:52,363 [print.py:_callback()] - updatefiles: []
2023-11-05 10:58:52,364 [print.py:_callback()] - newfiles: ['.thumbs/Body1_ABS_1h14m-350x350.png']
2023-11-05 10:58:52,365 [print.py:_callback()] - deletedfiles: []
2023-11-05 10:58:52,365 [print.py:_callback()] - updatefiles: []
2023-11-05 10:58:52,367 [print.py:_callback()] - newfiles: ['.thumbs/Body1_ABS_1h14m-350x350.png']
2023-11-05 10:58:52,368 [print.py:_callback()] - deletedfiles: []
2023-11-05 10:58:52,369 [print.py:_callback()] - updatefiles: []
2023-11-05 10:58:52,378 [print.py:_callback()] - newfiles: ['.thumbs/Body1_ABS_1h14m-32x32.png']
2023-11-05 10:58:52,379 [print.py:_callback()] - deletedfiles: []
2023-11-05 10:58:52,380 [print.py:_callback()] - updatefiles: []
2023-11-05 10:58:52,380 [files.py:_callback()] - Error in getting metadata for .thumbs/Body1_ABS_1h14m-350x350.png. Retrying in 6 seconds
2023-11-05 10:58:52,383 [print.py:_callback()] - newfiles: ['.thumbs/Body1_ABS_1h14m-32x32.png']
2023-11-05 10:58:52,383 [print.py:_callback()] - deletedfiles: []
2023-11-05 10:58:52,384 [print.py:_callback()] - updatefiles: []
2023-11-05 10:58:52,384 [print.py:_callback()] - newfiles: ['.thumbs/Body1_ABS_1h14m-32x32.png']
2023-11-05 10:58:52,385 [print.py:_callback()] - deletedfiles: []
2023-11-05 10:58:52,385 [print.py:_callback()] - updatefiles: []
2023-11-05 10:58:52,391 [print.py:_callback()] - newfiles: ['Body1_ABS_1h14m.gcode']
2023-11-05 10:58:52,423 [print.py:_callback()] - deletedfiles: []
2023-11-05 10:58:52,423 [print.py:_callback()] - updatefiles: []
2023-11-05 10:58:52,424 [print.py:_callback()] - newfiles: ['Body1_ABS_1h14m.gcode']
2023-11-05 10:58:52,427 [print.py:_callback()] - deletedfiles: []
2023-11-05 10:58:52,427 [print.py:_callback()] - updatefiles: []
2023-11-05 10:58:52,428 [files.py:_callback()] - Error in getting metadata for .thumbs/Body1_ABS_1h14m-32x32.png. Retrying in 6 seconds
2023-11-05 10:58:52,429 [print.py:_callback()] - newfiles: ['Body1_ABS_1h14m.gcode']
2023-11-05 10:58:52,432 [print.py:_callback()] - deletedfiles: []
2023-11-05 10:58:52,432 [print.py:_callback()] - updatefiles: []
2023-11-05 10:58:52,440 [print.py:_callback()] - newfiles: []
2023-11-05 10:58:52,440 [print.py:_callback()] - deletedfiles: []
2023-11-05 10:58:52,441 [print.py:_callback()] - updatefiles: ['Body1_ABS_1h14m.gcode']
2023-11-05 10:58:52,441 [print.py:update_file()] - Updating file Body1_ABS_1h14m.gcode
2023-11-05 10:58:52,448 [print.py:_callback()] - newfiles: []
2023-11-05 10:58:52,449 [print.py:_callback()] - deletedfiles: []
2023-11-05 10:58:52,449 [print.py:_callback()] - updatefiles: ['Body1_ABS_1h14m.gcode']
2023-11-05 10:58:52,450 [print.py:update_file()] - Updating file Body1_ABS_1h14m.gcode
2023-11-05 10:58:52,453 [print.py:_callback()] - newfiles: []
2023-11-05 10:58:52,453 [print.py:_callback()] - deletedfiles: []
2023-11-05 10:58:52,454 [print.py:_callback()] - updatefiles: ['Body1_ABS_1h14m.gcode']
2023-11-05 10:58:52,454 [print.py:update_file()] - Updating file Body1_ABS_1h14m.gcode
2023-11-05 10:58:52,459 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-05 10:58:52,460 [printer.py:change_state()] - Adding callback for state: printing
2023-11-05 10:58:52,488 [screen.py:show_panel()] - Reinitializing panel
2023-11-05 10:58:52,704 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-05 10:58:52,715 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-05 10:58:52,730 [job_status.py:update_file_metadata()] - Update Metadata. File: Body1_ABS_1h14m.gcode Size: 1602958
2023-11-05 10:58:52,740 [job_status.py:show_file_thumbnail()] - Body1_ABS_1h14m.gcode
2023-11-05 10:59:30,603 [screen.py:show_panel()] - Reinitializing panel
2023-11-05 10:59:30,731 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2023-11-05 10:59:33,306 [screen.py:_menu_go_back()] - #### Menu go back
2023-11-05 10:59:33,409 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-05 10:59:33,430 [job_status.py:update_file_metadata()] - Update Metadata. File: Body1_ABS_1h14m.gcode Size: 1602958
2023-11-05 10:59:33,440 [job_status.py:show_file_thumbnail()] - Body1_ABS_1h14m.gcode
2023-11-05 11:33:37,720 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-11-05 11:33:44,219 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-05 11:33:44,220 [printer.py:change_state()] - Adding callback for state: ready
2023-11-05 11:35:08,072 [print.py:_callback()] - newfiles: ['.thumbs/Body1_ABS_1h3m-350x350.png']
2023-11-05 11:35:08,072 [print.py:_callback()] - deletedfiles: []
2023-11-05 11:35:08,073 [print.py:_callback()] - updatefiles: []
2023-11-05 11:35:08,074 [print.py:_callback()] - newfiles: ['.thumbs/Body1_ABS_1h3m-350x350.png']
2023-11-05 11:35:08,075 [print.py:_callback()] - deletedfiles: []
2023-11-05 11:35:08,075 [print.py:_callback()] - updatefiles: []
2023-11-05 11:35:08,076 [print.py:_callback()] - newfiles: ['.thumbs/Body1_ABS_1h3m-350x350.png']
2023-11-05 11:35:08,077 [print.py:_callback()] - deletedfiles: []
2023-11-05 11:35:08,078 [print.py:_callback()] - updatefiles: []
2023-11-05 11:35:08,086 [print.py:_callback()] - newfiles: ['.thumbs/Body1_ABS_1h3m-32x32.png']
2023-11-05 11:35:08,086 [print.py:_callback()] - deletedfiles: []
2023-11-05 11:35:08,087 [print.py:_callback()] - updatefiles: []
2023-11-05 11:35:08,087 [print.py:_callback()] - newfiles: ['.thumbs/Body1_ABS_1h3m-32x32.png']
2023-11-05 11:35:08,088 [print.py:_callback()] - deletedfiles: []
2023-11-05 11:35:08,089 [print.py:_callback()] - updatefiles: []
2023-11-05 11:35:08,091 [print.py:_callback()] - newfiles: ['.thumbs/Body1_ABS_1h3m-32x32.png']
2023-11-05 11:35:08,091 [print.py:_callback()] - deletedfiles: []
2023-11-05 11:35:08,092 [print.py:_callback()] - updatefiles: []
2023-11-05 11:35:08,093 [files.py:_callback()] - Error in getting metadata for .thumbs/Body1_ABS_1h3m-350x350.png. Retrying in 6 seconds
2023-11-05 11:35:08,105 [print.py:_callback()] - newfiles: ['Body1_ABS_1h3m.gcode']
2023-11-05 11:35:08,134 [print.py:_callback()] - deletedfiles: []
2023-11-05 11:35:08,134 [print.py:_callback()] - updatefiles: []
2023-11-05 11:35:08,135 [print.py:_callback()] - newfiles: ['Body1_ABS_1h3m.gcode']
2023-11-05 11:35:08,138 [print.py:_callback()] - deletedfiles: []
2023-11-05 11:35:08,138 [print.py:_callback()] - updatefiles: []
2023-11-05 11:35:08,139 [files.py:_callback()] - Error in getting metadata for .thumbs/Body1_ABS_1h3m-32x32.png. Retrying in 6 seconds
2023-11-05 11:35:08,140 [print.py:_callback()] - newfiles: ['Body1_ABS_1h3m.gcode']
2023-11-05 11:35:08,142 [print.py:_callback()] - deletedfiles: []
2023-11-05 11:35:08,143 [print.py:_callback()] - updatefiles: []
2023-11-05 11:35:08,149 [print.py:_callback()] - newfiles: []
2023-11-05 11:35:08,149 [print.py:_callback()] - deletedfiles: []
2023-11-05 11:35:08,150 [print.py:_callback()] - updatefiles: ['Body1_ABS_1h3m.gcode']
2023-11-05 11:35:08,150 [print.py:update_file()] - Updating file Body1_ABS_1h3m.gcode
2023-11-05 11:35:08,152 [print.py:_callback()] - newfiles: []
2023-11-05 11:35:08,152 [print.py:_callback()] - deletedfiles: []
2023-11-05 11:35:08,152 [print.py:_callback()] - updatefiles: ['Body1_ABS_1h3m.gcode']
2023-11-05 11:35:08,153 [print.py:update_file()] - Updating file Body1_ABS_1h3m.gcode
2023-11-05 11:35:08,154 [print.py:_callback()] - newfiles: []
2023-11-05 11:35:08,155 [print.py:_callback()] - deletedfiles: []
2023-11-05 11:35:08,155 [print.py:_callback()] - updatefiles: ['Body1_ABS_1h3m.gcode']
2023-11-05 11:35:08,155 [print.py:update_file()] - Updating file Body1_ABS_1h3m.gcode
2023-11-05 11:35:08,211 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-05 11:35:08,211 [printer.py:change_state()] - Adding callback for state: printing
2023-11-05 11:35:08,228 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2023-11-05 11:35:08,236 [job_status.py:update_file_metadata()] - Update Metadata. File: Body1_ABS_1h3m.gcode Size: 2047917
2023-11-05 11:35:08,246 [job_status.py:show_file_thumbnail()] - Body1_ABS_1h3m.gcode
2023-11-05 11:35:08,294 [screen.py:show_panel()] - Reinitializing panel
2023-11-05 11:35:08,522 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-05 11:35:08,532 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-05 11:35:08,547 [job_status.py:update_file_metadata()] - Update Metadata. File: Body1_ABS_1h3m.gcode Size: 2047917
2023-11-05 11:35:08,556 [job_status.py:show_file_thumbnail()] - Body1_ABS_1h3m.gcode
2023-11-05 11:44:05,877 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2023-11-05 11:44:06,463 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-05 11:44:06,463 [job_status.py:cancel_confirm()] - Canceling print
2023-11-05 11:44:06,464 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-11-05 11:44:06,471 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-11-05 11:44:06,774 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-11-05 11:44:11,771 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-05 11:44:11,772 [printer.py:change_state()] - Adding callback for state: ready
2023-11-05 11:44:13,424 [job_status.py:close_panel()] - Closing job_status panel
2023-11-05 11:44:13,433 [screen.py:show_panel()] - Reinitializing panel
2023-11-05 11:44:13,607 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-05 11:44:13,621 [main_menu.py:add_device()] - Adding device: extruder
2023-11-05 11:44:13,631 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-05 11:44:13,641 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-05 11:44:13,651 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-05 11:44:13,661 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-05 11:44:13,672 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-05 11:44:13,740 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-05 11:44:14,663 [screen.py:show_panel()] - Reinitializing panel
2023-11-05 11:44:14,822 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-11-05 11:44:16,188 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-11-05 11:44:16,194 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-11-05 11:44:45,887 [screen.py:_load_panel()] - Loading panel: menu
2023-11-05 11:44:46,086 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2023-11-05 11:44:46,110 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2023-11-05 11:44:48,382 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2023-11-05 11:50:21,623 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2023-11-05 11:50:21,624 [printer.py:change_state()] - Adding callback for state: shutdown
2023-11-05 11:50:21,637 [screen.py:show_panel()] - Reinitializing panel
2023-11-05 11:50:21,714 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-05 11:50:23,476 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2023-11-05 11:50:23,476 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-05 11:50:23,478 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-05 11:50:23,481 [screen.py:show_panel()] - Reinitializing panel
2023-11-05 11:50:23,549 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-05 11:50:26,704 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-05 11:50:26,722 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-05 11:50:26,724 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-05 11:50:26,741 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-05 11:50:26,743 [printer.py:configure_cameras()] - Cameras: []
2023-11-05 11:50:26,763 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-05 11:50:26,797 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-05 11:50:26,801 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'max_extrude_cross_section': '5', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'firmware_retraction': {'retract_length': '2', 'retract_speed': '10', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.310'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n0.002500, 0.009375, 0.021250, -0.023750, -0.048125\n-0.006250, -0.013125, -0.060625, -0.024375, -0.038125\n-0.049375, -0.081250, -0.078750, -0.080000, -0.091875', 'x_count': '5', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '306.56', 'min_y': '29.700000000000003', 'max_y': '110.08'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'firmware_retraction': {'retract_length': 2.0, 'retract_speed': 10.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.0025, 0.009375, 0.02125, -0.02375, -0.048125], [-0.00625, -0.013125, -0.060625, -0.024375, -0.038125], [-0.049375, -0.08125, -0.07875, -0.08, -0.091875]], 'min_x': 35.0, 'max_x': 306.56, 'min_y': 29.700000000000003, 'max_y': 110.08, 'x_count': 5, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.31, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-05 11:50:26,809 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-11-05 11:50:26,809 [printer.py:reinit()] - # Extruders: 1
2023-11-05 11:50:26,810 [printer.py:reinit()] - # Temperature devices: 5
2023-11-05 11:50:26,810 [printer.py:reinit()] - # Fans: 2
2023-11-05 11:50:26,810 [printer.py:reinit()] - # Output pins: 1
2023-11-05 11:50:26,810 [printer.py:reinit()] - # Leds: 0
2023-11-05 11:50:26,833 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-05 11:50:26,836 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-05 11:50:27,118 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-11-05 11:50:27,178 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-05 11:50:27,193 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-11-05 11:50:27,219 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-05 11:50:27,221 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-05 11:50:27,222 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-11-05 11:50:27,223 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-05 11:50:27,224 [screen.py:init_printer()] - Printer initialized
2023-11-05 11:50:27,225 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-11-05 11:50:27,226 [printer.py:change_state()] - Adding callback for state: startup
2023-11-05 11:50:27,285 [print.py:_callback()] - newfiles: []
2023-11-05 11:50:27,286 [print.py:_callback()] - deletedfiles: ['.thumbs/Body1_ABS_1h14m-350x350.png', '.thumbs/Body1_ABS_1h14m-32x32.png', '.thumbs/Body1_ABS_1h3m-350x350.png', '.thumbs/Body1_ABS_1h3m-32x32.png']
2023-11-05 11:50:27,286 [print.py:_callback()] - updatefiles: []
2023-11-05 11:50:27,287 [print.py:_callback()] - newfiles: []
2023-11-05 11:50:27,287 [print.py:_callback()] - deletedfiles: ['.thumbs/Body1_ABS_1h14m-350x350.png', '.thumbs/Body1_ABS_1h14m-32x32.png', '.thumbs/Body1_ABS_1h3m-350x350.png', '.thumbs/Body1_ABS_1h3m-32x32.png']
2023-11-05 11:50:27,288 [print.py:_callback()] - updatefiles: []
2023-11-05 11:50:27,288 [print.py:_callback()] - newfiles: []
2023-11-05 11:50:27,289 [print.py:_callback()] - deletedfiles: ['.thumbs/Body1_ABS_1h14m-350x350.png', '.thumbs/Body1_ABS_1h14m-32x32.png', '.thumbs/Body1_ABS_1h3m-350x350.png', '.thumbs/Body1_ABS_1h3m-32x32.png']
2023-11-05 11:50:27,289 [print.py:_callback()] - updatefiles: []
2023-11-05 11:50:27,290 [print.py:_callback()] - newfiles: []
2023-11-05 11:50:27,290 [print.py:_callback()] - deletedfiles: ['.thumbs/Body1_ABS_1h14m-350x350.png']
2023-11-05 11:50:27,291 [print.py:_callback()] - updatefiles: []
2023-11-05 11:50:27,296 [print.py:_callback()] - newfiles: []
2023-11-05 11:50:27,296 [print.py:_callback()] - deletedfiles: ['.thumbs/Body1_ABS_1h14m-350x350.png']
2023-11-05 11:50:27,297 [print.py:_callback()] - updatefiles: []
2023-11-05 11:50:27,297 [print.py:_callback()] - newfiles: []
2023-11-05 11:50:27,298 [print.py:_callback()] - deletedfiles: ['.thumbs/Body1_ABS_1h14m-350x350.png']
2023-11-05 11:50:27,298 [print.py:_callback()] - updatefiles: []
2023-11-05 11:50:27,299 [print.py:_callback()] - newfiles: []
2023-11-05 11:50:27,299 [print.py:_callback()] - deletedfiles: ['.thumbs/Body1_ABS_1h14m-32x32.png']
2023-11-05 11:50:27,299 [print.py:_callback()] - updatefiles: []
2023-11-05 11:50:27,300 [print.py:_callback()] - newfiles: []
2023-11-05 11:50:27,301 [print.py:_callback()] - deletedfiles: ['.thumbs/Body1_ABS_1h14m-32x32.png']
2023-11-05 11:50:27,301 [print.py:_callback()] - updatefiles: []
2023-11-05 11:50:27,302 [print.py:_callback()] - newfiles: []
2023-11-05 11:50:27,302 [print.py:_callback()] - deletedfiles: ['.thumbs/Body1_ABS_1h14m-32x32.png']
2023-11-05 11:50:27,302 [print.py:_callback()] - updatefiles: []
2023-11-05 11:50:27,303 [print.py:_callback()] - newfiles: []
2023-11-05 11:50:27,303 [print.py:_callback()] - deletedfiles: ['.thumbs/Body1_ABS_1h3m-350x350.png']
2023-11-05 11:50:27,304 [print.py:_callback()] - updatefiles: []
2023-11-05 11:50:27,305 [print.py:_callback()] - newfiles: []
2023-11-05 11:50:27,305 [print.py:_callback()] - deletedfiles: ['.thumbs/Body1_ABS_1h3m-350x350.png']
2023-11-05 11:50:27,305 [print.py:_callback()] - updatefiles: []
2023-11-05 11:50:27,306 [print.py:_callback()] - newfiles: []
2023-11-05 11:50:27,306 [print.py:_callback()] - deletedfiles: ['.thumbs/Body1_ABS_1h3m-350x350.png']
2023-11-05 11:50:27,307 [print.py:_callback()] - updatefiles: []
2023-11-05 11:50:27,307 [print.py:_callback()] - newfiles: []
2023-11-05 11:50:27,308 [print.py:_callback()] - deletedfiles: ['.thumbs/Body1_ABS_1h3m-32x32.png']
2023-11-05 11:50:27,308 [print.py:_callback()] - updatefiles: []
2023-11-05 11:50:27,309 [print.py:_callback()] - newfiles: []
2023-11-05 11:50:27,309 [print.py:_callback()] - deletedfiles: ['.thumbs/Body1_ABS_1h3m-32x32.png']
2023-11-05 11:50:27,309 [print.py:_callback()] - updatefiles: []
2023-11-05 11:50:27,310 [print.py:_callback()] - newfiles: []
2023-11-05 11:50:27,311 [print.py:_callback()] - deletedfiles: ['.thumbs/Body1_ABS_1h3m-32x32.png']
2023-11-05 11:50:27,311 [print.py:_callback()] - updatefiles: []
2023-11-05 11:50:28,287 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-11-05 11:50:28,288 [printer.py:change_state()] - Adding callback for state: ready
2023-11-05 11:50:28,294 [screen.py:show_panel()] - Reinitializing panel
2023-11-05 11:50:28,421 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-05 11:50:28,435 [main_menu.py:add_device()] - Adding device: extruder
2023-11-05 11:50:28,445 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-05 11:50:28,456 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-05 11:50:28,467 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-05 11:50:28,478 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-05 11:50:28,488 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-05 11:50:28,560 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-05 11:50:36,502 [print.py:_callback()] - newfiles: []
2023-11-05 11:50:36,502 [print.py:_callback()] - deletedfiles: []
2023-11-05 11:50:36,503 [print.py:_callback()] - updatefiles: ['Body1_ABS_1h3m.gcode']
2023-11-05 11:50:36,503 [print.py:update_file()] - Updating file Body1_ABS_1h3m.gcode
2023-11-05 11:50:36,505 [print.py:_callback()] - newfiles: []
2023-11-05 11:50:36,506 [print.py:_callback()] - deletedfiles: []
2023-11-05 11:50:36,506 [print.py:_callback()] - updatefiles: ['Body1_ABS_1h3m.gcode']
2023-11-05 11:50:36,506 [print.py:update_file()] - Updating file Body1_ABS_1h3m.gcode
2023-11-05 11:50:36,508 [print.py:_callback()] - newfiles: []
2023-11-05 11:50:36,509 [print.py:_callback()] - deletedfiles: []
2023-11-05 11:50:36,509 [print.py:_callback()] - updatefiles: ['Body1_ABS_1h3m.gcode']
2023-11-05 11:50:36,509 [print.py:update_file()] - Updating file Body1_ABS_1h3m.gcode
2023-11-05 11:50:36,571 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-05 11:50:36,571 [printer.py:change_state()] - Adding callback for state: printing
2023-11-05 11:50:36,595 [screen.py:show_panel()] - Reinitializing panel
2023-11-05 11:50:36,808 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-05 11:50:36,821 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-05 11:50:36,836 [job_status.py:update_file_metadata()] - Update Metadata. File: Body1_ABS_1h3m.gcode Size: 2050492
2023-11-05 11:50:36,846 [job_status.py:show_file_thumbnail()] - Body1_ABS_1h3m.gcode
2023-11-05 11:50:37,481 [files.py:add_file()] - File already exists: Body1_ABS_1h3m.gcode
2023-11-05 11:50:37,484 [print.py:_callback()] - newfiles: []
2023-11-05 11:50:37,484 [print.py:_callback()] - deletedfiles: []
2023-11-05 11:50:37,485 [print.py:_callback()] - updatefiles: ['Body1_ABS_1h3m.gcode']
2023-11-05 11:50:37,485 [print.py:update_file()] - Updating file Body1_ABS_1h3m.gcode
2023-11-05 11:50:37,487 [print.py:_callback()] - newfiles: []
2023-11-05 11:50:37,488 [print.py:_callback()] - deletedfiles: []
2023-11-05 11:50:37,488 [print.py:_callback()] - updatefiles: ['Body1_ABS_1h3m.gcode']
2023-11-05 11:50:37,488 [print.py:update_file()] - Updating file Body1_ABS_1h3m.gcode
2023-11-05 11:50:37,491 [print.py:_callback()] - newfiles: []
2023-11-05 11:50:37,491 [print.py:_callback()] - deletedfiles: []
2023-11-05 11:50:37,492 [print.py:_callback()] - updatefiles: ['Body1_ABS_1h3m.gcode']
2023-11-05 11:50:37,492 [print.py:update_file()] - Updating file Body1_ABS_1h3m.gcode
2023-11-05 11:50:37,512 [print.py:_callback()] - newfiles: []
2023-11-05 11:50:37,513 [print.py:_callback()] - deletedfiles: []
2023-11-05 11:50:37,513 [print.py:_callback()] - updatefiles: ['Body1_ABS_1h3m.gcode']
2023-11-05 11:50:37,513 [print.py:update_file()] - Updating file Body1_ABS_1h3m.gcode
2023-11-05 11:50:37,516 [print.py:_callback()] - newfiles: []
2023-11-05 11:50:37,517 [print.py:_callback()] - deletedfiles: []
2023-11-05 11:50:37,517 [print.py:_callback()] - updatefiles: ['Body1_ABS_1h3m.gcode']
2023-11-05 11:50:37,518 [print.py:update_file()] - Updating file Body1_ABS_1h3m.gcode
2023-11-05 11:50:37,520 [print.py:_callback()] - newfiles: []
2023-11-05 11:50:37,520 [print.py:_callback()] - deletedfiles: []
2023-11-05 11:50:37,520 [print.py:_callback()] - updatefiles: ['Body1_ABS_1h3m.gcode']
2023-11-05 11:50:37,520 [print.py:update_file()] - Updating file Body1_ABS_1h3m.gcode
2023-11-05 12:44:48,689 [screen.py:show_screensaver()] - Showing Screensaver
2023-11-05 12:57:46,495 [screen.py:close_screensaver()] - Closing Screensaver
2023-11-05 12:57:46,531 [screen.py:wake_screen()] - Screen wake up
2023-11-05 12:57:46,585 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-11-05 12:57:51,973 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-05 12:57:51,973 [printer.py:change_state()] - Adding callback for state: ready
2023-11-05 13:57:46,688 [screen.py:show_screensaver()] - Showing Screensaver
2023-11-05 14:44:12,784 [print.py:_callback()] - newfiles: []
2023-11-05 14:44:12,785 [print.py:_callback()] - deletedfiles: []
2023-11-05 14:44:12,785 [print.py:_callback()] - updatefiles: ['Body1_ABS_1h3m.gcode']
2023-11-05 14:44:12,785 [print.py:update_file()] - Updating file Body1_ABS_1h3m.gcode
2023-11-05 14:44:12,787 [print.py:_callback()] - newfiles: []
2023-11-05 14:44:12,788 [print.py:_callback()] - deletedfiles: []
2023-11-05 14:44:12,788 [print.py:_callback()] - updatefiles: ['Body1_ABS_1h3m.gcode']
2023-11-05 14:44:12,789 [print.py:update_file()] - Updating file Body1_ABS_1h3m.gcode
2023-11-05 14:44:12,790 [print.py:_callback()] - newfiles: []
2023-11-05 14:44:12,791 [print.py:_callback()] - deletedfiles: []
2023-11-05 14:44:12,791 [print.py:_callback()] - updatefiles: ['Body1_ABS_1h3m.gcode']
2023-11-05 14:44:12,791 [print.py:update_file()] - Updating file Body1_ABS_1h3m.gcode
2023-11-05 14:44:12,915 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-05 14:44:12,915 [printer.py:change_state()] - Adding callback for state: printing
2023-11-05 14:44:12,926 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2023-11-05 14:44:12,932 [screen.py:close_screensaver()] - Closing Screensaver
2023-11-05 14:44:12,954 [screen.py:wake_screen()] - Screen wake up
2023-11-05 14:44:13,010 [screen.py:show_panel()] - Reinitializing panel
2023-11-05 14:44:13,230 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-05 14:44:13,241 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-05 14:44:13,256 [job_status.py:update_file_metadata()] - Update Metadata. File: Body1_ABS_1h3m.gcode Size: 2173458
2023-11-05 14:44:13,266 [job_status.py:show_file_thumbnail()] - Body1_ABS_1h3m.gcode
2023-11-05 14:44:13,762 [files.py:add_file()] - File already exists: Body1_ABS_1h3m.gcode
2023-11-05 14:44:13,766 [print.py:_callback()] - newfiles: []
2023-11-05 14:44:13,766 [print.py:_callback()] - deletedfiles: []
2023-11-05 14:44:13,767 [print.py:_callback()] - updatefiles: ['Body1_ABS_1h3m.gcode']
2023-11-05 14:44:13,767 [print.py:update_file()] - Updating file Body1_ABS_1h3m.gcode
2023-11-05 14:44:13,769 [print.py:_callback()] - newfiles: []
2023-11-05 14:44:13,770 [print.py:_callback()] - deletedfiles: []
2023-11-05 14:44:13,770 [print.py:_callback()] - updatefiles: ['Body1_ABS_1h3m.gcode']
2023-11-05 14:44:13,771 [print.py:update_file()] - Updating file Body1_ABS_1h3m.gcode
2023-11-05 14:44:13,773 [print.py:_callback()] - newfiles: []
2023-11-05 14:44:13,773 [print.py:_callback()] - deletedfiles: []
2023-11-05 14:44:13,774 [print.py:_callback()] - updatefiles: ['Body1_ABS_1h3m.gcode']
2023-11-05 14:44:13,774 [print.py:update_file()] - Updating file Body1_ABS_1h3m.gcode
2023-11-05 14:44:13,796 [print.py:_callback()] - newfiles: []
2023-11-05 14:44:13,796 [print.py:_callback()] - deletedfiles: []
2023-11-05 14:44:13,797 [print.py:_callback()] - updatefiles: ['Body1_ABS_1h3m.gcode']
2023-11-05 14:44:13,797 [print.py:update_file()] - Updating file Body1_ABS_1h3m.gcode
2023-11-05 14:44:13,799 [print.py:_callback()] - newfiles: []
2023-11-05 14:44:13,799 [print.py:_callback()] - deletedfiles: []
2023-11-05 14:44:13,799 [print.py:_callback()] - updatefiles: ['Body1_ABS_1h3m.gcode']
2023-11-05 14:44:13,800 [print.py:update_file()] - Updating file Body1_ABS_1h3m.gcode
2023-11-05 14:44:13,801 [print.py:_callback()] - newfiles: []
2023-11-05 14:44:13,802 [print.py:_callback()] - deletedfiles: []
2023-11-05 14:44:13,802 [print.py:_callback()] - updatefiles: ['Body1_ABS_1h3m.gcode']
2023-11-05 14:44:13,802 [print.py:update_file()] - Updating file Body1_ABS_1h3m.gcode
2023-11-05 15:44:13,687 [screen.py:show_screensaver()] - Showing Screensaver
2023-11-05 16:05:10,434 [screen.py:close_screensaver()] - Closing Screensaver
2023-11-05 16:05:10,465 [screen.py:wake_screen()] - Screen wake up
2023-11-05 16:05:10,519 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-11-05 16:05:16,438 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-05 16:05:16,438 [printer.py:change_state()] - Adding callback for state: ready
2023-11-05 16:10:09,563 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2023-11-05 16:10:09,565 [job_status.py:restart()] - Starting print: Body1_ABS_1h3m.gcode
2023-11-05 16:10:09,796 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-05 16:10:09,797 [printer.py:change_state()] - Adding callback for state: printing
2023-11-05 16:10:09,810 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2023-11-05 16:10:09,862 [screen.py:show_panel()] - Reinitializing panel
2023-11-05 16:10:10,080 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-05 16:10:10,091 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-05 16:10:10,106 [job_status.py:update_file_metadata()] - Update Metadata. File: Body1_ABS_1h3m.gcode Size: 2173458
2023-11-05 16:10:10,115 [job_status.py:show_file_thumbnail()] - Body1_ABS_1h3m.gcode
2023-11-05 17:10:09,686 [screen.py:show_screensaver()] - Showing Screensaver
2023-11-05 17:16:47,410 [screen.py:close_screensaver()] - Closing Screensaver
2023-11-05 17:16:47,474 [screen.py:wake_screen()] - Screen wake up
2023-11-05 17:16:47,537 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-11-05 17:16:53,164 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-05 17:16:53,165 [printer.py:change_state()] - Adding callback for state: ready
2023-11-05 18:16:47,688 [screen.py:show_screensaver()] - Showing Screensaver
2023-11-05 18:42:07,299 [print.py:_callback()] - newfiles: ['.thumbs/rear_z_motor_mount_ABS_4h34m-350x350.png']
2023-11-05 18:42:07,300 [print.py:_callback()] - deletedfiles: []
2023-11-05 18:42:07,301 [print.py:_callback()] - updatefiles: []
2023-11-05 18:42:07,302 [print.py:_callback()] - newfiles: ['.thumbs/rear_z_motor_mount_ABS_4h34m-350x350.png']
2023-11-05 18:42:07,303 [print.py:_callback()] - deletedfiles: []
2023-11-05 18:42:07,303 [print.py:_callback()] - updatefiles: []
2023-11-05 18:42:07,306 [print.py:_callback()] - newfiles: ['.thumbs/rear_z_motor_mount_ABS_4h34m-350x350.png']
2023-11-05 18:42:07,307 [print.py:_callback()] - deletedfiles: []
2023-11-05 18:42:07,307 [print.py:_callback()] - updatefiles: []
2023-11-05 18:42:07,320 [files.py:_callback()] - Error in getting metadata for .thumbs/rear_z_motor_mount_ABS_4h34m-350x350.png. Retrying in 6 seconds
2023-11-05 18:42:07,321 [print.py:_callback()] - newfiles: ['.thumbs/rear_z_motor_mount_ABS_4h34m-32x32.png']
2023-11-05 18:42:07,322 [print.py:_callback()] - deletedfiles: []
2023-11-05 18:42:07,322 [print.py:_callback()] - updatefiles: []
2023-11-05 18:42:07,323 [print.py:_callback()] - newfiles: ['.thumbs/rear_z_motor_mount_ABS_4h34m-32x32.png']
2023-11-05 18:42:07,324 [print.py:_callback()] - deletedfiles: []
2023-11-05 18:42:07,324 [print.py:_callback()] - updatefiles: []
2023-11-05 18:42:07,326 [print.py:_callback()] - newfiles: ['.thumbs/rear_z_motor_mount_ABS_4h34m-32x32.png']
2023-11-05 18:42:07,326 [print.py:_callback()] - deletedfiles: []
2023-11-05 18:42:07,327 [print.py:_callback()] - updatefiles: []
2023-11-05 18:42:07,337 [print.py:_callback()] - newfiles: ['rear_z_motor_mount_ABS_4h34m.gcode']
2023-11-05 18:42:07,378 [print.py:_callback()] - deletedfiles: []
2023-11-05 18:42:07,379 [print.py:_callback()] - updatefiles: []
2023-11-05 18:42:07,380 [print.py:_callback()] - newfiles: ['rear_z_motor_mount_ABS_4h34m.gcode']
2023-11-05 18:42:07,382 [print.py:_callback()] - deletedfiles: []
2023-11-05 18:42:07,382 [print.py:_callback()] - updatefiles: []
2023-11-05 18:42:07,383 [print.py:_callback()] - newfiles: ['rear_z_motor_mount_ABS_4h34m.gcode']
2023-11-05 18:42:07,385 [print.py:_callback()] - deletedfiles: []
2023-11-05 18:42:07,386 [print.py:_callback()] - updatefiles: []
2023-11-05 18:42:07,387 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-05 18:42:07,388 [printer.py:change_state()] - Adding callback for state: printing
2023-11-05 18:42:07,394 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2023-11-05 18:42:07,396 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2023-11-05 18:42:07,396 [job_status.py:show_file_thumbnail()] - rear_z_motor_mount_ABS_4h34m.gcode
2023-11-05 18:42:07,397 [job_status.py:show_file_thumbnail()] - no pixbuf
2023-11-05 18:42:07,400 [files.py:_callback()] - Error in getting metadata for .thumbs/rear_z_motor_mount_ABS_4h34m-32x32.png. Retrying in 6 seconds
2023-11-05 18:42:07,405 [screen.py:close_screensaver()] - Closing Screensaver
2023-11-05 18:42:07,426 [screen.py:wake_screen()] - Screen wake up
2023-11-05 18:42:07,482 [screen.py:show_panel()] - Reinitializing panel
2023-11-05 18:42:07,714 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-05 18:42:07,728 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-05 18:42:07,743 [job_status.py:update_file_metadata()] - Update Metadata. File: rear_z_motor_mount_ABS_4h34m.gcode Size: 19490209
2023-11-05 18:42:07,753 [job_status.py:show_file_thumbnail()] - rear_z_motor_mount_ABS_4h34m.gcode
2023-11-05 18:42:07,760 [print.py:_callback()] - newfiles: []
2023-11-05 18:42:07,760 [print.py:_callback()] - deletedfiles: []
2023-11-05 18:42:07,760 [print.py:_callback()] - updatefiles: ['rear_z_motor_mount_ABS_4h34m.gcode']
2023-11-05 18:42:07,761 [print.py:update_file()] - Updating file rear_z_motor_mount_ABS_4h34m.gcode
2023-11-05 18:42:07,763 [print.py:_callback()] - newfiles: []
2023-11-05 18:42:07,763 [print.py:_callback()] - deletedfiles: []
2023-11-05 18:42:07,763 [print.py:_callback()] - updatefiles: ['rear_z_motor_mount_ABS_4h34m.gcode']
2023-11-05 18:42:07,763 [print.py:update_file()] - Updating file rear_z_motor_mount_ABS_4h34m.gcode
2023-11-05 18:42:07,765 [print.py:_callback()] - newfiles: []
2023-11-05 18:42:07,765 [print.py:_callback()] - deletedfiles: []
2023-11-05 18:42:07,766 [print.py:_callback()] - updatefiles: ['rear_z_motor_mount_ABS_4h34m.gcode']
2023-11-05 18:42:07,766 [print.py:update_file()] - Updating file rear_z_motor_mount_ABS_4h34m.gcode
2023-11-05 19:56:08,686 [screen.py:show_screensaver()] - Showing Screensaver
2023-11-05 22:18:22,751 [screen.py:close_screensaver()] - Closing Screensaver
2023-11-05 22:18:22,793 [screen.py:wake_screen()] - Screen wake up
2023-11-05 23:18:23,686 [screen.py:show_screensaver()] - Showing Screensaver
2023-11-05 23:27:14,084 [screen.py:close_screensaver()] - Closing Screensaver
2023-11-05 23:27:14,117 [screen.py:wake_screen()] - Screen wake up
2023-11-05 23:27:14,173 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-11-05 23:27:20,070 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-05 23:27:20,071 [printer.py:change_state()] - Adding callback for state: ready
2023-11-06 00:27:14,688 [screen.py:show_screensaver()] - Showing Screensaver
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-65-g4a14962
2023-11-06 05:17:23,233 [screen.py:main()] - Python version: 3.9
2023-11-06 05:17:23,234 [screen.py:main()] - KlipperScreen version: v0.3.6-65-g4a14962
2023-11-06 05:17:23,245 [functions.py:detect_desktop_environment()] - Error:
'XDG_CURRENT_DESKTOP'

Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
2023-11-06 05:17:23,533 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-11-06 05:17:23,540 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2023-11-06 05:17:23,569 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-11-06 05:17:23,676 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-11-06 05:17:23,677 [config.py:install_language()] - Using system lang
2023-11-06 05:17:23,678 [config.py:install_language()] - Using lang en
2023-11-06 05:17:23,720 [screen.py:__init__()] - Screen resolution: 800x480
2023-11-06 05:17:23,725 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-11-06 05:17:25,585 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-11-06 05:17:25,604 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-11-06 05:17:25,618 [screen.py:initial_connection()] - Default printer: None
2023-11-06 05:17:25,619 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-06 05:17:25,620 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-11-06 05:17:25,728 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-06 05:17:25,754 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-06 05:17:25,799 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-06 05:17:25,826 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-06 05:17:25,830 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-06 05:17:25,852 [_logging.py:info()] - Websocket connected
2023-11-06 05:17:25,853 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-06 05:17:26,208 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-06 05:17:26,234 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-06 05:17:26,239 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-06 05:17:26,265 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-06 05:17:26,268 [printer.py:configure_cameras()] - Cameras: []
2023-11-06 05:17:26,268 [screen.py:init_printer()] - Klipper not connected
2023-11-06 05:17:29,972 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-06 05:17:29,992 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-06 05:17:29,994 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-06 05:17:30,013 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-06 05:17:30,015 [printer.py:configure_cameras()] - Cameras: []
2023-11-06 05:17:30,016 [screen.py:init_printer()] - Klipper not connected
2023-11-06 05:17:32,988 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-06 05:17:33,015 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-06 05:17:33,019 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-06 05:17:33,048 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-06 05:17:33,057 [printer.py:configure_cameras()] - Cameras: []
2023-11-06 05:17:33,125 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2023-11-06 05:17:35,975 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-06 05:17:35,996 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-06 05:17:35,998 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-06 05:17:36,017 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-06 05:17:36,019 [printer.py:configure_cameras()] - Cameras: []
2023-11-06 05:17:36,044 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-06 05:17:36,093 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-06 05:17:36,097 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'max_extrude_cross_section': '5', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'firmware_retraction': {'retract_length': '2', 'retract_speed': '10', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.310'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n0.002500, 0.009375, 0.021250, -0.023750, -0.048125\n-0.006250, -0.013125, -0.060625, -0.024375, -0.038125\n-0.049375, -0.081250, -0.078750, -0.080000, -0.091875', 'x_count': '5', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '306.56', 'min_y': '29.700000000000003', 'max_y': '110.08'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'firmware_retraction': {'retract_length': 2.0, 'retract_speed': 10.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.0025, 0.009375, 0.02125, -0.02375, -0.048125], [-0.00625, -0.013125, -0.060625, -0.024375, -0.038125], [-0.049375, -0.08125, -0.07875, -0.08, -0.091875]], 'min_x': 35.0, 'max_x': 306.56, 'min_y': 29.700000000000003, 'max_y': 110.08, 'x_count': 5, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.31, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-06 05:17:36,103 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-11-06 05:17:36,103 [printer.py:reinit()] - # Extruders: 1
2023-11-06 05:17:36,103 [printer.py:reinit()] - # Temperature devices: 5
2023-11-06 05:17:36,103 [printer.py:reinit()] - # Fans: 2
2023-11-06 05:17:36,104 [printer.py:reinit()] - # Output pins: 1
2023-11-06 05:17:36,104 [printer.py:reinit()] - # Leds: 0
2023-11-06 05:17:36,130 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-06 05:17:36,133 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-06 05:17:36,413 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-11-06 05:17:36,447 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-06 05:17:36,450 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-11-06 05:17:36,452 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-11-06 05:17:36,452 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-06 05:17:36,454 [screen.py:init_printer()] - Printer initialized
2023-11-06 05:17:36,456 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-11-06 05:17:36,457 [printer.py:change_state()] - Adding callback for state: startup
2023-11-06 05:17:36,659 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-11-06 05:17:36,660 [printer.py:change_state()] - Adding callback for state: ready
2023-11-06 05:17:36,665 [screen.py:_load_panel()] - Loading panel: main_menu
2023-11-06 05:17:36,833 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-06 05:17:36,851 [main_menu.py:add_device()] - Adding device: extruder
2023-11-06 05:17:36,868 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-06 05:17:36,880 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-06 05:17:36,891 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-06 05:17:36,904 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-06 05:17:36,918 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-06 05:17:37,003 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-06 05:17:37,008 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: []
2023-11-06 05:17:41,984 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-06 05:17:42,013 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-11-06 05:17:42,042 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-06 05:17:42,044 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-14 19:00:07,344 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2023-11-14 19:01:00,959 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-14 19:01:00,959 [printer.py:change_state()] - Adding callback for state: printing
2023-11-14 19:01:00,991 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-14 19:01:00,995 [screen.py:_load_panel()] - Loading panel: job_status
2023-11-14 19:01:01,232 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-14 19:01:01,243 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-14 19:01:01,271 [job_status.py:update_file_metadata()] - Update Metadata. File: front_left_z_motor_mount.gcode Size: 4998742
2023-11-14 19:01:01,285 [job_status.py:show_file_thumbnail()] - front_left_z_motor_mount.gcode
2023-11-14 19:01:01,818 [files.py:add_file()] - File already exists: front_left_z_motor_mount.gcode
2023-11-14 19:18:52,301 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2023-11-14 19:18:52,925 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-14 19:18:52,925 [job_status.py:cancel_confirm()] - Canceling print
2023-11-14 19:18:52,926 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-11-14 19:18:52,932 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-11-14 19:18:53,809 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-11-14 19:18:55,907 [job_status.py:close_panel()] - Closing job_status panel
2023-11-14 19:18:55,915 [screen.py:show_panel()] - Reinitializing panel
2023-11-14 19:18:56,084 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-14 19:18:56,098 [main_menu.py:add_device()] - Adding device: extruder
2023-11-14 19:18:56,107 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-14 19:18:56,118 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-14 19:18:56,128 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-14 19:18:56,138 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-14 19:18:56,148 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-14 19:18:56,215 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-14 19:18:57,052 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-14 19:18:57,053 [printer.py:change_state()] - Adding callback for state: ready
2023-11-14 19:18:57,064 [screen.py:show_panel()] - Reinitializing panel
2023-11-14 19:18:57,182 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-14 19:18:57,196 [main_menu.py:add_device()] - Adding device: extruder
2023-11-14 19:18:57,206 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-14 19:18:57,216 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-14 19:18:57,226 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-14 19:18:57,236 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-14 19:18:57,246 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-14 19:18:57,317 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-14 19:18:59,133 [screen.py:_load_panel()] - Loading panel: move
2023-11-14 19:18:59,282 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-11-14 19:19:00,578 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-11-14 19:19:00,588 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-11-14 19:19:05,763 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-11-14 19:19:05,768 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-11-14 19:21:49,763 [screen.py:_menu_go_back()] - #### Menu go back
2023-11-14 19:21:49,818 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-14 19:21:51,288 [screen.py:_load_panel()] - Loading panel: print
2023-11-14 19:21:51,310 [print.py:__init__()] - 24h time is True
2023-11-14 19:21:51,396 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2023-11-14 19:21:51,396 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-14 19:22:10,635 [print.py:change_sort()] - Changing sort_name to Name
2023-11-14 19:22:10,653 [config.py:save_user_config_options()] - Creating a new config file in /home/biqu/printer_data/config/KlipperScreen.conf
2023-11-14 19:22:16,973 [KlippyGtk.py:Dialog()] - Showing dialog Print front_left_z_motor_mount.gcode (width=800, height=480)
2023-11-14 19:22:18,391 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-14 19:22:18,392 [print.py:confirm_print_response()] - Starting print: front_left_z_motor_mount.gcode
2023-11-14 19:22:18,392 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2023-11-14 19:22:18,616 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-14 19:22:18,617 [printer.py:change_state()] - Adding callback for state: printing
2023-11-14 19:22:18,636 [screen.py:show_panel()] - Reinitializing panel
2023-11-14 19:22:18,871 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-14 19:22:18,882 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-14 19:22:18,899 [job_status.py:update_file_metadata()] - Update Metadata. File: front_left_z_motor_mount.gcode Size: 4998742
2023-11-14 19:22:18,908 [job_status.py:show_file_thumbnail()] - front_left_z_motor_mount.gcode
2023-11-14 20:22:18,765 [screen.py:show_screensaver()] - Showing Screensaver
2023-11-14 22:25:30,419 [screen.py:close_screensaver()] - Closing Screensaver
2023-11-14 22:25:30,449 [screen.py:wake_screen()] - Screen wake up
2023-11-14 22:25:30,503 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-11-14 22:25:36,426 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-14 22:25:36,427 [printer.py:change_state()] - Adding callback for state: ready
2023-11-14 23:25:30,766 [screen.py:show_screensaver()] - Showing Screensaver
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-65-g4a14962
2023-11-15 03:17:20,051 [screen.py:main()] - Python version: 3.9
2023-11-15 03:17:20,052 [screen.py:main()] - KlipperScreen version: v0.3.6-65-g4a14962
2023-11-15 03:17:20,066 [functions.py:detect_desktop_environment()] - Error:
'XDG_CURRENT_DESKTOP'

Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
2023-11-15 03:17:20,345 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-11-15 03:17:20,350 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2023-11-15 03:17:20,393 [config.py:log_config()] -  ===== Config File =====

=======================
2023-11-15 03:17:20,396 [config.py:__init__()] - ====== Saved Def ======

[main]
print_sort_dir = date_asc

=======================
2023-11-15 03:17:20,397 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-11-15 03:17:20,593 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-11-15 03:17:20,593 [config.py:install_language()] - Using system lang
2023-11-15 03:17:20,594 [config.py:install_language()] - Using lang en
2023-11-15 03:17:20,633 [screen.py:__init__()] - Screen resolution: 800x480
2023-11-15 03:17:20,637 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-11-15 03:17:22,467 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-11-15 03:17:22,484 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-11-15 03:17:22,497 [screen.py:initial_connection()] - Default printer: None
2023-11-15 03:17:22,497 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-15 03:17:22,498 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-11-15 03:17:22,595 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-15 03:17:22,614 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-15 03:17:22,652 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-15 03:17:22,677 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-15 03:17:22,681 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-15 03:17:22,697 [_logging.py:info()] - Websocket connected
2023-11-15 03:17:22,698 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-15 03:17:23,018 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-15 03:17:23,039 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-15 03:17:23,042 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'authorization', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-15 03:17:23,062 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-15 03:17:23,065 [printer.py:configure_cameras()] - Cameras: []
2023-11-15 03:17:23,065 [screen.py:init_printer()] - Klipper not connected
2023-11-15 03:17:25,968 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-15 03:17:25,989 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-15 03:17:25,991 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'authorization', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-15 03:17:26,011 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-15 03:17:26,013 [printer.py:configure_cameras()] - Cameras: []
2023-11-15 03:17:26,013 [screen.py:init_printer()] - Klipper not connected
2023-11-15 03:17:28,972 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-15 03:17:28,996 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-15 03:17:29,000 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'authorization', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-15 03:17:29,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-15 03:17:29,024 [printer.py:configure_cameras()] - Cameras: []
2023-11-15 03:17:29,024 [screen.py:init_printer()] - Klipper not connected
2023-11-15 03:17:31,978 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-15 03:17:32,003 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-15 03:17:32,006 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'authorization', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-15 03:17:32,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-15 03:17:32,033 [printer.py:configure_cameras()] - Cameras: []
2023-11-15 03:17:32,076 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2023-11-15 03:17:34,965 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-15 03:17:34,985 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-15 03:17:34,987 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'authorization', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-15 03:17:35,005 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-15 03:17:35,006 [printer.py:configure_cameras()] - Cameras: []
2023-11-15 03:17:35,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-15 03:17:35,063 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-15 03:17:35,067 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'max_extrude_cross_section': '5', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'firmware_retraction': {'retract_length': '2', 'retract_speed': '10', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.310'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n0.002500, 0.009375, 0.021250, -0.023750, -0.048125\n-0.006250, -0.013125, -0.060625, -0.024375, -0.038125\n-0.049375, -0.081250, -0.078750, -0.080000, -0.091875', 'x_count': '5', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '306.56', 'min_y': '29.700000000000003', 'max_y': '110.08'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'firmware_retraction': {'retract_length': 2.0, 'retract_speed': 10.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.0025, 0.009375, 0.02125, -0.02375, -0.048125], [-0.00625, -0.013125, -0.060625, -0.024375, -0.038125], [-0.049375, -0.08125, -0.07875, -0.08, -0.091875]], 'min_x': 35.0, 'max_x': 306.56, 'min_y': 29.700000000000003, 'max_y': 110.08, 'x_count': 5, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.31, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-15 03:17:35,072 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-11-15 03:17:35,072 [printer.py:reinit()] - # Extruders: 1
2023-11-15 03:17:35,072 [printer.py:reinit()] - # Temperature devices: 5
2023-11-15 03:17:35,073 [printer.py:reinit()] - # Fans: 2
2023-11-15 03:17:35,073 [printer.py:reinit()] - # Output pins: 1
2023-11-15 03:17:35,073 [printer.py:reinit()] - # Leds: 0
2023-11-15 03:17:35,097 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-15 03:17:35,101 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-15 03:17:35,385 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-11-15 03:17:35,425 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-15 03:17:35,428 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-11-15 03:17:35,431 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-11-15 03:17:35,431 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-15 03:17:35,434 [screen.py:init_printer()] - Printer initialized
2023-11-15 03:17:35,435 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-11-15 03:17:35,435 [printer.py:change_state()] - Adding callback for state: startup
2023-11-15 03:17:35,823 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-11-15 03:17:35,824 [printer.py:change_state()] - Adding callback for state: ready
2023-11-15 03:17:35,829 [screen.py:_load_panel()] - Loading panel: main_menu
2023-11-15 03:17:36,010 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-15 03:17:36,031 [main_menu.py:add_device()] - Adding device: extruder
2023-11-15 03:17:36,053 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-15 03:17:36,076 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-15 03:17:36,092 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-15 03:17:36,107 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-15 03:17:36,120 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-15 03:17:36,208 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-15 03:17:36,211 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: []
2023-11-15 03:17:40,964 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-15 03:17:40,991 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-11-15 03:17:41,014 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-15 03:17:41,016 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-15 19:14:06,860 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2023-11-15 19:14:36,919 [files.py:_callback()] - Error in getting metadata for .thumbs/stringing_test-32x32.png. Retrying in 6 seconds
2023-11-15 19:14:36,923 [files.py:_callback()] - Error in getting metadata for .thumbs/stringing_test-400x300.png. Retrying in 6 seconds
2023-11-15 19:14:36,980 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-15 19:14:36,981 [printer.py:change_state()] - Adding callback for state: printing
2023-11-15 19:14:36,999 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-15 19:14:37,003 [screen.py:_load_panel()] - Loading panel: job_status
2023-11-15 19:14:37,267 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-15 19:14:37,284 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-15 19:14:37,315 [job_status.py:update_file_metadata()] - Update Metadata. File: stringing_test.gcode Size: 3463352
2023-11-15 19:14:37,331 [job_status.py:show_file_thumbnail()] - stringing_test.gcode
2023-11-15 19:58:19,452 [screen.py:show_screensaver()] - Showing Screensaver
2023-11-15 20:19:27,684 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-15 20:19:27,685 [printer.py:change_state()] - Adding callback for state: paused
2023-11-15 20:19:27,692 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-15 20:19:27,697 [screen.py:close_screensaver()] - Closing Screensaver
2023-11-15 20:19:27,724 [screen.py:wake_screen()] - Screen wake up
2023-11-15 20:19:27,780 [screen.py:show_panel()] - Reinitializing panel
2023-11-15 20:19:27,997 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-15 20:19:28,008 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-15 20:19:28,022 [job_status.py:update_file_metadata()] - Update Metadata. File: stringing_test.gcode Size: 3463352
2023-11-15 20:19:28,032 [job_status.py:show_file_thumbnail()] - stringing_test.gcode
2023-11-15 20:19:28,041 [screen.py:_load_panel()] - Loading panel: extrude
2023-11-15 20:19:28,153 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-15 20:19:37,713 [printer.py:change_state()] - Changing state from 'paused' to 'ready'
2023-11-15 20:19:37,714 [printer.py:change_state()] - Adding callback for state: ready
2023-11-15 20:21:18,707 [files.py:_callback()] - Error in getting metadata for .thumbs/stringing_test-32x32.png. Retrying in 6 seconds
2023-11-15 20:21:18,712 [files.py:_callback()] - Error in getting metadata for .thumbs/stringing_test-400x300.png. Retrying in 6 seconds
2023-11-15 20:21:18,744 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-15 20:21:18,745 [printer.py:change_state()] - Adding callback for state: printing
2023-11-15 20:21:18,759 [screen.py:show_panel()] - Reinitializing panel
2023-11-15 20:21:18,964 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-15 20:21:18,975 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-15 20:21:18,994 [job_status.py:update_file_metadata()] - Update Metadata. File: stringing_test.gcode Size: 3460258
2023-11-15 20:21:19,004 [job_status.py:show_file_thumbnail()] - stringing_test.gcode
2023-11-15 20:21:19,695 [files.py:add_file()] - File already exists: stringing_test.gcode
2023-11-15 21:19:28,436 [screen.py:show_screensaver()] - Showing Screensaver
2023-11-15 22:24:01,005 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-11-15 22:24:01,006 [printer.py:change_state()] - Adding callback for state: paused
2023-11-15 22:24:01,012 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-11-15 22:24:01,016 [screen.py:close_screensaver()] - Closing Screensaver
2023-11-15 22:24:01,037 [screen.py:wake_screen()] - Screen wake up
2023-11-15 22:24:01,093 [screen.py:show_panel()] - Reinitializing panel
2023-11-15 22:24:01,310 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-15 22:24:01,321 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-11-15 22:24:01,336 [job_status.py:update_file_metadata()] - Update Metadata. File: stringing_test.gcode Size: 3460258
2023-11-15 22:24:01,346 [job_status.py:show_file_thumbnail()] - stringing_test.gcode
2023-11-15 22:24:01,354 [screen.py:show_panel()] - Reinitializing panel
2023-11-15 22:24:01,495 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-11-15 22:24:12,047 [printer.py:change_state()] - Changing state from 'paused' to 'ready'
2023-11-15 22:24:12,048 [printer.py:change_state()] - Adding callback for state: ready
2023-11-15 22:25:23,841 [files.py:_callback()] - Error in getting metadata for .thumbs/a_drive_frame_lower-32x32.png. Retrying in 6 seconds
2023-11-15 22:25:23,846 [files.py:_callback()] - Error in getting metadata for .thumbs/a_drive_frame_lower-400x300.png. Retrying in 6 seconds
2023-11-15 22:25:24,005 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-15 22:25:24,005 [printer.py:change_state()] - Adding callback for state: printing
2023-11-15 22:25:24,023 [screen.py:show_panel()] - Reinitializing panel
2023-11-15 22:25:24,236 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-15 22:25:24,250 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-15 22:25:24,278 [job_status.py:update_file_metadata()] - Update Metadata. File: a_drive_frame_lower.gcode Size: 29299572
2023-11-15 22:25:24,291 [job_status.py:show_file_thumbnail()] - a_drive_frame_lower.gcode
2023-11-15 22:37:34,987 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2023-11-15 22:37:35,854 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-15 22:37:35,855 [job_status.py:cancel_confirm()] - Canceling print
2023-11-15 22:37:35,856 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-11-15 22:37:35,865 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-11-15 22:37:36,316 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-11-15 22:37:39,061 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-15 22:37:39,061 [printer.py:change_state()] - Adding callback for state: ready
2023-11-15 22:37:40,804 [job_status.py:close_panel()] - Closing job_status panel
2023-11-15 22:37:40,811 [screen.py:show_panel()] - Reinitializing panel
2023-11-15 22:37:41,028 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-15 22:37:41,042 [main_menu.py:add_device()] - Adding device: extruder
2023-11-15 22:37:41,052 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-15 22:37:41,063 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-15 22:37:41,075 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-15 22:37:41,085 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-15 22:37:41,095 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-15 22:37:41,165 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-15 22:37:42,126 [screen.py:_load_panel()] - Loading panel: move
2023-11-15 22:37:42,277 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-11-15 22:37:43,973 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-11-15 22:37:43,985 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-11-15 22:38:16,469 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2023-11-15 22:38:16,478 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-11-15 22:38:17,924 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2023-11-15 22:38:17,929 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-11-15 22:38:18,192 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2023-11-15 22:38:18,197 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-11-15 22:39:59,497 [files.py:_callback()] - Error in getting metadata for .thumbs/a_drive_frame_lower-32x32.png. Retrying in 6 seconds
2023-11-15 22:39:59,501 [files.py:_callback()] - Error in getting metadata for .thumbs/a_drive_frame_lower-400x300.png. Retrying in 6 seconds
2023-11-15 22:39:59,722 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-15 22:39:59,722 [printer.py:change_state()] - Adding callback for state: printing
2023-11-15 22:39:59,739 [screen.py:show_panel()] - Reinitializing panel
2023-11-15 22:40:00,029 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-15 22:40:00,055 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-15 22:40:00,106 [job_status.py:update_file_metadata()] - Update Metadata. File: a_drive_frame_lower.gcode Size: 18059366
2023-11-15 22:40:00,120 [job_status.py:show_file_thumbnail()] - a_drive_frame_lower.gcode
2023-11-15 22:40:00,542 [files.py:add_file()] - File already exists: a_drive_frame_lower.gcode
2023-11-15 22:46:48,770 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=834, height=480)
2023-11-15 22:46:50,167 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-15 22:46:50,168 [job_status.py:cancel_confirm()] - Canceling print
2023-11-15 22:46:50,168 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-11-15 22:46:50,175 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-11-15 22:46:50,874 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-11-15 22:46:51,744 [job_status.py:close_panel()] - Closing job_status panel
2023-11-15 22:46:51,750 [screen.py:show_panel()] - Reinitializing panel
2023-11-15 22:46:51,877 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-15 22:46:51,891 [main_menu.py:add_device()] - Adding device: extruder
2023-11-15 22:46:51,901 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-15 22:46:51,911 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-15 22:46:51,921 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-15 22:46:51,932 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-15 22:46:51,942 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-15 22:46:52,009 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-15 22:46:53,151 [screen.py:show_panel()] - Reinitializing panel
2023-11-15 22:46:53,305 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-11-15 22:46:53,616 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-15 22:46:53,616 [printer.py:change_state()] - Adding callback for state: ready
2023-11-15 22:46:53,627 [screen.py:show_panel()] - Reinitializing panel
2023-11-15 22:46:53,756 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-15 22:46:53,769 [main_menu.py:add_device()] - Adding device: extruder
2023-11-15 22:46:53,779 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-15 22:46:53,789 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-15 22:46:53,799 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-15 22:46:53,811 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-15 22:46:53,821 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-15 22:46:53,891 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-15 22:46:55,143 [screen.py:show_panel()] - Reinitializing panel
2023-11-15 22:46:55,288 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-11-15 22:46:55,877 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-11-15 22:46:55,882 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-11-15 22:48:53,557 [files.py:_callback()] - Error in getting metadata for .thumbs/xy_joint_left_lower-32x32.png. Retrying in 6 seconds
2023-11-15 22:48:53,565 [files.py:_callback()] - Error in getting metadata for .thumbs/xy_joint_left_lower-400x300.png. Retrying in 6 seconds
2023-11-15 22:48:53,726 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-15 22:48:53,727 [printer.py:change_state()] - Adding callback for state: printing
2023-11-15 22:48:53,744 [screen.py:show_panel()] - Reinitializing panel
2023-11-15 22:48:53,977 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-15 22:48:53,989 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-15 22:48:54,004 [job_status.py:update_file_metadata()] - Update Metadata. File: xy_joint_left_lower.gcode Size: 8382042
2023-11-15 22:48:54,014 [job_status.py:show_file_thumbnail()] - xy_joint_left_lower.gcode
2023-11-15 22:55:51,790 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=834, height=480)
2023-11-15 22:55:52,501 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-15 22:55:52,502 [job_status.py:cancel_confirm()] - Canceling print
2023-11-15 22:55:52,503 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-11-15 22:55:52,509 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-11-15 22:55:53,221 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-11-15 22:55:54,085 [job_status.py:close_panel()] - Closing job_status panel
2023-11-15 22:55:54,090 [screen.py:show_panel()] - Reinitializing panel
2023-11-15 22:55:54,212 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-15 22:55:54,226 [main_menu.py:add_device()] - Adding device: extruder
2023-11-15 22:55:54,236 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-15 22:55:54,246 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-15 22:55:54,257 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-15 22:55:54,267 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-15 22:55:54,278 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-15 22:55:54,347 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-15 22:55:55,338 [screen.py:show_panel()] - Reinitializing panel
2023-11-15 22:55:55,494 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-11-15 22:55:56,205 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-11-15 22:55:56,213 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-11-15 22:55:56,228 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-15 22:55:56,228 [printer.py:change_state()] - Adding callback for state: ready
2023-11-15 22:55:56,237 [screen.py:show_panel()] - Reinitializing panel
2023-11-15 22:55:56,372 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-15 22:55:56,386 [main_menu.py:add_device()] - Adding device: extruder
2023-11-15 22:55:56,395 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-15 22:55:56,406 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-15 22:55:56,416 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-15 22:55:56,426 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-15 22:55:56,436 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-15 22:55:56,510 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-65-g4a14962
2023-11-15 22:17:20,019 [screen.py:main()] - Python version: 3.9
2023-11-15 22:17:20,020 [screen.py:main()] - KlipperScreen version: v0.3.6-65-g4a14962
2023-11-15 22:17:20,031 [functions.py:detect_desktop_environment()] - Error:
'XDG_CURRENT_DESKTOP'

Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
2023-11-15 22:17:20,307 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-11-15 22:17:20,310 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2023-11-15 22:17:20,350 [config.py:log_config()] -  ===== Config File =====

=======================
2023-11-15 22:17:20,353 [config.py:__init__()] - ====== Saved Def ======

[main]
print_sort_dir = date_asc

=======================
2023-11-15 22:17:20,354 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-11-15 22:17:20,559 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-11-15 22:17:20,560 [config.py:install_language()] - Using system lang
2023-11-15 22:17:20,561 [config.py:install_language()] - Using lang en
2023-11-15 22:17:20,598 [screen.py:__init__()] - Screen resolution: 800x480
2023-11-15 22:17:20,600 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-11-15 22:17:22,012 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-11-15 22:17:22,026 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-11-15 22:17:22,037 [screen.py:initial_connection()] - Default printer: None
2023-11-15 22:17:22,037 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-15 22:17:22,038 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-11-15 22:17:22,135 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-15 22:17:22,150 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-15 22:17:22,184 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-15 22:17:22,210 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-15 22:17:22,213 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-15 22:17:22,231 [_logging.py:info()] - Websocket connected
2023-11-15 22:17:22,232 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-15 22:17:22,492 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-15 22:17:22,510 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-15 22:17:22,512 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-15 22:17:22,532 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-15 22:17:22,534 [printer.py:configure_cameras()] - Cameras: []
2023-11-15 22:17:22,535 [screen.py:init_printer()] - Klipper not connected
2023-11-15 22:17:26,103 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-15 22:17:26,134 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-15 22:17:26,137 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-15 22:17:26,161 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-15 22:17:26,163 [printer.py:configure_cameras()] - Cameras: []
2023-11-15 22:17:26,164 [screen.py:init_printer()] - Klipper not connected
2023-11-15 22:17:29,100 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-15 22:17:29,124 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-15 22:17:29,127 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-15 22:17:29,146 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-15 22:17:29,148 [printer.py:configure_cameras()] - Cameras: []
2023-11-15 22:17:29,148 [screen.py:init_printer()] - Klipper not connected
2023-11-15 22:17:32,106 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-15 22:17:32,133 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-15 22:17:32,135 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-15 22:17:32,154 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-15 22:17:32,157 [printer.py:configure_cameras()] - Cameras: []
2023-11-15 22:17:32,181 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-15 22:17:32,222 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-15 22:17:32,226 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'max_extrude_cross_section': '5', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'firmware_retraction': {'retract_length': '0.8', 'retract_speed': '10', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.310'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n0.002500, 0.009375, 0.021250, -0.023750, -0.048125\n-0.006250, -0.013125, -0.060625, -0.024375, -0.038125\n-0.049375, -0.081250, -0.078750, -0.080000, -0.091875', 'x_count': '5', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '306.56', 'min_y': '29.700000000000003', 'max_y': '110.08'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'firmware_retraction': {'retract_length': 0.8, 'retract_speed': 10.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.0025, 0.009375, 0.02125, -0.02375, -0.048125], [-0.00625, -0.013125, -0.060625, -0.024375, -0.038125], [-0.049375, -0.08125, -0.07875, -0.08, -0.091875]], 'min_x': 35.0, 'max_x': 306.56, 'min_y': 29.700000000000003, 'max_y': 110.08, 'x_count': 5, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.31, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-15 22:17:32,232 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-11-15 22:17:32,232 [printer.py:reinit()] - # Extruders: 1
2023-11-15 22:17:32,233 [printer.py:reinit()] - # Temperature devices: 5
2023-11-15 22:17:32,233 [printer.py:reinit()] - # Fans: 2
2023-11-15 22:17:32,234 [printer.py:reinit()] - # Output pins: 1
2023-11-15 22:17:32,234 [printer.py:reinit()] - # Leds: 0
2023-11-15 22:17:32,271 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-15 22:17:32,276 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-15 22:17:32,543 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-11-15 22:17:32,575 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-15 22:17:32,578 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-11-15 22:17:32,579 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-11-15 22:17:32,580 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-15 22:17:32,585 [screen.py:init_printer()] - Printer initialized
2023-11-15 22:17:32,587 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-11-15 22:17:32,587 [printer.py:change_state()] - Adding callback for state: startup
2023-11-15 22:17:34,477 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-11-15 22:17:34,478 [printer.py:change_state()] - Adding callback for state: ready
2023-11-15 22:17:34,483 [screen.py:_load_panel()] - Loading panel: main_menu
2023-11-15 22:17:34,616 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-15 22:17:34,630 [main_menu.py:add_device()] - Adding device: extruder
2023-11-15 22:17:34,641 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-15 22:17:34,653 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-15 22:17:34,662 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-15 22:17:34,673 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-15 22:17:34,683 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-15 22:17:34,757 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-15 22:17:34,760 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: []
2023-11-15 22:17:38,109 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-15 22:17:38,189 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-11-15 22:17:38,229 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-15 22:17:38,233 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-16 18:57:30,772 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-11-16 18:57:30,772 [printer.py:change_state()] - Adding callback for state: disconnected
2023-11-16 18:57:30,774 [screen.py:state_disconnected()] - ### Going to disconnected
2023-11-16 18:57:30,777 [screen.py:show_panel()] - Reinitializing panel
2023-11-16 18:57:30,845 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-16 18:57:33,829 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-16 18:57:33,852 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-16 18:57:33,855 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-16 18:57:33,875 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-16 18:57:33,877 [printer.py:configure_cameras()] - Cameras: []
2023-11-16 18:57:33,941 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-16 18:57:33,974 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-16 18:57:33,978 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'max_extrude_cross_section': '5', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'firmware_retraction': {'retract_length': '0.8', 'retract_speed': '10', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.310'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n0.002500, 0.009375, 0.021250, -0.023750, -0.048125\n-0.006250, -0.013125, -0.060625, -0.024375, -0.038125\n-0.049375, -0.081250, -0.078750, -0.080000, -0.091875', 'x_count': '5', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '306.56', 'min_y': '29.700000000000003', 'max_y': '110.08'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'firmware_retraction': {'retract_length': 0.8, 'retract_speed': 10.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.0025, 0.009375, 0.02125, -0.02375, -0.048125], [-0.00625, -0.013125, -0.060625, -0.024375, -0.038125], [-0.049375, -0.08125, -0.07875, -0.08, -0.091875]], 'min_x': 35.0, 'max_x': 306.56, 'min_y': 29.700000000000003, 'max_y': 110.08, 'x_count': 5, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.31, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-16 18:57:33,984 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-11-16 18:57:33,985 [printer.py:reinit()] - # Extruders: 1
2023-11-16 18:57:33,985 [printer.py:reinit()] - # Temperature devices: 5
2023-11-16 18:57:33,985 [printer.py:reinit()] - # Fans: 2
2023-11-16 18:57:33,985 [printer.py:reinit()] - # Output pins: 1
2023-11-16 18:57:33,985 [printer.py:reinit()] - # Leds: 0
2023-11-16 18:57:34,010 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-16 18:57:34,013 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-16 18:57:34,293 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-11-16 18:57:34,333 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-16 18:57:34,352 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-11-16 18:57:34,374 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-16 18:57:34,377 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-11-16 18:57:34,378 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-11-16 18:57:34,379 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-16 18:57:34,381 [screen.py:init_printer()] - Printer initialized
2023-11-16 18:57:34,382 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-11-16 18:57:34,383 [printer.py:change_state()] - Adding callback for state: startup
2023-11-16 18:57:35,716 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-11-16 18:57:35,716 [printer.py:change_state()] - Adding callback for state: ready
2023-11-16 18:57:35,722 [screen.py:show_panel()] - Reinitializing panel
2023-11-16 18:57:35,840 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-16 18:57:35,853 [main_menu.py:add_device()] - Adding device: extruder
2023-11-16 18:57:35,863 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-16 18:57:35,874 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-16 18:57:35,884 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-16 18:57:35,893 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-16 18:57:35,904 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-16 18:57:35,972 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-16 19:10:56,693 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2023-11-16 19:11:28,000 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-16 19:11:28,001 [printer.py:change_state()] - Adding callback for state: printing
2023-11-16 19:11:28,022 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-16 19:11:28,027 [screen.py:_load_panel()] - Loading panel: job_status
2023-11-16 19:11:28,288 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-16 19:11:28,299 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-16 19:11:28,327 [job_status.py:update_file_metadata()] - Update Metadata. File: a_drive_frame_lower.gcode Size: 8735278
2023-11-16 19:11:28,341 [job_status.py:show_file_thumbnail()] - a_drive_frame_lower.gcode
2023-11-16 19:11:28,828 [files.py:add_file()] - File already exists: a_drive_frame_lower.gcode
2023-11-16 19:28:43,753 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=834, height=480)
2023-11-16 19:28:44,584 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-16 19:28:44,585 [job_status.py:cancel_confirm()] - Canceling print
2023-11-16 19:28:44,586 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-11-16 19:28:44,592 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-11-16 19:28:45,084 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-11-16 19:28:46,140 [job_status.py:close_panel()] - Closing job_status panel
2023-11-16 19:28:46,144 [screen.py:show_panel()] - Reinitializing panel
2023-11-16 19:28:46,261 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-16 19:28:46,274 [main_menu.py:add_device()] - Adding device: extruder
2023-11-16 19:28:46,284 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-16 19:28:46,295 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-16 19:28:46,305 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-16 19:28:46,315 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-16 19:28:46,327 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-16 19:28:46,394 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-16 19:28:47,390 [screen.py:_load_panel()] - Loading panel: move
2023-11-16 19:28:47,548 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-11-16 19:28:47,826 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-16 19:28:47,827 [printer.py:change_state()] - Adding callback for state: ready
2023-11-16 19:28:47,838 [screen.py:show_panel()] - Reinitializing panel
2023-11-16 19:28:47,960 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-16 19:28:47,974 [main_menu.py:add_device()] - Adding device: extruder
2023-11-16 19:28:47,985 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-16 19:28:47,995 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-16 19:28:48,005 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-16 19:28:48,020 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-16 19:28:48,030 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-16 19:28:48,099 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-16 19:28:48,566 [screen.py:_load_panel()] - Loading panel: temperature
2023-11-16 19:28:48,596 [temperature.py:add_device()] - Adding device: extruder
2023-11-16 19:28:48,608 [temperature.py:add_device()] - Adding device: heater_bed
2023-11-16 19:28:48,621 [temperature.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-16 19:28:48,630 [temperature.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-16 19:28:48,640 [temperature.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-16 19:28:48,650 [temperature.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-16 19:28:48,661 [temperature.py:select_heater()] - Selecting extruder
2023-11-16 19:28:48,663 [temperature.py:select_heater()] - Selecting heater_bed
2023-11-16 19:28:48,730 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2023-11-16 19:28:50,763 [screen.py:_menu_go_back()] - #### Menu go back
2023-11-16 19:28:50,820 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-16 19:28:51,750 [screen.py:show_panel()] - Reinitializing panel
2023-11-16 19:28:51,899 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-11-16 19:28:52,876 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-11-16 19:28:52,884 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-11-16 19:29:32,052 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-11-16 19:29:32,057 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-11-16 19:29:33,948 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-11-16 19:29:33,953 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-11-16 19:36:20,354 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-16 19:36:20,354 [printer.py:change_state()] - Adding callback for state: printing
2023-11-16 19:36:20,370 [screen.py:show_panel()] - Reinitializing panel
2023-11-16 19:36:20,584 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-16 19:36:20,595 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-16 19:36:20,629 [job_status.py:update_file_metadata()] - Update Metadata. File: a_drive_frame_lower.gcode Size: 8742058
2023-11-16 19:36:20,643 [job_status.py:show_file_thumbnail()] - a_drive_frame_lower.gcode
2023-11-16 19:36:21,330 [files.py:add_file()] - File already exists: a_drive_frame_lower.gcode
2023-11-16 20:29:34,801 [screen.py:show_screensaver()] - Showing Screensaver
2023-11-16 22:17:02,335 [screen.py:close_screensaver()] - Closing Screensaver
2023-11-16 22:17:02,377 [screen.py:wake_screen()] - Screen wake up
2023-11-16 22:48:28,491 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-11-16 22:48:33,992 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-16 22:48:33,993 [printer.py:change_state()] - Adding callback for state: ready
2023-11-16 22:50:39,382 [files.py:_callback()] - Error in getting metadata for .thumbs/b_drive_frame_lower-32x32.png. Retrying in 6 seconds
2023-11-16 22:50:39,387 [files.py:_callback()] - Error in getting metadata for .thumbs/b_drive_frame_lower-400x300.png. Retrying in 6 seconds
2023-11-16 22:50:39,582 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-16 22:50:39,583 [printer.py:change_state()] - Adding callback for state: printing
2023-11-16 22:50:39,598 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2023-11-16 22:50:39,611 [job_status.py:update_file_metadata()] - Update Metadata. File: b_drive_frame_lower.gcode Size: 8710530
2023-11-16 22:50:39,622 [job_status.py:show_file_thumbnail()] - b_drive_frame_lower.gcode
2023-11-16 22:50:39,684 [screen.py:show_panel()] - Reinitializing panel
2023-11-16 22:50:39,921 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-16 22:50:39,933 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-16 22:50:39,950 [job_status.py:update_file_metadata()] - Update Metadata. File: b_drive_frame_lower.gcode Size: 8710530
2023-11-16 22:50:39,960 [job_status.py:show_file_thumbnail()] - b_drive_frame_lower.gcode
2023-11-16 22:54:16,162 [screen.py:show_popup_message()] - error: Communication timeout during homing probe
2023-11-16 22:54:16,262 [screen.py:show_popup_message()] - error: Communication timeout during homing probe
2023-11-16 22:54:16,275 [screen.py:show_popup_message()] - error: Communication timeout during homing probe
2023-11-16 22:54:16,288 [screen.py:show_popup_message()] - echo: Extruder not hot enough
2023-11-16 22:54:16,310 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-11-16 22:54:16,944 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-16 22:54:16,944 [printer.py:change_state()] - Adding callback for state: ready
2023-11-16 22:54:20,215 [files.py:_callback()] - Error in getting metadata for .thumbs/xy_joint_right_upper-32x32.png. Retrying in 6 seconds
2023-11-16 22:54:20,246 [files.py:_callback()] - Error in getting metadata for .thumbs/xy_joint_right_upper-400x300.png. Retrying in 6 seconds
2023-11-16 22:55:42,928 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-16 22:55:42,929 [printer.py:change_state()] - Adding callback for state: printing
2023-11-16 22:55:42,947 [job_status.py:set_state()] - Changing job_status state from 'cancelled' to 'printing'
2023-11-16 22:55:43,015 [screen.py:show_panel()] - Reinitializing panel
2023-11-16 22:55:43,231 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-16 22:55:43,242 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-16 22:55:43,261 [job_status.py:update_file_metadata()] - Update Metadata. File: b_drive_frame_lower.gcode Size: 8710530
2023-11-16 22:55:43,271 [job_status.py:show_file_thumbnail()] - b_drive_frame_lower.gcode
2023-11-16 23:17:02,801 [screen.py:show_screensaver()] - Showing Screensaver
2023-11-17 02:07:19,369 [screen.py:close_screensaver()] - Closing Screensaver
2023-11-17 02:07:19,397 [screen.py:wake_screen()] - Screen wake up
2023-11-17 02:07:19,451 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-11-17 02:07:24,879 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-17 02:07:24,880 [printer.py:change_state()] - Adding callback for state: ready
2023-11-17 03:07:19,802 [screen.py:show_screensaver()] - Showing Screensaver
2023-11-17 05:13:11,000 [screen.py:close_screensaver()] - Closing Screensaver
2023-11-17 05:13:11,040 [screen.py:wake_screen()] - Screen wake up
2023-11-17 05:13:14,408 [job_status.py:close_panel()] - Closing job_status panel
2023-11-17 05:13:14,416 [screen.py:show_panel()] - Reinitializing panel
2023-11-17 05:13:14,625 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-17 05:13:14,640 [main_menu.py:add_device()] - Adding device: extruder
2023-11-17 05:13:14,651 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-17 05:13:14,661 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-17 05:13:14,671 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-17 05:13:14,681 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-17 05:13:14,691 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-17 05:13:14,765 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-17 05:13:16,219 [screen.py:_load_panel()] - Loading panel: gcode_macros
2023-11-17 05:13:16,293 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > gcode_macros
2023-11-17 05:13:20,400 [screen.py:_menu_go_back()] - #### Menu go back
2023-11-17 05:13:20,530 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-17 05:13:21,954 [screen.py:_load_panel()] - Loading panel: print
2023-11-17 05:13:21,970 [print.py:__init__()] - 24h time is True
2023-11-17 05:13:22,028 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2023-11-17 05:13:22,028 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-17 05:13:23,260 [print.py:_callback()] - newfiles: []
2023-11-17 05:13:23,261 [print.py:_callback()] - deletedfiles: ['.thumbs/b_drive_frame_lower-32x32.png', '.thumbs/b_drive_frame_lower-400x300.png', '.thumbs/xy_joint_right_upper-32x32.png', '.thumbs/xy_joint_right_upper-400x300.png']
2023-11-17 05:13:23,261 [print.py:_callback()] - updatefiles: []
2023-11-17 05:13:23,262 [print.py:_callback()] - newfiles: []
2023-11-17 05:13:23,262 [print.py:_callback()] - deletedfiles: ['.thumbs/b_drive_frame_lower-32x32.png']
2023-11-17 05:13:23,263 [print.py:_callback()] - updatefiles: []
2023-11-17 05:13:23,263 [print.py:_callback()] - newfiles: []
2023-11-17 05:13:23,264 [print.py:_callback()] - deletedfiles: ['.thumbs/b_drive_frame_lower-400x300.png']
2023-11-17 05:13:23,264 [print.py:_callback()] - updatefiles: []
2023-11-17 05:13:23,265 [print.py:_callback()] - newfiles: []
2023-11-17 05:13:23,266 [print.py:_callback()] - deletedfiles: ['.thumbs/xy_joint_right_upper-32x32.png']
2023-11-17 05:13:23,266 [print.py:_callback()] - updatefiles: []
2023-11-17 05:13:23,267 [print.py:_callback()] - newfiles: []
2023-11-17 05:13:23,267 [print.py:_callback()] - deletedfiles: ['.thumbs/xy_joint_right_upper-400x300.png']
2023-11-17 05:13:23,268 [print.py:_callback()] - updatefiles: []
2023-11-17 05:13:38,326 [KlippyGtk.py:Dialog()] - Showing dialog Print xy_joint_right_upper.gcode (width=800, height=480)
2023-11-17 05:13:41,116 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-17 05:13:41,116 [print.py:confirm_print_response()] - Starting print: xy_joint_right_upper.gcode
2023-11-17 05:13:41,117 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2023-11-17 05:13:41,311 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-17 05:13:41,312 [printer.py:change_state()] - Adding callback for state: printing
2023-11-17 05:13:41,339 [screen.py:show_panel()] - Reinitializing panel
2023-11-17 05:13:41,592 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-17 05:13:41,607 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-17 05:13:41,636 [job_status.py:update_file_metadata()] - Update Metadata. File: xy_joint_right_upper.gcode Size: 10370836
2023-11-17 05:13:41,645 [job_status.py:show_file_thumbnail()] - xy_joint_right_upper.gcode
2023-11-17 05:27:59,203 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=834, height=480)
2023-11-17 05:28:00,626 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-17 05:28:00,626 [job_status.py:cancel_confirm()] - Canceling print
2023-11-17 05:28:00,627 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-11-17 05:28:00,633 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-11-17 05:28:01,612 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-11-17 05:28:04,359 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-17 05:28:04,360 [printer.py:change_state()] - Adding callback for state: ready
2023-11-17 05:28:08,032 [job_status.py:close_panel()] - Closing job_status panel
2023-11-17 05:28:08,037 [screen.py:show_panel()] - Reinitializing panel
2023-11-17 05:28:08,170 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-17 05:28:08,184 [main_menu.py:add_device()] - Adding device: extruder
2023-11-17 05:28:08,195 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-17 05:28:08,207 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-17 05:28:08,217 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-17 05:28:08,227 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-17 05:28:08,237 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-17 05:28:08,304 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-17 05:28:09,443 [screen.py:show_panel()] - Reinitializing panel
2023-11-17 05:28:09,594 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-11-17 05:28:11,425 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-11-17 05:28:11,434 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-11-17 05:28:12,809 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-11-17 05:28:12,813 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-11-17 05:28:34,305 [screen.py:_menu_go_back()] - #### Menu go back
2023-11-17 05:28:34,410 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-17 05:28:36,123 [screen.py:show_panel()] - Reinitializing panel
2023-11-17 05:28:36,133 [print.py:__init__()] - 24h time is True
2023-11-17 05:28:36,223 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2023-11-17 05:28:36,224 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-17 05:28:46,907 [KlippyGtk.py:Dialog()] - Showing dialog Print xy_joint_right_upper.gcode (width=800, height=480)
2023-11-17 05:28:48,486 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-11-17 05:28:48,487 [print.py:confirm_print_response()] - Starting print: xy_joint_right_upper.gcode
2023-11-17 05:28:48,487 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2023-11-17 05:28:48,743 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-11-17 05:28:48,744 [printer.py:change_state()] - Adding callback for state: printing
2023-11-17 05:28:48,768 [screen.py:show_panel()] - Reinitializing panel
2023-11-17 05:28:49,004 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-11-17 05:28:49,016 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-11-17 05:28:49,032 [job_status.py:update_file_metadata()] - Update Metadata. File: xy_joint_right_upper.gcode Size: 10370836
2023-11-17 05:28:49,042 [job_status.py:show_file_thumbnail()] - xy_joint_right_upper.gcode
2023-11-17 06:28:48,801 [screen.py:show_screensaver()] - Showing Screensaver
2023-11-17 08:17:15,219 [screen.py:close_screensaver()] - Closing Screensaver
2023-11-17 08:17:15,267 [screen.py:wake_screen()] - Screen wake up
2023-11-17 08:18:50,347 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-11-17 08:18:56,095 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-11-17 08:18:56,095 [printer.py:change_state()] - Adding callback for state: ready
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-65-g4a14962
2023-11-17 08:17:22,590 [screen.py:main()] - Python version: 3.9
2023-11-17 08:17:22,590 [screen.py:main()] - KlipperScreen version: v0.3.6-65-g4a14962
2023-11-17 08:17:22,609 [functions.py:detect_desktop_environment()] - Error:
'XDG_CURRENT_DESKTOP'

Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
2023-11-17 08:17:22,932 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-11-17 08:17:22,936 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2023-11-17 08:17:22,971 [config.py:log_config()] -  ===== Config File =====

=======================
2023-11-17 08:17:22,974 [config.py:__init__()] - ====== Saved Def ======

[main]
print_sort_dir = date_asc

=======================
2023-11-17 08:17:22,975 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-11-17 08:17:23,078 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-11-17 08:17:23,079 [config.py:install_language()] - Using system lang
2023-11-17 08:17:23,080 [config.py:install_language()] - Using lang en
2023-11-17 08:17:23,111 [screen.py:__init__()] - Screen resolution: 800x480
2023-11-17 08:17:23,114 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-11-17 08:17:25,156 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-11-17 08:17:25,187 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-11-17 08:17:25,217 [screen.py:initial_connection()] - Default printer: None
2023-11-17 08:17:25,217 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-17 08:17:25,218 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-11-17 08:17:25,326 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-17 08:17:25,356 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-17 08:17:25,421 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-17 08:17:25,443 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-17 08:17:25,445 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-17 08:17:25,461 [_logging.py:info()] - Websocket connected
2023-11-17 08:17:25,461 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-17 08:17:25,729 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-17 08:17:25,748 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-17 08:17:25,750 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-17 08:17:25,768 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-17 08:17:25,770 [printer.py:configure_cameras()] - Cameras: []
2023-11-17 08:17:25,771 [screen.py:init_printer()] - Klipper not connected
2023-11-17 08:17:29,173 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-17 08:17:29,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-17 08:17:29,195 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-17 08:17:29,214 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-17 08:17:29,216 [printer.py:configure_cameras()] - Cameras: []
2023-11-17 08:17:29,217 [screen.py:init_printer()] - Klipper not connected
2023-11-17 08:17:32,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-17 08:17:32,195 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-17 08:17:32,197 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-17 08:17:32,216 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-17 08:17:32,218 [printer.py:configure_cameras()] - Cameras: []
2023-11-17 08:17:32,251 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2023-11-17 08:17:35,171 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-17 08:17:35,189 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-17 08:17:35,191 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-17 08:17:35,208 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-17 08:17:35,209 [printer.py:configure_cameras()] - Cameras: []
2023-11-17 08:17:35,230 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-17 08:17:35,289 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-11-17 08:17:35,293 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'board_pins EBB36_G0B1_v1.1': {'mcu': 'can0', 'aliases': '', 'aliases_step': '\nEXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15', 'aliases_limitsw': '\nLIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6', 'aliases_bltouch': '\nPROBE_1=PB9,PROBE_2=PB8', 'aliases_fans': '\nFAN0=PA1,FAN1=PA0', 'aliases_thermistors': '\nTH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7', 'aliases_heaters': '\nHE0=PB13', 'aliases_rgb': '\nRGBLED=PD3', 'aliases_adxl': '\nADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11', 'aliases_i2c': '\nAUX0=PB3,AUX1=PB4'}, 'mcu can0': {'canbus_uuid': '468039d874b8'}, 'temperature_sensor CANBOARD': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0'}, 'heater_fan hotend_fan': {'pin': 'can0:FAN0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'can0:FAN1', 'kick_start_time': '0.25', 'cycle_time': '0.15', 'off_below': '0.10'}, 'extruder': {'step_pin': 'can0:EXT_STEP', 'dir_pin': 'can0:EXT_DIR', 'enable_pin': '!can0:EXT_EN', 'rotation_distance': '4.637', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'max_extrude_only_distance': '500', 'max_extrude_only_velocity': '120', 'pressure_advance': '0.025', 'pressure_advance_smooth_time': '0.03', 'microsteps': '16', 'full_steps_per_rotation': '200', 'max_extrude_only_accel': '1500', 'max_extrude_cross_section': '5', 'heater_pin': 'can0:HE0', 'sensor_pin': 'can0:TH0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '35.972', 'pid_ki': '14.107', 'pid_kd': '22.932', 'min_temp': '-50', 'max_temp': '350'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'interpolate': 'true', 'run_current': '0.85', 'hold_current': '0.100', 'sense_resistor': '0.11', 'stealthchop_threshold': '0'}, 'adxl345': {'cs_pin': 'can0:ADXL_CS', 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_mosi_pin': 'can0:ADXL_MOSI', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175,175,20'}, 'firmware_retraction': {'retract_length': '0.8', 'retract_speed': '10', 'unretract_extra_length': '0', 'unretract_speed': '10'}, 'mcu': {'canbus_uuid': '26b18d5aec60'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'skew_correction': {}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'thermistor NTC10K': {'temperature1': '0.0', 'resistance1': '32116.0', 'temperature2': '40.0', 'resistance2': '5309.0', 'temperature3': '80.0', 'resistance3': '1228.0'}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'sensor_pin': 'PA4', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'C'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'bed_mesh': {'speed': '150', 'horizontal_move_z': '5', 'mesh_min': '35, 12', 'mesh_max': '320, 320', 'probe_count': '5, 5', 'algorithm': 'bicubic'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'rotation_distance': '39.66', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'can0:LIMIT_3', 'homing_retract_dist': '5', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'rotation_distance': '39.83', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '!PF4', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'True', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD11', 'dir_pin': '!PD9', 'enable_pin': '!PD15', 'rotation_distance': '4', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '250', 'position_min': '-2.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'interpolate': 'false', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '4', 'microsteps': '32'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA0', 'max_power': '0.7', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '40.654', 'pid_ki': '1.243', 'pid_kd': '332.343'}, 'output_pin caselight': {'pin': 'PB6', 'pwm': 'true', 'shutdown_value': '0', 'cycle_time': '0.01'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n175, 398\n400, 18', 'points': '\n30, 15\n175, 295\n320, 15', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=PC5'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro Level_Session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS'}, 'gcode_macro _CASELIGHT_ON': {'description': 'Helper: Light on', 'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}'}, 'gcode_macro _CASELIGHT_OFF': {'description': 'Helper: Light off', 'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}'}, 'gcode_macro CASELIGHT': {'description': 'Toggle light', 'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}"}, 'gcode_macro FAKE_POSITION': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10'}, 'gcode_macro T0': {'gcode': ''}, 'probe': {'pin': 'can0:PROBE_2', 'x_offset': '-29.8', 'y_offset': '-13.5', 'speed': '5', 'samples': '3', 'sample_retract_dist': '2', 'lift_speed': '5.0', 'samples_result': 'median', 'samples_tolerance': '0.02', 'samples_tolerance_retries': '5', 'z_offset': '-0.310'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro SMART_PARK': {'description': 'Parks your printhead near the print area for pre-print hotend heating.', 'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'force_move': {'enable_force_move': 'True'}, 'bed_mesh default': {'version': '1', 'points': '\n0.002500, 0.009375, 0.021250, -0.023750, -0.048125\n-0.006250, -0.013125, -0.060625, -0.024375, -0.038125\n-0.049375, -0.081250, -0.078750, -0.080000, -0.091875', 'x_count': '5', 'y_count': '3', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '35.0', 'max_x': '306.56', 'min_y': '29.700000000000003', 'max_y': '110.08'}}, 'settings': {'mcu': {'canbus_uuid': '26b18d5aec60', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'mcu can0': {'canbus_uuid': '468039d874b8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'board_pins ebb36_g0b1_v1.1': {'mcu': ['can0'], 'aliases': [], 'aliases_step': [['EXT_EN', 'PD2'], ['EXT_STEP', 'PD0'], ['EXT_DIR', 'PD1'], ['EXT_UART', 'PA15']], 'aliases_limitsw': [['LIMIT_1', 'PB7'], ['LIMIT_2', 'PB5'], ['LIMIT_3', 'PB6']], 'aliases_bltouch': [['PROBE_1', 'PB9'], ['PROBE_2', 'PB8']], 'aliases_fans': [['FAN0', 'PA1'], ['FAN1', 'PA0']], 'aliases_thermistors': [['TH0', 'PA3'], ['PT100_CS', 'PA4'], ['PT100_SCLK', 'PA5'], ['PT100_MISO', 'PA6'], ['PT100_MOSI', 'PA7']], 'aliases_heaters': [['HE0', 'PB13']], 'aliases_rgb': [['RGBLED', 'PD3']], 'aliases_adxl': [['ADXL_CS', 'PB12'], ['ADXL_SCLK', 'PB10'], ['ADXL_MISO', 'PB2'], ['ADXL_MOSI', 'PB11']], 'aliases_i2c': [['AUX0', 'PB3'], ['AUX1', 'PB4']]}, 'temperature_sensor canboard': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'can0', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'can0:FAN0', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.25, 'off_below': 0.1, 'cycle_time': 0.15, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'can0:FAN1'}, 'tmc2209 extruder': {'uart_pin': 'can0:EXT_UART', 'uart_address': 0, 'run_current': 0.85, 'hold_current': 0.1, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'can0:TH0', 'min_temp': -50.0, 'max_temp': 350.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 35.972, 'pid_ki': 14.107, 'pid_kd': 22.932, 'heater_pin': 'can0:HE0', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1500.0, 'max_extrude_only_distance': 500.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'can0:EXT_STEP', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'can0:EXT_DIR', 'rotation_distance': 4.637, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!can0:EXT_EN'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'can0:ADXL_CS', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'can0:ADXL_SCLK', 'spi_software_miso_pin': 'can0:ADXL_MISO', 'spi_software_mosi_pin': 'can0:ADXL_MOSI'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[175.0, 175.0, 20.0]], 'accel_chip': 'adxl345'}, 'firmware_retraction': {'retract_length': 0.8, 'retract_speed': 10.0, 'unretract_extra_length': 0.0, 'unretract_speed': 10.0}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'thermistor ntc10k': {'temperature1': 0.0, 'resistance1': 32116.0, 'temperature2': 40.0, 'resistance2': 5309.0, 'temperature3': 80.0, 'resistance3': 1228.0}, 'temperature_sensor chamber': {'sensor_type': 'NTC10K', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA4', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'C'}, 'gcode_arcs': {'resolution': 0.1}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [35.0, 12.0], 'mesh_max': [320.0, 320.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.0025, 0.009375, 0.02125, -0.02375, -0.048125], [-0.00625, -0.013125, -0.060625, -0.024375, -0.038125], [-0.049375, -0.08125, -0.07875, -0.08, -0.091875]], 'min_x': 35.0, 'max_x': 306.56, 'min_y': 29.700000000000003, 'max_y': 110.08, 'x_count': 5, 'y_count': 3, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 39.66, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'can0:LIMIT_3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 39.83, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PB3', 'endstop_pin': '!PF4', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD14', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD11', 'dir_pin': '!PD9', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD15', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -2.5, 'position_max': 250.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.7, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 40.654, 'pid_ki': 1.243, 'pid_kd': 332.343, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PB6', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [175.0, 398.0], [400.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 15.0], [175.0, 295.0], [320.0, 15.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE9'], ['EXP1_2', 'PE10'], ['EXP1_3', 'PE11'], ['EXP1_4', 'PE12'], ['EXP1_5', 'PE13'], ['EXP1_6', 'PE14'], ['EXP1_7', 'PE15'], ['EXP1_8', 'PB10'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_2', 'PB13'], ['EXP2_3', 'PF7'], ['EXP2_4', 'PB12'], ['EXP2_5', 'PE7'], ['EXP2_6', 'PB11'], ['EXP2_7', 'PE8'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', 'PC5']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\n\n\n\n\n\n\n\n\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\n\n\n\n\n\n\nVORON_PURGE\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-0.4 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro level_session': {'gcode': '\n\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\n\n\nG28\nG90\n\n\n\nM190 S60\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\n\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\n\nbed_mesh_calibrate\n\nTURN_OFF_HEATERS', 'description': 'G-Code macro'}, 'gcode_macro _caselight_on': {'gcode': '\nSET_PIN PIN=caselight VALUE={printer[\'gcode_macro _USER_VARIABLE\'].peripheral.caselight.on_val}\n{action_respond_info("Caselight on")}', 'description': 'Helper: Light on'}, 'gcode_macro _caselight_off': {'gcode': '\nSET_PIN PIN=caselight VALUE=0.0\n{action_respond_info("Caselight off")}', 'description': 'Helper: Light off'}, 'gcode_macro caselight': {'gcode': "{% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}", 'description': 'Toggle light'}, 'gcode_macro fake_position': {'gcode': '\nSET_KINEMATIC_POSITION X=10 Y=10 Z=10', 'description': 'G-Code macro'}, 'gcode_macro t0': {'gcode': '', 'description': 'G-Code macro'}, 'probe': {'z_offset': -0.31, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'can0:PROBE_2', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -29.8, 'y_offset': -13.5, 'samples': 3, 'sample_retract_dist': 2.0, 'samples_result': 'median', 'samples_tolerance': 0.02, 'samples_tolerance_retries': 5}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}\n{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}\n{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}\n{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}\n{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro voron_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set purge_height = kamp_settings.purge_height | float %}\n{% set tip_distance = kamp_settings.tip_distance | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set purge_amount = kamp_settings.purge_amount | float %}\n{% set flow_rate = kamp_settings.flow_rate | float %}\n{% set size = 10 | float %}\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_origin+size/2}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}\nG1 E-.5 F2100\nG0 Z{purge_height*2}\nG0 X{purge_x_origin+size*0.711} Y{purge_y_origin}\nG0 Z{purge_height}\nG1 E.5 F2100\nG1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{purge_height*2} F{travel_speed}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro smart_park': {'gcode': '\n\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set z_height = kamp_settings.smart_park_height | float %}\n{% set purge_margin = kamp_settings.purge_margin | float %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}\n{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}\n{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\n{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}\n{% set x_min = [ x_min - purge_margin , x_min ] | max %}\n{% set y_min = [ y_min - purge_margin , y_min ] | max %}\n{% endif %}\n\n\n{% if verbose_enable == True %}\n\n{ action_respond_info("Smart Park location: {},{}.".format(\n(x_min),\n(y_min),\n)) }\n\n{% endif %}\n\nG0 X{x_min} Y{y_min} F{travel_speed}\nG0 Z{z_height}', 'description': 'Parks your printhead near the print area for pre-print hotend heating.'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'force_move': {'enable_force_move': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-11-17 08:17:35,298 [printer.py:reinit()] - Klipper version: v0.11.0-304-gf7567a0d
2023-11-17 08:17:35,298 [printer.py:reinit()] - # Extruders: 1
2023-11-17 08:17:35,298 [printer.py:reinit()] - # Temperature devices: 5
2023-11-17 08:17:35,299 [printer.py:reinit()] - # Fans: 2
2023-11-17 08:17:35,299 [printer.py:reinit()] - # Output pins: 1
2023-11-17 08:17:35,299 [printer.py:reinit()] - # Leds: 0
2023-11-17 08:17:35,323 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-11-17 08:17:35,327 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-11-17 08:17:35,628 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CANBOARD&temperature_sensor MCU&temperature_sensor SoC&temperature_sensor chamber&fan&heater_fan hotend_fan&output_pin caselight
2023-11-17 08:17:35,651 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-17 08:17:35,653 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-11-17 08:17:35,654 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2023-11-17 08:17:35,654 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-11-17 08:17:35,656 [screen.py:init_printer()] - Printer initialized
2023-11-17 08:17:35,657 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-11-17 08:17:35,657 [printer.py:change_state()] - Adding callback for state: ready
2023-11-17 08:17:35,667 [screen.py:_load_panel()] - Loading panel: main_menu
2023-11-17 08:17:35,854 [main_menu.py:__init__()] - ### Making MainMenu
2023-11-17 08:17:35,871 [main_menu.py:add_device()] - Adding device: extruder
2023-11-17 08:17:35,882 [main_menu.py:add_device()] - Adding device: heater_bed
2023-11-17 08:17:35,892 [main_menu.py:add_device()] - Adding device: temperature_sensor CANBOARD
2023-11-17 08:17:35,902 [main_menu.py:add_device()] - Adding device: temperature_sensor MCU
2023-11-17 08:17:35,912 [main_menu.py:add_device()] - Adding device: temperature_sensor SoC
2023-11-17 08:17:35,922 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2023-11-17 08:17:35,990 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-11-17 08:17:35,993 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: []
2023-11-17 08:17:41,169 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-11-17 08:17:41,198 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor CANBOARD', 'temperature_sensor MCU', 'temperature_sensor SoC', 'temperature_sensor chamber', 'heater_bed', 'extruder']
2023-11-17 08:17:41,221 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-11-17 08:17:41,223 [screen.py:init_tempstore()] - Temperature store size: 1200
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-65-g4a14962
2023-11-17 18:56:46,464 [screen.py:main()] - Python version: 3.9
2023-11-17 18:56:46,465 [screen.py:main()] - KlipperScreen version: v0.3.6-65-g4a14962
2023-11-17 18:56:46,474 [functions.py:detect_desktop_environment()] - Error:
'XDG_CURRENT_DESKTOP'

Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
Traceback (most recent call last):
  File "/home/biqu/KlipperScreen/ks_includes/functions.py", line 191, in detect_desktop_environment
    env = os.environ['XDG_CURRENT_DESKTOP']
  File "/usr/lib/python3.9/os.py", line 679, in __getitem__
    raise KeyError(key) from None
KeyError: 'XDG_CURRENT_DESKTOP'
2023-11-17 18:56:46,721 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-11-17 18:56:46,723 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2023-11-17 18:56:46,885 [config.py:log_config()] -  ===== Config File =====

=======================
2023-11-17 18:56:46,888 [config.py:__init__()] - ====== Saved Def ======

[main]
print_sort_dir = date_asc

=======================
2023-11-17 18:56:46,889 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-11-17 18:56:46,995 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-11-17 18:56:46,995 [config.py:install_language()] - Using system lang
2023-11-17 18:56:46,996 [config.py:install_language()] - Using lang en
2023-11-17 18:56:47,047 [screen.py:__init__()] - Screen resolution: 800x480
2023-11-17 18:56:47,050 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-11-17 18:56:48,806 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-11-17 18:56:48,820 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-11-17 18:56:48,830 [screen.py:initial_connection()] - Default printer: None
2023-11-17 18:56:48,830 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-11-17 18:56:48,832 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-11-17 18:56:48,925 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-11-17 18:56:48,945 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-17 18:56:48,970 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2023-11-17 18:56:59,041 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-11-17 18:56:59,069 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-17 18:56:59,088 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-11-17 18:56:59,090 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-11-17 18:56:59,102 [_logging.py:info()] - Websocket connected
2023-11-17 18:56:59,103 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-11-17 18:56:59,122 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-17 18:56:59,139 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-11-17 18:56:59,141 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-188-ga71c5c1', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-11-17 18:56:59,158 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-11-17 18:56:59,160 [printer.py:configure_cameras()] - Cameras: []
2023-11-17 18:56:59,180 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-11-17 18:56:59,311 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
